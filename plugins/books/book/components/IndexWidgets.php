<?php namespace Books\Book\Components;

use Books\Book\Classes\Enums\WidgetEnum;
use Books\Catalog\Classes\FavoritesManager;
use Books\User\Classes\CookieEnum;
use Cms\Classes\ComponentBase;
use Cookie;
use Flash;
use Illuminate\Support\Facades\RateLimiter;
use Lang;
use October\Rain\Database\Collection;
use RainLab\User\Facades\Auth;
use RainLab\User\Models\User;

/**
 * IndexWidgets Component
 *
 * @link https://docs.octobercms.com/3.x/extend/cms-components.html
 */
class IndexWidgets extends ComponentBase
{

    protected ?User $user;
    private Collection|null $genres = null;
    private Collection|null $loved_genres = null;
    private Collection|null $unloved_genres = null;

    const RATE_LIMIT_ATTEMPTS = 15;

    public function componentDetails()
    {
        return [
            'name' => 'Виджеты на главной странице',
            'description' => 'Виджеты + чекбоксы выбора для неавторизованного пользователя'
        ];
    }

    /**
     * @link https://docs.octobercms.com/3.x/element/inspector-types.html
     */
    public function defineProperties()
    {
        return [];
    }

    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub

        $this->user = Auth::getUser();
        if (!$this->user) {
            if (!Cookie::has(CookieEnum::LOVED_GENRES->value)) {
                $this->loved_genres = $this->genres = FavoritesManager::defaultGenresBuilder()->get();
                $this->setLovedCookie();
            }
            $this->loved_genres ??= FavoritesManager::defaultGenresBuilder()->whereIn('id', getLovedFromCookie())->get();
            $this->unloved_genres = FavoritesManager::defaultGenresBuilder()->whereIn('id', getUnlovedFromCookie())->get();
            $this->genres ??= FavoritesManager::defaultGenresBuilder()->get();
        }
        $new = $this->addComponent(Widget::class, 'widget_new');
        $new->setUpWidget(WidgetEnum::new, withAll: true, short: true);

        $interested = $this->addComponent(Widget::class, 'interested');
        $interested->setUpWidget(WidgetEnum::interested, short: true);

        $gainingPopularity = $this->addComponent(Widget::class, 'gainingPopularity');
        $gainingPopularity->setUpWidget(WidgetEnum::gainingPopularity, withAll: true);

        $hot_new = $this->addComponent(Widget::class, 'hotNew');
        $hot_new->setUpWidget(WidgetEnum::hotNew, withAll: true);

        $recommend = $this->addComponent(Widget::class, 'recommend');
        $recommend->setUpWidget(WidgetEnum::recommend, short: true, withAll: true);

        $todayDiscount = $this->addComponent(Widget::class, 'todayDiscount');
        $todayDiscount->setUpWidget(WidgetEnum::todayDiscount, withAll: true);

        $bestsellers = $this->addComponent(Widget::class, 'bestsellers');
        $bestsellers->setUpWidget(WidgetEnum::bestsellers, withAll: true);

        $top = $this->addComponent(Widget::class, 'top');
        $top->setUpWidget(WidgetEnum::top, withAll: true);
    }

    public function onRender()
    {
        parent::onRender(); // TODO: Change the autogenerated stub
        foreach ($this->vals() as $key => $val) {
            $this->page[$key] = $val;
        }
    }

    public function vals(): array
    {
        $this->markSelected($this->genres, $this->loved_genres);
        return [
            'favorite_genres_list' => $this->genres
        ];
    }

    public function markSelected(Collection|null &$source, Collection|null $array, string $flag = 'selected'): void
    {
        if ($source && $array) {
            $source->each(fn($i) => $i[$flag] = (bool)$array->pluck('id')->intersect([$i->id])->count());
        }
    }


    public function onToggleFavorite(): array
    {
        if (!RateLimiter::attempt(__FUNCTION__ . request()->ip(), self::RATE_LIMIT_ATTEMPTS, fn() => 1)) {
            Flash::error(Lang::get('books.catalog::lang.plugin.too_many_attempt'));
            return [];
        }
        if ($this->user) {
            return [];
        }
        $genre = FavoritesManager::defaultGenresBuilder()->where('id', post('id'))->get();
        if (!$genre->count()) {
            return [];
        }
        $toggle = fn($array, $value) => $array->intersect($value)->count() ? $array->diff($value) : $array->merge($value);

        $this->loved_genres = $toggle($this->loved_genres, $genre);
        $this->unloved_genres = $toggle($this->unloved_genres, $genre);
        $this->setCookie();

        return $this->render();
    }

    public function render()
    {
        return [
            '#index-widgets' => $this->renderPartial('@default', $this->vals())
        ];
    }

    public function setCookie(): void
    {
        $this->setLovedCookie();
        $this->setUnLovedCookie();
    }

    public function setLovedCookie(): void
    {
        if (!$this->loved_genres) {
            return;
        }
        Cookie::queue(Cookie::forever(CookieEnum::LOVED_GENRES->value, json_encode($this->loved_genres->pluck('id')->toArray())));
    }

    public function setUnLovedCookie(): void
    {
        if (!$this->unloved_genres) {
            return;
        }
        Cookie::queue(Cookie::forever(CookieEnum::UNLOVED_GENRES->value, json_encode($this->unloved_genres->pluck('id')->toArray())));
    }

}
