/*! For license information please see echo.min.js.LICENSE.txt */
(()=>{var t={672:t=>{var e;window,e=function(){return function(t){var e={};function n(r){if(e[r])return e[r].exports;var i=e[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}return n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)n.d(r,i,function(e){return t[e]}.bind(null,i));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=2)}([function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},r(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var o=256,s=function(){function t(t){void 0===t&&(t="="),this._paddingCharacter=t}return t.prototype.encodedLength=function(t){return this._paddingCharacter?(t+2)/3*4|0:(8*t+5)/6|0},t.prototype.encode=function(t){for(var e="",n=0;n<t.length-2;n+=3){var r=t[n]<<16|t[n+1]<<8|t[n+2];e+=this._encodeByte(r>>>18&63),e+=this._encodeByte(r>>>12&63),e+=this._encodeByte(r>>>6&63),e+=this._encodeByte(r>>>0&63)}var i=t.length-n;return i>0&&(r=t[n]<<16|(2===i?t[n+1]<<8:0),e+=this._encodeByte(r>>>18&63),e+=this._encodeByte(r>>>12&63),e+=2===i?this._encodeByte(r>>>6&63):this._paddingCharacter||"",e+=this._paddingCharacter||""),e},t.prototype.maxDecodedLength=function(t){return this._paddingCharacter?t/4*3|0:(6*t+7)/8|0},t.prototype.decodedLength=function(t){return this.maxDecodedLength(t.length-this._getPaddingLength(t))},t.prototype.decode=function(t){if(0===t.length)return new Uint8Array(0);for(var e=this._getPaddingLength(t),n=t.length-e,r=new Uint8Array(this.maxDecodedLength(n)),i=0,s=0,c=0,a=0,u=0,h=0,l=0;s<n-4;s+=4)a=this._decodeChar(t.charCodeAt(s+0)),u=this._decodeChar(t.charCodeAt(s+1)),h=this._decodeChar(t.charCodeAt(s+2)),l=this._decodeChar(t.charCodeAt(s+3)),r[i++]=a<<2|u>>>4,r[i++]=u<<4|h>>>2,r[i++]=h<<6|l,c|=a&o,c|=u&o,c|=h&o,c|=l&o;if(s<n-1&&(a=this._decodeChar(t.charCodeAt(s)),u=this._decodeChar(t.charCodeAt(s+1)),r[i++]=a<<2|u>>>4,c|=a&o,c|=u&o),s<n-2&&(h=this._decodeChar(t.charCodeAt(s+2)),r[i++]=u<<4|h>>>2,c|=h&o),s<n-3&&(l=this._decodeChar(t.charCodeAt(s+3)),r[i++]=h<<6|l,c|=l&o),0!==c)throw new Error("Base64Coder: incorrect characters for decoding");return r},t.prototype._encodeByte=function(t){var e=t;return e+=65,e+=25-t>>>8&6,e+=51-t>>>8&-75,e+=61-t>>>8&-15,e+=62-t>>>8&3,String.fromCharCode(e)},t.prototype._decodeChar=function(t){var e=o;return e+=(42-t&t-44)>>>8&-256+t-43+62,e+=(46-t&t-48)>>>8&-256+t-47+63,e+=(47-t&t-58)>>>8&-256+t-48+52,e+=(64-t&t-91)>>>8&-256+t-65+0,e+=(96-t&t-123)>>>8&-256+t-97+26},t.prototype._getPaddingLength=function(t){var e=0;if(this._paddingCharacter){for(var n=t.length-1;n>=0&&t[n]===this._paddingCharacter;n--)e++;if(t.length<4||e>2)throw new Error("Base64Coder: incorrect padding")}return e},t}();e.Coder=s;var c=new s;e.encode=function(t){return c.encode(t)},e.decode=function(t){return c.decode(t)};var a=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.prototype._encodeByte=function(t){var e=t;return e+=65,e+=25-t>>>8&6,e+=51-t>>>8&-75,e+=61-t>>>8&-13,e+=62-t>>>8&49,String.fromCharCode(e)},e.prototype._decodeChar=function(t){var e=o;return e+=(44-t&t-46)>>>8&-256+t-45+62,e+=(94-t&t-96)>>>8&-256+t-95+63,e+=(47-t&t-58)>>>8&-256+t-48+52,e+=(64-t&t-91)>>>8&-256+t-65+0,e+=(96-t&t-123)>>>8&-256+t-97+26},e}(s);e.URLSafeCoder=a;var u=new a;e.encodeURLSafe=function(t){return u.encode(t)},e.decodeURLSafe=function(t){return u.decode(t)},e.encodedLength=function(t){return c.encodedLength(t)},e.maxDecodedLength=function(t){return c.maxDecodedLength(t)},e.decodedLength=function(t){return c.decodedLength(t)}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r="utf8: invalid string",i="utf8: invalid source encoding";function o(t){for(var e=0,n=0;n<t.length;n++){var i=t.charCodeAt(n);if(i<128)e+=1;else if(i<2048)e+=2;else if(i<55296)e+=3;else{if(!(i<=57343))throw new Error(r);if(n>=t.length-1)throw new Error(r);n++,e+=4}}return e}e.encode=function(t){for(var e=new Uint8Array(o(t)),n=0,r=0;r<t.length;r++){var i=t.charCodeAt(r);i<128?e[n++]=i:i<2048?(e[n++]=192|i>>6,e[n++]=128|63&i):i<55296?(e[n++]=224|i>>12,e[n++]=128|i>>6&63,e[n++]=128|63&i):(r++,i=(1023&i)<<10,i|=1023&t.charCodeAt(r),i+=65536,e[n++]=240|i>>18,e[n++]=128|i>>12&63,e[n++]=128|i>>6&63,e[n++]=128|63&i)}return e},e.encodedLength=o,e.decode=function(t){for(var e=[],n=0;n<t.length;n++){var r=t[n];if(128&r){var o=void 0;if(r<224){if(n>=t.length)throw new Error(i);if(128!=(192&(s=t[++n])))throw new Error(i);r=(31&r)<<6|63&s,o=128}else if(r<240){if(n>=t.length-1)throw new Error(i);var s=t[++n],c=t[++n];if(128!=(192&s)||128!=(192&c))throw new Error(i);r=(15&r)<<12|(63&s)<<6|63&c,o=2048}else{if(!(r<248))throw new Error(i);if(n>=t.length-2)throw new Error(i);s=t[++n],c=t[++n];var a=t[++n];if(128!=(192&s)||128!=(192&c)||128!=(192&a))throw new Error(i);r=(15&r)<<18|(63&s)<<12|(63&c)<<6|63&a,o=65536}if(r<o||r>=55296&&r<=57343)throw new Error(i);if(r>=65536){if(r>1114111)throw new Error(i);r-=65536,e.push(String.fromCharCode(55296|r>>10)),r=56320|1023&r}}e.push(String.fromCharCode(r))}return e.join("")}},function(t,e,n){t.exports=n(3).default},function(t,e,n){"use strict";n.r(e);var r,i=function(){function t(t,e){this.lastId=0,this.prefix=t,this.name=e}return t.prototype.create=function(t){this.lastId++;var e=this.lastId,n=this.prefix+e,r=this.name+"["+e+"]",i=!1,o=function(){i||(t.apply(null,arguments),i=!0)};return this[e]=o,{number:e,id:n,name:r,callback:o}},t.prototype.remove=function(t){delete this[t.number]},t}(),o=new i("_pusher_script_","Pusher.ScriptReceivers"),s={VERSION:"7.6.0",PROTOCOL:7,wsPort:80,wssPort:443,wsPath:"",httpHost:"sockjs.pusher.com",httpPort:80,httpsPort:443,httpPath:"/pusher",stats_host:"stats.pusher.com",authEndpoint:"/pusher/auth",authTransport:"ajax",activityTimeout:12e4,pongTimeout:3e4,unavailableTimeout:1e4,cluster:"mt1",userAuthentication:{endpoint:"/pusher/user-auth",transport:"ajax"},channelAuthorization:{endpoint:"/pusher/auth",transport:"ajax"},cdn_http:"http://js.pusher.com",cdn_https:"https://js.pusher.com",dependency_suffix:""},c=function(){function t(t){this.options=t,this.receivers=t.receivers||o,this.loading={}}return t.prototype.load=function(t,e,n){var r=this;if(r.loading[t]&&r.loading[t].length>0)r.loading[t].push(n);else{r.loading[t]=[n];var i=Ae.createScriptRequest(r.getPath(t,e)),o=r.receivers.create((function(e){if(r.receivers.remove(o),r.loading[t]){var n=r.loading[t];delete r.loading[t];for(var s=function(t){t||i.cleanup()},c=0;c<n.length;c++)n[c](e,s)}}));i.send(o)}},t.prototype.getRoot=function(t){var e=Ae.getDocument().location.protocol;return(t&&t.useTLS||"https:"===e?this.options.cdn_https:this.options.cdn_http).replace(/\/*$/,"")+"/"+this.options.version},t.prototype.getPath=function(t,e){return this.getRoot(e)+"/"+t+this.options.suffix+".js"},t}(),a=new i("_pusher_dependencies","Pusher.DependenciesReceivers"),u=new c({cdn_http:s.cdn_http,cdn_https:s.cdn_https,version:s.VERSION,suffix:s.dependency_suffix,receivers:a}),h={baseUrl:"https://pusher.com",urls:{authenticationEndpoint:{path:"/docs/channels/server_api/authenticating_users"},authorizationEndpoint:{path:"/docs/channels/server_api/authorizing-users/"},javascriptQuickStart:{path:"/docs/javascript_quick_start"},triggeringClientEvents:{path:"/docs/client_api_guide/client_events#trigger-events"},encryptedChannelSupport:{fullUrl:"https://github.com/pusher/pusher-js/tree/cc491015371a4bde5743d1c87a0fbac0feb53195#encrypted-channel-support"}}},l=function(t){var e,n=h.urls[t];return n?(n.fullUrl?e=n.fullUrl:n.path&&(e=h.baseUrl+n.path),e?"See: "+e:""):""};!function(t){t.UserAuthentication="user-authentication",t.ChannelAuthorization="channel-authorization"}(r||(r={}));for(var p,f=(p=function(t,e){return p=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},p(t,e)},function(t,e){function n(){this.constructor=t}p(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),d=function(t){function e(e){var n=this.constructor,r=t.call(this,e)||this;return Object.setPrototypeOf(r,n.prototype),r}return f(e,t),e}(Error),y=function(t){function e(e){var n=this.constructor,r=t.call(this,e)||this;return Object.setPrototypeOf(r,n.prototype),r}return f(e,t),e}(Error),v=function(t){function e(e){var n=this.constructor,r=t.call(this,e)||this;return Object.setPrototypeOf(r,n.prototype),r}return f(e,t),e}(Error),b=function(t){function e(e){var n=this.constructor,r=t.call(this,e)||this;return Object.setPrototypeOf(r,n.prototype),r}return f(e,t),e}(Error),g=function(t){function e(e){var n=this.constructor,r=t.call(this,e)||this;return Object.setPrototypeOf(r,n.prototype),r}return f(e,t),e}(Error),m=function(t){function e(e){var n=this.constructor,r=t.call(this,e)||this;return Object.setPrototypeOf(r,n.prototype),r}return f(e,t),e}(Error),w=function(t){function e(e){var n=this.constructor,r=t.call(this,e)||this;return Object.setPrototypeOf(r,n.prototype),r}return f(e,t),e}(Error),k=function(t){function e(e){var n=this.constructor,r=t.call(this,e)||this;return Object.setPrototypeOf(r,n.prototype),r}return f(e,t),e}(Error),_=function(t){function e(e,n){var r=this.constructor,i=t.call(this,n)||this;return i.status=e,Object.setPrototypeOf(i,r.prototype),i}return f(e,t),e}(Error),S=function(t,e,n,i,o){var s=Ae.createXHR();for(var c in s.open("POST",n.endpoint,!0),s.setRequestHeader("Content-Type","application/x-www-form-urlencoded"),n.headers)s.setRequestHeader(c,n.headers[c]);if(null!=n.headersProvider){var a=n.headersProvider();for(var c in a)s.setRequestHeader(c,a[c])}return s.onreadystatechange=function(){if(4===s.readyState)if(200===s.status){var t=void 0,e=!1;try{t=JSON.parse(s.responseText),e=!0}catch(t){o(new _(200,"JSON returned from "+i.toString()+" endpoint was invalid, yet status code was 200. Data was: "+s.responseText),null)}e&&o(null,t)}else{var c="";switch(i){case r.UserAuthentication:c=l("authenticationEndpoint");break;case r.ChannelAuthorization:c="Clients must be authorized to join private or presence channels. "+l("authorizationEndpoint")}o(new _(s.status,"Unable to retrieve auth string from "+i.toString()+" endpoint - received status: "+s.status+" from "+n.endpoint+". "+c),null)}},s.send(e),s},C=String.fromCharCode,T="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",P={},O=0;O<64;O++)P[T.charAt(O)]=O;var E=function(t){var e=t.charCodeAt(0);return e<128?t:e<2048?C(192|e>>>6)+C(128|63&e):C(224|e>>>12&15)+C(128|e>>>6&63)+C(128|63&e)},A=function(t){return t.replace(/[^\x00-\x7F]/g,E)},L=function(t){var e=[0,2,1][t.length%3],n=t.charCodeAt(0)<<16|(t.length>1?t.charCodeAt(1):0)<<8|(t.length>2?t.charCodeAt(2):0);return[T.charAt(n>>>18),T.charAt(n>>>12&63),e>=2?"=":T.charAt(n>>>6&63),e>=1?"=":T.charAt(63&n)].join("")},x=window.btoa||function(t){return t.replace(/[\s\S]{1,3}/g,L)},j=function(){function t(t,e,n,r){var i=this;this.clear=e,this.timer=t((function(){i.timer&&(i.timer=r(i.timer))}),n)}return t.prototype.isRunning=function(){return null!==this.timer},t.prototype.ensureAborted=function(){this.timer&&(this.clear(this.timer),this.timer=null)},t}(),R=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},t(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();function I(t){window.clearTimeout(t)}function D(t){window.clearInterval(t)}var N=function(t){function e(e,n){return t.call(this,setTimeout,I,e,(function(t){return n(),null}))||this}return R(e,t),e}(j),H=function(t){function e(e,n){return t.call(this,setInterval,D,e,(function(t){return n(),t}))||this}return R(e,t),e}(j),U={now:function(){return Date.now?Date.now():(new Date).valueOf()},defer:function(t){return new N(0,t)},method:function(t){for(var e=[],n=1;n<arguments.length;n++)e[n-1]=arguments[n];var r=Array.prototype.slice.call(arguments,1);return function(e){return e[t].apply(e,r.concat(arguments))}}},M=U;function q(t){for(var e=[],n=1;n<arguments.length;n++)e[n-1]=arguments[n];for(var r=0;r<e.length;r++){var i=e[r];for(var o in i)i[o]&&i[o].constructor&&i[o].constructor===Object?t[o]=q(t[o]||{},i[o]):t[o]=i[o]}return t}function z(){for(var t=["Pusher"],e=0;e<arguments.length;e++)"string"==typeof arguments[e]?t.push(arguments[e]):t.push($(arguments[e]));return t.join(" : ")}function B(t,e){var n=Array.prototype.indexOf;if(null===t)return-1;if(n&&t.indexOf===n)return t.indexOf(e);for(var r=0,i=t.length;r<i;r++)if(t[r]===e)return r;return-1}function F(t,e){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&e(t[n],n,t)}function X(t){var e=[];return F(t,(function(t,n){e.push(n)})),e}function J(t,e,n){for(var r=0;r<t.length;r++)e.call(n||window,t[r],r,t)}function W(t,e){for(var n=[],r=0;r<t.length;r++)n.push(e(t[r],r,t,n));return n}function V(t,e){e=e||function(t){return!!t};for(var n=[],r=0;r<t.length;r++)e(t[r],r,t,n)&&n.push(t[r]);return n}function G(t,e){var n={};return F(t,(function(r,i){(e&&e(r,i,t,n)||Boolean(r))&&(n[i]=r)})),n}function Q(t,e){for(var n=0;n<t.length;n++)if(e(t[n],n,t))return!0;return!1}function K(t){return e=function(t){return"object"==typeof t&&(t=$(t)),encodeURIComponent((e=t.toString(),x(A(e))));var e},n={},F(t,(function(t,r){n[r]=e(t)})),n;var e,n}function Y(t){var e,n,r=G(t,(function(t){return void 0!==t}));return W((e=K(r),n=[],F(e,(function(t,e){n.push([e,t])})),n),M.method("join","=")).join("&")}function $(t){try{return JSON.stringify(t)}catch(r){return JSON.stringify((e=[],n=[],function t(r,i){var o,s,c;switch(typeof r){case"object":if(!r)return null;for(o=0;o<e.length;o+=1)if(e[o]===r)return{$ref:n[o]};if(e.push(r),n.push(i),"[object Array]"===Object.prototype.toString.apply(r))for(c=[],o=0;o<r.length;o+=1)c[o]=t(r[o],i+"["+o+"]");else for(s in c={},r)Object.prototype.hasOwnProperty.call(r,s)&&(c[s]=t(r[s],i+"["+JSON.stringify(s)+"]"));return c;case"number":case"string":case"boolean":return r}}(t,"$")))}var e,n}var Z=function(){function t(){this.globalLog=function(t){window.console&&window.console.log&&window.console.log(t)}}return t.prototype.debug=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];this.log(this.globalLog,t)},t.prototype.warn=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];this.log(this.globalLogWarn,t)},t.prototype.error=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];this.log(this.globalLogError,t)},t.prototype.globalLogWarn=function(t){window.console&&window.console.warn?window.console.warn(t):this.globalLog(t)},t.prototype.globalLogError=function(t){window.console&&window.console.error?window.console.error(t):this.globalLogWarn(t)},t.prototype.log=function(t){for(var e=[],n=1;n<arguments.length;n++)e[n-1]=arguments[n];var r=z.apply(this,arguments);tn.log?tn.log(r):tn.logToConsole&&t.bind(this)(r)},t}(),tt=new Z,et=function(t,e,n,r,i){void 0===n.headers&&null==n.headersProvider||tt.warn("To send headers with the "+r.toString()+" request, you must use AJAX, rather than JSONP.");var o=t.nextAuthCallbackID.toString();t.nextAuthCallbackID++;var s=t.getDocument(),c=s.createElement("script");t.auth_callbacks[o]=function(t){i(null,t)};var a="Pusher.auth_callbacks['"+o+"']";c.src=n.endpoint+"?callback="+encodeURIComponent(a)+"&"+e;var u=s.getElementsByTagName("head")[0]||s.documentElement;u.insertBefore(c,u.firstChild)},nt=function(){function t(t){this.src=t}return t.prototype.send=function(t){var e=this,n="Error loading "+e.src;e.script=document.createElement("script"),e.script.id=t.id,e.script.src=e.src,e.script.type="text/javascript",e.script.charset="UTF-8",e.script.addEventListener?(e.script.onerror=function(){t.callback(n)},e.script.onload=function(){t.callback(null)}):e.script.onreadystatechange=function(){"loaded"!==e.script.readyState&&"complete"!==e.script.readyState||t.callback(null)},void 0===e.script.async&&document.attachEvent&&/opera/i.test(navigator.userAgent)?(e.errorScript=document.createElement("script"),e.errorScript.id=t.id+"_error",e.errorScript.text=t.name+"('"+n+"');",e.script.async=e.errorScript.async=!1):e.script.async=!0;var r=document.getElementsByTagName("head")[0];r.insertBefore(e.script,r.firstChild),e.errorScript&&r.insertBefore(e.errorScript,e.script.nextSibling)},t.prototype.cleanup=function(){this.script&&(this.script.onload=this.script.onerror=null,this.script.onreadystatechange=null),this.script&&this.script.parentNode&&this.script.parentNode.removeChild(this.script),this.errorScript&&this.errorScript.parentNode&&this.errorScript.parentNode.removeChild(this.errorScript),this.script=null,this.errorScript=null},t}(),rt=function(){function t(t,e){this.url=t,this.data=e}return t.prototype.send=function(t){if(!this.request){var e=Y(this.data),n=this.url+"/"+t.number+"?"+e;this.request=Ae.createScriptRequest(n),this.request.send(t)}},t.prototype.cleanup=function(){this.request&&this.request.cleanup()},t}(),it={name:"jsonp",getAgent:function(t,e){return function(n,r){var i="http"+(e?"s":"")+"://"+(t.host||t.options.host)+t.options.path,s=Ae.createJSONPRequest(i,n),c=Ae.ScriptReceivers.create((function(e,n){o.remove(c),s.cleanup(),n&&n.host&&(t.host=n.host),r&&r(e,n)}));s.send(c)}}};function ot(t,e,n){return t+(e.useTLS?"s":"")+"://"+(e.useTLS?e.hostTLS:e.hostNonTLS)+n}function st(t,e){return"/app/"+t+"?protocol="+s.PROTOCOL+"&client=js&version="+s.VERSION+(e?"&"+e:"")}var ct={getInitial:function(t,e){return ot("ws",e,(e.httpPath||"")+st(t,"flash=false"))}},at={getInitial:function(t,e){return ot("http",e,(e.httpPath||"/pusher")+st(t))}},ut={getInitial:function(t,e){return ot("http",e,e.httpPath||"/pusher")},getPath:function(t,e){return st(t)}},ht=function(){function t(){this._callbacks={}}return t.prototype.get=function(t){return this._callbacks[lt(t)]},t.prototype.add=function(t,e,n){var r=lt(t);this._callbacks[r]=this._callbacks[r]||[],this._callbacks[r].push({fn:e,context:n})},t.prototype.remove=function(t,e,n){if(t||e||n){var r=t?[lt(t)]:X(this._callbacks);e||n?this.removeCallback(r,e,n):this.removeAllCallbacks(r)}else this._callbacks={}},t.prototype.removeCallback=function(t,e,n){J(t,(function(t){this._callbacks[t]=V(this._callbacks[t]||[],(function(t){return e&&e!==t.fn||n&&n!==t.context})),0===this._callbacks[t].length&&delete this._callbacks[t]}),this)},t.prototype.removeAllCallbacks=function(t){J(t,(function(t){delete this._callbacks[t]}),this)},t}();function lt(t){return"_"+t}var pt=function(){function t(t){this.callbacks=new ht,this.global_callbacks=[],this.failThrough=t}return t.prototype.bind=function(t,e,n){return this.callbacks.add(t,e,n),this},t.prototype.bind_global=function(t){return this.global_callbacks.push(t),this},t.prototype.unbind=function(t,e,n){return this.callbacks.remove(t,e,n),this},t.prototype.unbind_global=function(t){return t?(this.global_callbacks=V(this.global_callbacks||[],(function(e){return e!==t})),this):(this.global_callbacks=[],this)},t.prototype.unbind_all=function(){return this.unbind(),this.unbind_global(),this},t.prototype.emit=function(t,e,n){for(var r=0;r<this.global_callbacks.length;r++)this.global_callbacks[r](t,e);var i=this.callbacks.get(t),o=[];if(n?o.push(e,n):e&&o.push(e),i&&i.length>0)for(r=0;r<i.length;r++)i[r].fn.apply(i[r].context||window,o);else this.failThrough&&this.failThrough(t,e);return this},t}(),ft=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},t(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),dt=function(t){function e(e,n,r,i,o){var s=t.call(this)||this;return s.initialize=Ae.transportConnectionInitializer,s.hooks=e,s.name=n,s.priority=r,s.key=i,s.options=o,s.state="new",s.timeline=o.timeline,s.activityTimeout=o.activityTimeout,s.id=s.timeline.generateUniqueID(),s}return ft(e,t),e.prototype.handlesActivityChecks=function(){return Boolean(this.hooks.handlesActivityChecks)},e.prototype.supportsPing=function(){return Boolean(this.hooks.supportsPing)},e.prototype.connect=function(){var t=this;if(this.socket||"initialized"!==this.state)return!1;var e=this.hooks.urls.getInitial(this.key,this.options);try{this.socket=this.hooks.getSocket(e,this.options)}catch(e){return M.defer((function(){t.onError(e),t.changeState("closed")})),!1}return this.bindListeners(),tt.debug("Connecting",{transport:this.name,url:e}),this.changeState("connecting"),!0},e.prototype.close=function(){return!!this.socket&&(this.socket.close(),!0)},e.prototype.send=function(t){var e=this;return"open"===this.state&&(M.defer((function(){e.socket&&e.socket.send(t)})),!0)},e.prototype.ping=function(){"open"===this.state&&this.supportsPing()&&this.socket.ping()},e.prototype.onOpen=function(){this.hooks.beforeOpen&&this.hooks.beforeOpen(this.socket,this.hooks.urls.getPath(this.key,this.options)),this.changeState("open"),this.socket.onopen=void 0},e.prototype.onError=function(t){this.emit("error",{type:"WebSocketError",error:t}),this.timeline.error(this.buildTimelineMessage({error:t.toString()}))},e.prototype.onClose=function(t){t?this.changeState("closed",{code:t.code,reason:t.reason,wasClean:t.wasClean}):this.changeState("closed"),this.unbindListeners(),this.socket=void 0},e.prototype.onMessage=function(t){this.emit("message",t)},e.prototype.onActivity=function(){this.emit("activity")},e.prototype.bindListeners=function(){var t=this;this.socket.onopen=function(){t.onOpen()},this.socket.onerror=function(e){t.onError(e)},this.socket.onclose=function(e){t.onClose(e)},this.socket.onmessage=function(e){t.onMessage(e)},this.supportsPing()&&(this.socket.onactivity=function(){t.onActivity()})},e.prototype.unbindListeners=function(){this.socket&&(this.socket.onopen=void 0,this.socket.onerror=void 0,this.socket.onclose=void 0,this.socket.onmessage=void 0,this.supportsPing()&&(this.socket.onactivity=void 0))},e.prototype.changeState=function(t,e){this.state=t,this.timeline.info(this.buildTimelineMessage({state:t,params:e})),this.emit(t,e)},e.prototype.buildTimelineMessage=function(t){return q({cid:this.id},t)},e}(pt),yt=dt,vt=function(){function t(t){this.hooks=t}return t.prototype.isSupported=function(t){return this.hooks.isSupported(t)},t.prototype.createConnection=function(t,e,n,r){return new yt(this.hooks,t,e,n,r)},t}(),bt=new vt({urls:ct,handlesActivityChecks:!1,supportsPing:!1,isInitialized:function(){return Boolean(Ae.getWebSocketAPI())},isSupported:function(){return Boolean(Ae.getWebSocketAPI())},getSocket:function(t){return Ae.createWebSocket(t)}}),gt={urls:at,handlesActivityChecks:!1,supportsPing:!0,isInitialized:function(){return!0}},mt=q({getSocket:function(t){return Ae.HTTPFactory.createStreamingSocket(t)}},gt),wt=q({getSocket:function(t){return Ae.HTTPFactory.createPollingSocket(t)}},gt),kt={isSupported:function(){return Ae.isXHRSupported()}},_t={ws:bt,xhr_streaming:new vt(q({},mt,kt)),xhr_polling:new vt(q({},wt,kt))},St=new vt({file:"sockjs",urls:ut,handlesActivityChecks:!0,supportsPing:!1,isSupported:function(){return!0},isInitialized:function(){return void 0!==window.SockJS},getSocket:function(t,e){return new window.SockJS(t,null,{js_path:u.getPath("sockjs",{useTLS:e.useTLS}),ignore_null_origin:e.ignoreNullOrigin})},beforeOpen:function(t,e){t.send(JSON.stringify({path:e}))}}),Ct={isSupported:function(t){return Ae.isXDRSupported(t.useTLS)}},Tt=new vt(q({},mt,Ct)),Pt=new vt(q({},wt,Ct));_t.xdr_streaming=Tt,_t.xdr_polling=Pt,_t.sockjs=St;var Ot=_t,Et=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},t(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),At=new(function(t){function e(){var e=t.call(this)||this,n=e;return void 0!==window.addEventListener&&(window.addEventListener("online",(function(){n.emit("online")}),!1),window.addEventListener("offline",(function(){n.emit("offline")}),!1)),e}return Et(e,t),e.prototype.isOnline=function(){return void 0===window.navigator.onLine||window.navigator.onLine},e}(pt)),Lt=function(){function t(t,e,n){this.manager=t,this.transport=e,this.minPingDelay=n.minPingDelay,this.maxPingDelay=n.maxPingDelay,this.pingDelay=void 0}return t.prototype.createConnection=function(t,e,n,r){var i=this;r=q({},r,{activityTimeout:this.pingDelay});var o=this.transport.createConnection(t,e,n,r),s=null,c=function(){o.unbind("open",c),o.bind("closed",a),s=M.now()},a=function(t){if(o.unbind("closed",a),1002===t.code||1003===t.code)i.manager.reportDeath();else if(!t.wasClean&&s){var e=M.now()-s;e<2*i.maxPingDelay&&(i.manager.reportDeath(),i.pingDelay=Math.max(e/2,i.minPingDelay))}};return o.bind("open",c),o},t.prototype.isSupported=function(t){return this.manager.isAlive()&&this.transport.isSupported(t)},t}(),xt={decodeMessage:function(t){try{var e=JSON.parse(t.data),n=e.data;if("string"==typeof n)try{n=JSON.parse(e.data)}catch(t){}var r={event:e.event,channel:e.channel,data:n};return e.user_id&&(r.user_id=e.user_id),r}catch(e){throw{type:"MessageParseError",error:e,data:t.data}}},encodeMessage:function(t){return JSON.stringify(t)},processHandshake:function(t){var e=xt.decodeMessage(t);if("pusher:connection_established"===e.event){if(!e.data.activity_timeout)throw"No activity timeout specified in handshake";return{action:"connected",id:e.data.socket_id,activityTimeout:1e3*e.data.activity_timeout}}if("pusher:error"===e.event)return{action:this.getCloseAction(e.data),error:this.getCloseError(e.data)};throw"Invalid handshake"},getCloseAction:function(t){return t.code<4e3?t.code>=1002&&t.code<=1004?"backoff":null:4e3===t.code?"tls_only":t.code<4100?"refused":t.code<4200?"backoff":t.code<4300?"retry":"refused"},getCloseError:function(t){return 1e3!==t.code&&1001!==t.code?{type:"PusherError",data:{code:t.code,message:t.reason||t.message}}:null}},jt=xt,Rt=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},t(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),It=function(t){function e(e,n){var r=t.call(this)||this;return r.id=e,r.transport=n,r.activityTimeout=n.activityTimeout,r.bindListeners(),r}return Rt(e,t),e.prototype.handlesActivityChecks=function(){return this.transport.handlesActivityChecks()},e.prototype.send=function(t){return this.transport.send(t)},e.prototype.send_event=function(t,e,n){var r={event:t,data:e};return n&&(r.channel=n),tt.debug("Event sent",r),this.send(jt.encodeMessage(r))},e.prototype.ping=function(){this.transport.supportsPing()?this.transport.ping():this.send_event("pusher:ping",{})},e.prototype.close=function(){this.transport.close()},e.prototype.bindListeners=function(){var t=this,e={message:function(e){var n;try{n=jt.decodeMessage(e)}catch(n){t.emit("error",{type:"MessageParseError",error:n,data:e.data})}if(void 0!==n){switch(tt.debug("Event recd",n),n.event){case"pusher:error":t.emit("error",{type:"PusherError",data:n.data});break;case"pusher:ping":t.emit("ping");break;case"pusher:pong":t.emit("pong")}t.emit("message",n)}},activity:function(){t.emit("activity")},error:function(e){t.emit("error",e)},closed:function(e){n(),e&&e.code&&t.handleCloseEvent(e),t.transport=null,t.emit("closed")}},n=function(){F(e,(function(e,n){t.transport.unbind(n,e)}))};F(e,(function(e,n){t.transport.bind(n,e)}))},e.prototype.handleCloseEvent=function(t){var e=jt.getCloseAction(t),n=jt.getCloseError(t);n&&this.emit("error",n),e&&this.emit(e,{action:e,error:n})},e}(pt),Dt=function(){function t(t,e){this.transport=t,this.callback=e,this.bindListeners()}return t.prototype.close=function(){this.unbindListeners(),this.transport.close()},t.prototype.bindListeners=function(){var t=this;this.onMessage=function(e){var n;t.unbindListeners();try{n=jt.processHandshake(e)}catch(e){return t.finish("error",{error:e}),void t.transport.close()}"connected"===n.action?t.finish("connected",{connection:new It(n.id,t.transport),activityTimeout:n.activityTimeout}):(t.finish(n.action,{error:n.error}),t.transport.close())},this.onClosed=function(e){t.unbindListeners();var n=jt.getCloseAction(e)||"backoff",r=jt.getCloseError(e);t.finish(n,{error:r})},this.transport.bind("message",this.onMessage),this.transport.bind("closed",this.onClosed)},t.prototype.unbindListeners=function(){this.transport.unbind("message",this.onMessage),this.transport.unbind("closed",this.onClosed)},t.prototype.finish=function(t,e){this.callback(q({transport:this.transport,action:t},e))},t}(),Nt=function(){function t(t,e){this.timeline=t,this.options=e||{}}return t.prototype.send=function(t,e){this.timeline.isEmpty()||this.timeline.send(Ae.TimelineTransport.getAgent(this,t),e)},t}(),Ht=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},t(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),Ut=function(t){function e(e,n){var r=t.call(this,(function(t,n){tt.debug("No callbacks on "+e+" for "+t)}))||this;return r.name=e,r.pusher=n,r.subscribed=!1,r.subscriptionPending=!1,r.subscriptionCancelled=!1,r}return Ht(e,t),e.prototype.authorize=function(t,e){return e(null,{auth:""})},e.prototype.trigger=function(t,e){if(0!==t.indexOf("client-"))throw new d("Event '"+t+"' does not start with 'client-'");if(!this.subscribed){var n=l("triggeringClientEvents");tt.warn("Client event triggered before channel 'subscription_succeeded' event . "+n)}return this.pusher.send_event(t,e,this.name)},e.prototype.disconnect=function(){this.subscribed=!1,this.subscriptionPending=!1},e.prototype.handleEvent=function(t){var e=t.event,n=t.data;"pusher_internal:subscription_succeeded"===e?this.handleSubscriptionSucceededEvent(t):"pusher_internal:subscription_count"===e?this.handleSubscriptionCountEvent(t):0!==e.indexOf("pusher_internal:")&&this.emit(e,n,{})},e.prototype.handleSubscriptionSucceededEvent=function(t){this.subscriptionPending=!1,this.subscribed=!0,this.subscriptionCancelled?this.pusher.unsubscribe(this.name):this.emit("pusher:subscription_succeeded",t.data)},e.prototype.handleSubscriptionCountEvent=function(t){t.data.subscription_count&&(this.subscriptionCount=t.data.subscription_count),this.emit("pusher:subscription_count",t.data)},e.prototype.subscribe=function(){var t=this;this.subscribed||(this.subscriptionPending=!0,this.subscriptionCancelled=!1,this.authorize(this.pusher.connection.socket_id,(function(e,n){e?(t.subscriptionPending=!1,tt.error(e.toString()),t.emit("pusher:subscription_error",Object.assign({},{type:"AuthError",error:e.message},e instanceof _?{status:e.status}:{}))):t.pusher.send_event("pusher:subscribe",{auth:n.auth,channel_data:n.channel_data,channel:t.name})})))},e.prototype.unsubscribe=function(){this.subscribed=!1,this.pusher.send_event("pusher:unsubscribe",{channel:this.name})},e.prototype.cancelSubscription=function(){this.subscriptionCancelled=!0},e.prototype.reinstateSubscription=function(){this.subscriptionCancelled=!1},e}(pt),Mt=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},t(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),qt=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return Mt(e,t),e.prototype.authorize=function(t,e){return this.pusher.config.channelAuthorizer({channelName:this.name,socketId:t},e)},e}(Ut),zt=qt,Bt=function(){function t(){this.reset()}return t.prototype.get=function(t){return Object.prototype.hasOwnProperty.call(this.members,t)?{id:t,info:this.members[t]}:null},t.prototype.each=function(t){var e=this;F(this.members,(function(n,r){t(e.get(r))}))},t.prototype.setMyID=function(t){this.myID=t},t.prototype.onSubscription=function(t){this.members=t.presence.hash,this.count=t.presence.count,this.me=this.get(this.myID)},t.prototype.addMember=function(t){return null===this.get(t.user_id)&&this.count++,this.members[t.user_id]=t.user_info,this.get(t.user_id)},t.prototype.removeMember=function(t){var e=this.get(t.user_id);return e&&(delete this.members[t.user_id],this.count--),e},t.prototype.reset=function(){this.members={},this.count=0,this.myID=null,this.me=null},t}(),Ft=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},t(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),Xt=function(t,e,n,r){return new(n||(n=Promise))((function(i,o){function s(t){try{a(r.next(t))}catch(t){o(t)}}function c(t){try{a(r.throw(t))}catch(t){o(t)}}function a(t){var e;t.done?i(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(s,c)}a((r=r.apply(t,e||[])).next())}))},Jt=function(t,e){var n,r,i,o,s={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function c(o){return function(c){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return s.label++,{value:o[1],done:!1};case 5:s.label++,r=o[1],o=[0];continue;case 7:o=s.ops.pop(),s.trys.pop();continue;default:if(!((i=(i=s.trys).length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){s=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){s.label=o[1];break}if(6===o[0]&&s.label<i[1]){s.label=i[1],i=o;break}if(i&&s.label<i[2]){s.label=i[2],s.ops.push(o);break}i[2]&&s.ops.pop(),s.trys.pop();continue}o=e.call(t,s)}catch(t){o=[6,t],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,c])}}},Wt=function(t){function e(e,n){var r=t.call(this,e,n)||this;return r.members=new Bt,r}return Ft(e,t),e.prototype.authorize=function(e,n){var r=this;t.prototype.authorize.call(this,e,(function(t,e){return Xt(r,void 0,void 0,(function(){var r,i;return Jt(this,(function(o){switch(o.label){case 0:return t?[3,3]:null==e.channel_data?[3,1]:(r=JSON.parse(e.channel_data),this.members.setMyID(r.user_id),[3,3]);case 1:return[4,this.pusher.user.signinDonePromise];case 2:if(o.sent(),null==this.pusher.user.user_data)return i=l("authorizationEndpoint"),tt.error("Invalid auth response for channel '"+this.name+"', expected 'channel_data' field. "+i+", or the user should be signed in."),n("Invalid auth response"),[2];this.members.setMyID(this.pusher.user.user_data.id),o.label=3;case 3:return n(t,e),[2]}}))}))}))},e.prototype.handleEvent=function(t){var e=t.event;if(0===e.indexOf("pusher_internal:"))this.handleInternalEvent(t);else{var n=t.data,r={};t.user_id&&(r.user_id=t.user_id),this.emit(e,n,r)}},e.prototype.handleInternalEvent=function(t){var e=t.event,n=t.data;switch(e){case"pusher_internal:subscription_succeeded":this.handleSubscriptionSucceededEvent(t);break;case"pusher_internal:subscription_count":this.handleSubscriptionCountEvent(t);break;case"pusher_internal:member_added":var r=this.members.addMember(n);this.emit("pusher:member_added",r);break;case"pusher_internal:member_removed":var i=this.members.removeMember(n);i&&this.emit("pusher:member_removed",i)}},e.prototype.handleSubscriptionSucceededEvent=function(t){this.subscriptionPending=!1,this.subscribed=!0,this.subscriptionCancelled?this.pusher.unsubscribe(this.name):(this.members.onSubscription(t.data),this.emit("pusher:subscription_succeeded",this.members))},e.prototype.disconnect=function(){this.members.reset(),t.prototype.disconnect.call(this)},e}(zt),Vt=n(1),Gt=n(0),Qt=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},t(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),Kt=function(t){function e(e,n,r){var i=t.call(this,e,n)||this;return i.key=null,i.nacl=r,i}return Qt(e,t),e.prototype.authorize=function(e,n){var r=this;t.prototype.authorize.call(this,e,(function(t,e){if(t)n(t,e);else{var i=e.shared_secret;i?(r.key=Object(Gt.decode)(i),delete e.shared_secret,n(null,e)):n(new Error("No shared_secret key in auth payload for encrypted channel: "+r.name),null)}}))},e.prototype.trigger=function(t,e){throw new m("Client events are not currently supported for encrypted channels")},e.prototype.handleEvent=function(e){var n=e.event,r=e.data;0!==n.indexOf("pusher_internal:")&&0!==n.indexOf("pusher:")?this.handleEncryptedEvent(n,r):t.prototype.handleEvent.call(this,e)},e.prototype.handleEncryptedEvent=function(t,e){var n=this;if(this.key)if(e.ciphertext&&e.nonce){var r=Object(Gt.decode)(e.ciphertext);if(r.length<this.nacl.secretbox.overheadLength)tt.error("Expected encrypted event ciphertext length to be "+this.nacl.secretbox.overheadLength+", got: "+r.length);else{var i=Object(Gt.decode)(e.nonce);if(i.length<this.nacl.secretbox.nonceLength)tt.error("Expected encrypted event nonce length to be "+this.nacl.secretbox.nonceLength+", got: "+i.length);else{var o=this.nacl.secretbox.open(r,i,this.key);if(null===o)return tt.debug("Failed to decrypt an event, probably because it was encrypted with a different key. Fetching a new key from the authEndpoint..."),void this.authorize(this.pusher.connection.socket_id,(function(e,s){e?tt.error("Failed to make a request to the authEndpoint: "+s+". Unable to fetch new key, so dropping encrypted event"):null!==(o=n.nacl.secretbox.open(r,i,n.key))?n.emit(t,n.getDataToEmit(o)):tt.error("Failed to decrypt event with new key. Dropping encrypted event")}));this.emit(t,this.getDataToEmit(o))}}}else tt.error("Unexpected format for encrypted event, expected object with `ciphertext` and `nonce` fields, got: "+e);else tt.debug("Received encrypted event before key has been retrieved from the authEndpoint")},e.prototype.getDataToEmit=function(t){var e=Object(Vt.decode)(t);try{return JSON.parse(e)}catch(t){return e}},e}(zt),Yt=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},t(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),$t=function(t){function e(e,n){var r=t.call(this)||this;r.state="initialized",r.connection=null,r.key=e,r.options=n,r.timeline=r.options.timeline,r.usingTLS=r.options.useTLS,r.errorCallbacks=r.buildErrorCallbacks(),r.connectionCallbacks=r.buildConnectionCallbacks(r.errorCallbacks),r.handshakeCallbacks=r.buildHandshakeCallbacks(r.errorCallbacks);var i=Ae.getNetwork();return i.bind("online",(function(){r.timeline.info({netinfo:"online"}),"connecting"!==r.state&&"unavailable"!==r.state||r.retryIn(0)})),i.bind("offline",(function(){r.timeline.info({netinfo:"offline"}),r.connection&&r.sendActivityCheck()})),r.updateStrategy(),r}return Yt(e,t),e.prototype.connect=function(){this.connection||this.runner||(this.strategy.isSupported()?(this.updateState("connecting"),this.startConnecting(),this.setUnavailableTimer()):this.updateState("failed"))},e.prototype.send=function(t){return!!this.connection&&this.connection.send(t)},e.prototype.send_event=function(t,e,n){return!!this.connection&&this.connection.send_event(t,e,n)},e.prototype.disconnect=function(){this.disconnectInternally(),this.updateState("disconnected")},e.prototype.isUsingTLS=function(){return this.usingTLS},e.prototype.startConnecting=function(){var t=this,e=function(n,r){n?t.runner=t.strategy.connect(0,e):"error"===r.action?(t.emit("error",{type:"HandshakeError",error:r.error}),t.timeline.error({handshakeError:r.error})):(t.abortConnecting(),t.handshakeCallbacks[r.action](r))};this.runner=this.strategy.connect(0,e)},e.prototype.abortConnecting=function(){this.runner&&(this.runner.abort(),this.runner=null)},e.prototype.disconnectInternally=function(){this.abortConnecting(),this.clearRetryTimer(),this.clearUnavailableTimer(),this.connection&&this.abandonConnection().close()},e.prototype.updateStrategy=function(){this.strategy=this.options.getStrategy({key:this.key,timeline:this.timeline,useTLS:this.usingTLS})},e.prototype.retryIn=function(t){var e=this;this.timeline.info({action:"retry",delay:t}),t>0&&this.emit("connecting_in",Math.round(t/1e3)),this.retryTimer=new N(t||0,(function(){e.disconnectInternally(),e.connect()}))},e.prototype.clearRetryTimer=function(){this.retryTimer&&(this.retryTimer.ensureAborted(),this.retryTimer=null)},e.prototype.setUnavailableTimer=function(){var t=this;this.unavailableTimer=new N(this.options.unavailableTimeout,(function(){t.updateState("unavailable")}))},e.prototype.clearUnavailableTimer=function(){this.unavailableTimer&&this.unavailableTimer.ensureAborted()},e.prototype.sendActivityCheck=function(){var t=this;this.stopActivityCheck(),this.connection.ping(),this.activityTimer=new N(this.options.pongTimeout,(function(){t.timeline.error({pong_timed_out:t.options.pongTimeout}),t.retryIn(0)}))},e.prototype.resetActivityCheck=function(){var t=this;this.stopActivityCheck(),this.connection&&!this.connection.handlesActivityChecks()&&(this.activityTimer=new N(this.activityTimeout,(function(){t.sendActivityCheck()})))},e.prototype.stopActivityCheck=function(){this.activityTimer&&this.activityTimer.ensureAborted()},e.prototype.buildConnectionCallbacks=function(t){var e=this;return q({},t,{message:function(t){e.resetActivityCheck(),e.emit("message",t)},ping:function(){e.send_event("pusher:pong",{})},activity:function(){e.resetActivityCheck()},error:function(t){e.emit("error",t)},closed:function(){e.abandonConnection(),e.shouldRetry()&&e.retryIn(1e3)}})},e.prototype.buildHandshakeCallbacks=function(t){var e=this;return q({},t,{connected:function(t){e.activityTimeout=Math.min(e.options.activityTimeout,t.activityTimeout,t.connection.activityTimeout||1/0),e.clearUnavailableTimer(),e.setConnection(t.connection),e.socket_id=e.connection.id,e.updateState("connected",{socket_id:e.socket_id})}})},e.prototype.buildErrorCallbacks=function(){var t=this,e=function(e){return function(n){n.error&&t.emit("error",{type:"WebSocketError",error:n.error}),e(n)}};return{tls_only:e((function(){t.usingTLS=!0,t.updateStrategy(),t.retryIn(0)})),refused:e((function(){t.disconnect()})),backoff:e((function(){t.retryIn(1e3)})),retry:e((function(){t.retryIn(0)}))}},e.prototype.setConnection=function(t){for(var e in this.connection=t,this.connectionCallbacks)this.connection.bind(e,this.connectionCallbacks[e]);this.resetActivityCheck()},e.prototype.abandonConnection=function(){if(this.connection){for(var t in this.stopActivityCheck(),this.connectionCallbacks)this.connection.unbind(t,this.connectionCallbacks[t]);var e=this.connection;return this.connection=null,e}},e.prototype.updateState=function(t,e){var n=this.state;if(this.state=t,n!==t){var r=t;"connected"===r&&(r+=" with new socket ID "+e.socket_id),tt.debug("State changed",n+" -> "+r),this.timeline.info({state:t,params:e}),this.emit("state_change",{previous:n,current:t}),this.emit(t,e)}},e.prototype.shouldRetry=function(){return"connecting"===this.state||"connected"===this.state},e}(pt),Zt=function(){function t(){this.channels={}}return t.prototype.add=function(t,e){return this.channels[t]||(this.channels[t]=function(t,e){if(0===t.indexOf("private-encrypted-")){if(e.config.nacl)return ee.createEncryptedChannel(t,e,e.config.nacl);var n="Tried to subscribe to a private-encrypted- channel but no nacl implementation available",r=l("encryptedChannelSupport");throw new m(n+". "+r)}if(0===t.indexOf("private-"))return ee.createPrivateChannel(t,e);if(0===t.indexOf("presence-"))return ee.createPresenceChannel(t,e);if(0===t.indexOf("#"))throw new y('Cannot create a channel with name "'+t+'".');return ee.createChannel(t,e)}(t,e)),this.channels[t]},t.prototype.all=function(){return function(t){var e=[];return F(t,(function(t){e.push(t)})),e}(this.channels)},t.prototype.find=function(t){return this.channels[t]},t.prototype.remove=function(t){var e=this.channels[t];return delete this.channels[t],e},t.prototype.disconnect=function(){F(this.channels,(function(t){t.disconnect()}))},t}(),te=Zt,ee={createChannels:function(){return new te},createConnectionManager:function(t,e){return new $t(t,e)},createChannel:function(t,e){return new Ut(t,e)},createPrivateChannel:function(t,e){return new zt(t,e)},createPresenceChannel:function(t,e){return new Wt(t,e)},createEncryptedChannel:function(t,e,n){return new Kt(t,e,n)},createTimelineSender:function(t,e){return new Nt(t,e)},createHandshake:function(t,e){return new Dt(t,e)},createAssistantToTheTransportManager:function(t,e,n){return new Lt(t,e,n)}},ne=function(){function t(t){this.options=t||{},this.livesLeft=this.options.lives||1/0}return t.prototype.getAssistant=function(t){return ee.createAssistantToTheTransportManager(this,t,{minPingDelay:this.options.minPingDelay,maxPingDelay:this.options.maxPingDelay})},t.prototype.isAlive=function(){return this.livesLeft>0},t.prototype.reportDeath=function(){this.livesLeft-=1},t}(),re=function(){function t(t,e){this.strategies=t,this.loop=Boolean(e.loop),this.failFast=Boolean(e.failFast),this.timeout=e.timeout,this.timeoutLimit=e.timeoutLimit}return t.prototype.isSupported=function(){return Q(this.strategies,M.method("isSupported"))},t.prototype.connect=function(t,e){var n=this,r=this.strategies,i=0,o=this.timeout,s=null,c=function(a,u){u?e(null,u):(i+=1,n.loop&&(i%=r.length),i<r.length?(o&&(o*=2,n.timeoutLimit&&(o=Math.min(o,n.timeoutLimit))),s=n.tryStrategy(r[i],t,{timeout:o,failFast:n.failFast},c)):e(!0))};return s=this.tryStrategy(r[i],t,{timeout:o,failFast:this.failFast},c),{abort:function(){s.abort()},forceMinPriority:function(e){t=e,s&&s.forceMinPriority(e)}}},t.prototype.tryStrategy=function(t,e,n,r){var i=null,o=null;return n.timeout>0&&(i=new N(n.timeout,(function(){o.abort(),r(!0)}))),o=t.connect(e,(function(t,e){t&&i&&i.isRunning()&&!n.failFast||(i&&i.ensureAborted(),r(t,e))})),{abort:function(){i&&i.ensureAborted(),o.abort()},forceMinPriority:function(t){o.forceMinPriority(t)}}},t}(),ie=function(){function t(t){this.strategies=t}return t.prototype.isSupported=function(){return Q(this.strategies,M.method("isSupported"))},t.prototype.connect=function(t,e){return function(t,e,n){var r=W(t,(function(t,r,i,o){return t.connect(e,n(r,o))}));return{abort:function(){J(r,oe)},forceMinPriority:function(t){J(r,(function(e){e.forceMinPriority(t)}))}}}(this.strategies,t,(function(t,n){return function(r,i){n[t].error=r,r?function(t){return function(t,e){for(var n=0;n<t.length;n++)if(!e(t[n],n,t))return!1;return!0}(t,(function(t){return Boolean(t.error)}))}(n)&&e(!0):(J(n,(function(t){t.forceMinPriority(i.transport.priority)})),e(null,i))}}))},t}();function oe(t){t.error||t.aborted||(t.abort(),t.aborted=!0)}var se=function(){function t(t,e,n){this.strategy=t,this.transports=e,this.ttl=n.ttl||18e5,this.usingTLS=n.useTLS,this.timeline=n.timeline}return t.prototype.isSupported=function(){return this.strategy.isSupported()},t.prototype.connect=function(t,e){var n=this.usingTLS,r=function(t){var e=Ae.getLocalStorage();if(e)try{var n=e[ae(t)];if(n)return JSON.parse(n)}catch(e){ue(t)}return null}(n),i=[this.strategy];if(r&&r.timestamp+this.ttl>=M.now()){var o=this.transports[r.transport];o&&(this.timeline.info({cached:!0,transport:r.transport,latency:r.latency}),i.push(new re([o],{timeout:2*r.latency+1e3,failFast:!0})))}var s=M.now(),c=i.pop().connect(t,(function r(o,a){o?(ue(n),i.length>0?(s=M.now(),c=i.pop().connect(t,r)):e(o)):(function(t,e,n){var r=Ae.getLocalStorage();if(r)try{r[ae(t)]=$({timestamp:M.now(),transport:e,latency:n})}catch(t){}}(n,a.transport.name,M.now()-s),e(null,a))}));return{abort:function(){c.abort()},forceMinPriority:function(e){t=e,c&&c.forceMinPriority(e)}}},t}(),ce=se;function ae(t){return"pusherTransport"+(t?"TLS":"NonTLS")}function ue(t){var e=Ae.getLocalStorage();if(e)try{delete e[ae(t)]}catch(t){}}var he=function(){function t(t,e){var n=e.delay;this.strategy=t,this.options={delay:n}}return t.prototype.isSupported=function(){return this.strategy.isSupported()},t.prototype.connect=function(t,e){var n,r=this.strategy,i=new N(this.options.delay,(function(){n=r.connect(t,e)}));return{abort:function(){i.ensureAborted(),n&&n.abort()},forceMinPriority:function(e){t=e,n&&n.forceMinPriority(e)}}},t}(),le=function(){function t(t,e,n){this.test=t,this.trueBranch=e,this.falseBranch=n}return t.prototype.isSupported=function(){return(this.test()?this.trueBranch:this.falseBranch).isSupported()},t.prototype.connect=function(t,e){return(this.test()?this.trueBranch:this.falseBranch).connect(t,e)},t}(),pe=function(){function t(t){this.strategy=t}return t.prototype.isSupported=function(){return this.strategy.isSupported()},t.prototype.connect=function(t,e){var n=this.strategy.connect(t,(function(t,r){r&&n.abort(),e(t,r)}));return n},t}();function fe(t){return function(){return t.isSupported()}}var de,ye=function(t,e,n){var r={};function i(e,i,o,s,c){var a=n(t,e,i,o,s,c);return r[e]=a,a}var o,s=Object.assign({},e,{hostNonTLS:t.wsHost+":"+t.wsPort,hostTLS:t.wsHost+":"+t.wssPort,httpPath:t.wsPath}),c=Object.assign({},s,{useTLS:!0}),a=Object.assign({},e,{hostNonTLS:t.httpHost+":"+t.httpPort,hostTLS:t.httpHost+":"+t.httpsPort,httpPath:t.httpPath}),u={loop:!0,timeout:15e3,timeoutLimit:6e4},h=new ne({lives:2,minPingDelay:1e4,maxPingDelay:t.activityTimeout}),l=new ne({lives:2,minPingDelay:1e4,maxPingDelay:t.activityTimeout}),p=i("ws","ws",3,s,h),f=i("wss","ws",3,c,h),d=i("sockjs","sockjs",1,a),y=i("xhr_streaming","xhr_streaming",1,a,l),v=i("xdr_streaming","xdr_streaming",1,a,l),b=i("xhr_polling","xhr_polling",1,a),g=i("xdr_polling","xdr_polling",1,a),m=new re([p],u),w=new re([f],u),k=new re([d],u),_=new re([new le(fe(y),y,v)],u),S=new re([new le(fe(b),b,g)],u),C=new re([new le(fe(_),new ie([_,new he(S,{delay:4e3})]),S)],u),T=new le(fe(C),C,k);return o=e.useTLS?new ie([m,new he(T,{delay:2e3})]):new ie([m,new he(w,{delay:2e3}),new he(T,{delay:5e3})]),new ce(new pe(new le(fe(p),o,T)),r,{ttl:18e5,timeline:e.timeline,useTLS:e.useTLS})},ve={getRequest:function(t){var e=new window.XDomainRequest;return e.ontimeout=function(){t.emit("error",new v),t.close()},e.onerror=function(e){t.emit("error",e),t.close()},e.onprogress=function(){e.responseText&&e.responseText.length>0&&t.onChunk(200,e.responseText)},e.onload=function(){e.responseText&&e.responseText.length>0&&t.onChunk(200,e.responseText),t.emit("finished",200),t.close()},e},abortRequest:function(t){t.ontimeout=t.onerror=t.onprogress=t.onload=null,t.abort()}},be=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},t(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),ge=function(t){function e(e,n,r){var i=t.call(this)||this;return i.hooks=e,i.method=n,i.url=r,i}return be(e,t),e.prototype.start=function(t){var e=this;this.position=0,this.xhr=this.hooks.getRequest(this),this.unloader=function(){e.close()},Ae.addUnloadListener(this.unloader),this.xhr.open(this.method,this.url,!0),this.xhr.setRequestHeader&&this.xhr.setRequestHeader("Content-Type","application/json"),this.xhr.send(t)},e.prototype.close=function(){this.unloader&&(Ae.removeUnloadListener(this.unloader),this.unloader=null),this.xhr&&(this.hooks.abortRequest(this.xhr),this.xhr=null)},e.prototype.onChunk=function(t,e){for(;;){var n=this.advanceBuffer(e);if(!n)break;this.emit("chunk",{status:t,data:n})}this.isBufferTooLong(e)&&this.emit("buffer_too_long")},e.prototype.advanceBuffer=function(t){var e=t.slice(this.position),n=e.indexOf("\n");return-1!==n?(this.position+=n+1,e.slice(0,n)):null},e.prototype.isBufferTooLong=function(t){return this.position===t.length&&t.length>262144},e}(pt);!function(t){t[t.CONNECTING=0]="CONNECTING",t[t.OPEN=1]="OPEN",t[t.CLOSED=3]="CLOSED"}(de||(de={}));var me=de,we=1;function ke(t){var e=-1===t.indexOf("?")?"?":"&";return t+e+"t="+ +new Date+"&n="+we++}function _e(t){return Ae.randomInt(t)}var Se,Ce=function(){function t(t,e){this.hooks=t,this.session=_e(1e3)+"/"+function(t){for(var e=[],n=0;n<t;n++)e.push(_e(32).toString(32));return e.join("")}(8),this.location=function(t){var e=/([^\?]*)\/*(\??.*)/.exec(t);return{base:e[1],queryString:e[2]}}(e),this.readyState=me.CONNECTING,this.openStream()}return t.prototype.send=function(t){return this.sendRaw(JSON.stringify([t]))},t.prototype.ping=function(){this.hooks.sendHeartbeat(this)},t.prototype.close=function(t,e){this.onClose(t,e,!0)},t.prototype.sendRaw=function(t){if(this.readyState!==me.OPEN)return!1;try{return Ae.createSocketRequest("POST",ke((e=this.location,n=this.session,e.base+"/"+n+"/xhr_send"))).start(t),!0}catch(t){return!1}var e,n},t.prototype.reconnect=function(){this.closeStream(),this.openStream()},t.prototype.onClose=function(t,e,n){this.closeStream(),this.readyState=me.CLOSED,this.onclose&&this.onclose({code:t,reason:e,wasClean:n})},t.prototype.onChunk=function(t){var e;if(200===t.status)switch(this.readyState===me.OPEN&&this.onActivity(),t.data.slice(0,1)){case"o":e=JSON.parse(t.data.slice(1)||"{}"),this.onOpen(e);break;case"a":e=JSON.parse(t.data.slice(1)||"[]");for(var n=0;n<e.length;n++)this.onEvent(e[n]);break;case"m":e=JSON.parse(t.data.slice(1)||"null"),this.onEvent(e);break;case"h":this.hooks.onHeartbeat(this);break;case"c":e=JSON.parse(t.data.slice(1)||"[]"),this.onClose(e[0],e[1],!0)}},t.prototype.onOpen=function(t){var e,n,r;this.readyState===me.CONNECTING?(t&&t.hostname&&(this.location.base=(e=this.location.base,n=t.hostname,(r=/(https?:\/\/)([^\/:]+)((\/|:)?.*)/.exec(e))[1]+n+r[3])),this.readyState=me.OPEN,this.onopen&&this.onopen()):this.onClose(1006,"Server lost session",!0)},t.prototype.onEvent=function(t){this.readyState===me.OPEN&&this.onmessage&&this.onmessage({data:t})},t.prototype.onActivity=function(){this.onactivity&&this.onactivity()},t.prototype.onError=function(t){this.onerror&&this.onerror(t)},t.prototype.openStream=function(){var t=this;this.stream=Ae.createSocketRequest("POST",ke(this.hooks.getReceiveURL(this.location,this.session))),this.stream.bind("chunk",(function(e){t.onChunk(e)})),this.stream.bind("finished",(function(e){t.hooks.onFinished(t,e)})),this.stream.bind("buffer_too_long",(function(){t.reconnect()}));try{this.stream.start()}catch(e){M.defer((function(){t.onError(e),t.onClose(1006,"Could not start streaming",!1)}))}},t.prototype.closeStream=function(){this.stream&&(this.stream.unbind_all(),this.stream.close(),this.stream=null)},t}(),Te={getReceiveURL:function(t,e){return t.base+"/"+e+"/xhr_streaming"+t.queryString},onHeartbeat:function(t){t.sendRaw("[]")},sendHeartbeat:function(t){t.sendRaw("[]")},onFinished:function(t,e){t.onClose(1006,"Connection interrupted ("+e+")",!1)}},Pe={getReceiveURL:function(t,e){return t.base+"/"+e+"/xhr"+t.queryString},onHeartbeat:function(){},sendHeartbeat:function(t){t.sendRaw("[]")},onFinished:function(t,e){200===e?t.reconnect():t.onClose(1006,"Connection interrupted ("+e+")",!1)}},Oe={getRequest:function(t){var e=new(Ae.getXHRAPI());return e.onreadystatechange=e.onprogress=function(){switch(e.readyState){case 3:e.responseText&&e.responseText.length>0&&t.onChunk(e.status,e.responseText);break;case 4:e.responseText&&e.responseText.length>0&&t.onChunk(e.status,e.responseText),t.emit("finished",e.status),t.close()}},e},abortRequest:function(t){t.onreadystatechange=null,t.abort()}},Ee={createStreamingSocket:function(t){return this.createSocket(Te,t)},createPollingSocket:function(t){return this.createSocket(Pe,t)},createSocket:function(t,e){return new Ce(t,e)},createXHR:function(t,e){return this.createRequest(Oe,t,e)},createRequest:function(t,e,n){return new ge(t,e,n)},createXDR:function(t,e){return this.createRequest(ve,t,e)}},Ae={nextAuthCallbackID:1,auth_callbacks:{},ScriptReceivers:o,DependenciesReceivers:a,getDefaultStrategy:ye,Transports:Ot,transportConnectionInitializer:function(){var t=this;t.timeline.info(t.buildTimelineMessage({transport:t.name+(t.options.useTLS?"s":"")})),t.hooks.isInitialized()?t.changeState("initialized"):t.hooks.file?(t.changeState("initializing"),u.load(t.hooks.file,{useTLS:t.options.useTLS},(function(e,n){t.hooks.isInitialized()?(t.changeState("initialized"),n(!0)):(e&&t.onError(e),t.onClose(),n(!1))}))):t.onClose()},HTTPFactory:Ee,TimelineTransport:it,getXHRAPI:function(){return window.XMLHttpRequest},getWebSocketAPI:function(){return window.WebSocket||window.MozWebSocket},setup:function(t){var e=this;window.Pusher=t;var n=function(){e.onDocumentBody(t.ready)};window.JSON?n():u.load("json2",{},n)},getDocument:function(){return document},getProtocol:function(){return this.getDocument().location.protocol},getAuthorizers:function(){return{ajax:S,jsonp:et}},onDocumentBody:function(t){var e=this;document.body?t():setTimeout((function(){e.onDocumentBody(t)}),0)},createJSONPRequest:function(t,e){return new rt(t,e)},createScriptRequest:function(t){return new nt(t)},getLocalStorage:function(){try{return window.localStorage}catch(t){return}},createXHR:function(){return this.getXHRAPI()?this.createXMLHttpRequest():this.createMicrosoftXHR()},createXMLHttpRequest:function(){return new(this.getXHRAPI())},createMicrosoftXHR:function(){return new ActiveXObject("Microsoft.XMLHTTP")},getNetwork:function(){return At},createWebSocket:function(t){return new(this.getWebSocketAPI())(t)},createSocketRequest:function(t,e){if(this.isXHRSupported())return this.HTTPFactory.createXHR(t,e);if(this.isXDRSupported(0===e.indexOf("https:")))return this.HTTPFactory.createXDR(t,e);throw"Cross-origin HTTP requests are not supported"},isXHRSupported:function(){var t=this.getXHRAPI();return Boolean(t)&&void 0!==(new t).withCredentials},isXDRSupported:function(t){var e=t?"https:":"http:",n=this.getProtocol();return Boolean(window.XDomainRequest)&&n===e},addUnloadListener:function(t){void 0!==window.addEventListener?window.addEventListener("unload",t,!1):void 0!==window.attachEvent&&window.attachEvent("onunload",t)},removeUnloadListener:function(t){void 0!==window.addEventListener?window.removeEventListener("unload",t,!1):void 0!==window.detachEvent&&window.detachEvent("onunload",t)},randomInt:function(t){return Math.floor((window.crypto||window.msCrypto).getRandomValues(new Uint32Array(1))[0]/Math.pow(2,32)*t)}};!function(t){t[t.ERROR=3]="ERROR",t[t.INFO=6]="INFO",t[t.DEBUG=7]="DEBUG"}(Se||(Se={}));var Le=Se,xe=function(){function t(t,e,n){this.key=t,this.session=e,this.events=[],this.options=n||{},this.sent=0,this.uniqueID=0}return t.prototype.log=function(t,e){t<=this.options.level&&(this.events.push(q({},e,{timestamp:M.now()})),this.options.limit&&this.events.length>this.options.limit&&this.events.shift())},t.prototype.error=function(t){this.log(Le.ERROR,t)},t.prototype.info=function(t){this.log(Le.INFO,t)},t.prototype.debug=function(t){this.log(Le.DEBUG,t)},t.prototype.isEmpty=function(){return 0===this.events.length},t.prototype.send=function(t,e){var n=this,r=q({session:this.session,bundle:this.sent+1,key:this.key,lib:"js",version:this.options.version,cluster:this.options.cluster,features:this.options.features,timeline:this.events},this.options.params);return this.events=[],t(r,(function(t,r){t||n.sent++,e&&e(t,r)})),!0},t.prototype.generateUniqueID=function(){return this.uniqueID++,this.uniqueID},t}(),je=function(){function t(t,e,n,r){this.name=t,this.priority=e,this.transport=n,this.options=r||{}}return t.prototype.isSupported=function(){return this.transport.isSupported({useTLS:this.options.useTLS})},t.prototype.connect=function(t,e){var n=this;if(!this.isSupported())return Re(new k,e);if(this.priority<t)return Re(new b,e);var r=!1,i=this.transport.createConnection(this.name,this.priority,this.options.key,this.options),o=null,s=function(){i.unbind("initialized",s),i.connect()},c=function(){o=ee.createHandshake(i,(function(t){r=!0,h(),e(null,t)}))},a=function(t){h(),e(t)},u=function(){var t;h(),t=$(i),e(new g(t))},h=function(){i.unbind("initialized",s),i.unbind("open",c),i.unbind("error",a),i.unbind("closed",u)};return i.bind("initialized",s),i.bind("open",c),i.bind("error",a),i.bind("closed",u),i.initialize(),{abort:function(){r||(h(),o?o.close():i.close())},forceMinPriority:function(t){r||n.priority<t&&(o?o.close():i.close())}}},t}();function Re(t,e){return M.defer((function(){e(t)})),{abort:function(){},forceMinPriority:function(){}}}var Ie=Ae.Transports,De=function(t,e,n,r,i,o){var s,c=Ie[n];if(!c)throw new w(n);return t.enabledTransports&&-1===B(t.enabledTransports,e)||t.disabledTransports&&-1!==B(t.disabledTransports,e)?s=Ne:(i=Object.assign({ignoreNullOrigin:t.ignoreNullOrigin},i),s=new je(e,r,o?o.getAssistant(c):c,i)),s},Ne={isSupported:function(){return!1},connect:function(t,e){var n=M.defer((function(){e(new k)}));return{abort:function(){n.ensureAborted()},forceMinPriority:function(){}}}},He=function(t){if(void 0===Ae.getAuthorizers()[t.transport])throw"'"+t.transport+"' is not a recognized auth transport";return function(e,n){var i=function(t,e){var n="socket_id="+encodeURIComponent(t.socketId);for(var r in e.params)n+="&"+encodeURIComponent(r)+"="+encodeURIComponent(e.params[r]);if(null!=e.paramsProvider){var i=e.paramsProvider();for(var r in i)n+="&"+encodeURIComponent(r)+"="+encodeURIComponent(i[r])}return n}(e,t);Ae.getAuthorizers()[t.transport](Ae,i,t,r.UserAuthentication,n)}},Ue=function(t){if(void 0===Ae.getAuthorizers()[t.transport])throw"'"+t.transport+"' is not a recognized auth transport";return function(e,n){var i=function(t,e){var n="socket_id="+encodeURIComponent(t.socketId);for(var r in n+="&channel_name="+encodeURIComponent(t.channelName),e.params)n+="&"+encodeURIComponent(r)+"="+encodeURIComponent(e.params[r]);if(null!=e.paramsProvider){var i=e.paramsProvider();for(var r in i)n+="&"+encodeURIComponent(r)+"="+encodeURIComponent(i[r])}return n}(e,t);Ae.getAuthorizers()[t.transport](Ae,i,t,r.ChannelAuthorization,n)}},Me=function(t,e,n){var r={authTransport:e.transport,authEndpoint:e.endpoint,auth:{params:e.params,headers:e.headers}};return function(e,i){var o=t.channel(e.channelName);n(o,r).authorize(e.socketId,i)}},qe=function(){return qe=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t},qe.apply(this,arguments)};function ze(t){return t.httpHost?t.httpHost:t.cluster?"sockjs-"+t.cluster+".pusher.com":s.httpHost}function Be(t){return t.wsHost?t.wsHost:t.cluster?Fe(t.cluster):Fe(s.cluster)}function Fe(t){return"ws-"+t+".pusher.com"}function Xe(t){return"https:"===Ae.getProtocol()||!1!==t.forceTLS}function Je(t){return"enableStats"in t?t.enableStats:"disableStats"in t&&!t.disableStats}function We(t){var e=qe(qe({},s.userAuthentication),t.userAuthentication);return"customHandler"in e&&null!=e.customHandler?e.customHandler:He(e)}function Ve(t,e){var n=function(t,e){var n;return"channelAuthorization"in t?n=qe(qe({},s.channelAuthorization),t.channelAuthorization):(n={transport:t.authTransport||s.authTransport,endpoint:t.authEndpoint||s.authEndpoint},"auth"in t&&("params"in t.auth&&(n.params=t.auth.params),"headers"in t.auth&&(n.headers=t.auth.headers)),"authorizer"in t&&(n.customHandler=Me(e,n,t.authorizer))),n}(t,e);return"customHandler"in n&&null!=n.customHandler?n.customHandler:Ue(n)}var Ge=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},t(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),Qe=function(t){function e(e){var n=t.call(this,(function(t,e){tt.debug("No callbacks on watchlist events for "+t)}))||this;return n.pusher=e,n.bindWatchlistInternalEvent(),n}return Ge(e,t),e.prototype.handleEvent=function(t){var e=this;t.data.events.forEach((function(t){e.emit(t.name,t)}))},e.prototype.bindWatchlistInternalEvent=function(){var t=this;this.pusher.connection.bind("message",(function(e){"pusher_internal:watchlist_events"===e.event&&t.handleEvent(e)}))},e}(pt),Ke=function(){var t,e;return{promise:new Promise((function(n,r){t=n,e=r})),resolve:t,reject:e}},Ye=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},t(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),$e=function(t){function e(e){var n=t.call(this,(function(t,e){tt.debug("No callbacks on user for "+t)}))||this;return n.signin_requested=!1,n.user_data=null,n.serverToUserChannel=null,n.signinDonePromise=null,n._signinDoneResolve=null,n._onAuthorize=function(t,e){if(t)return tt.warn("Error during signin: "+t),void n._cleanup();n.pusher.send_event("pusher:signin",{auth:e.auth,user_data:e.user_data})},n.pusher=e,n.pusher.connection.bind("state_change",(function(t){var e=t.previous,r=t.current;"connected"!==e&&"connected"===r&&n._signin(),"connected"===e&&"connected"!==r&&(n._cleanup(),n._newSigninPromiseIfNeeded())})),n.watchlist=new Qe(e),n.pusher.connection.bind("message",(function(t){"pusher:signin_success"===t.event&&n._onSigninSuccess(t.data),n.serverToUserChannel&&n.serverToUserChannel.name===t.channel&&n.serverToUserChannel.handleEvent(t)})),n}return Ye(e,t),e.prototype.signin=function(){this.signin_requested||(this.signin_requested=!0,this._signin())},e.prototype._signin=function(){this.signin_requested&&(this._newSigninPromiseIfNeeded(),"connected"===this.pusher.connection.state&&this.pusher.config.userAuthenticator({socketId:this.pusher.connection.socket_id},this._onAuthorize))},e.prototype._onSigninSuccess=function(t){try{this.user_data=JSON.parse(t.user_data)}catch(e){return tt.error("Failed parsing user data after signin: "+t.user_data),void this._cleanup()}if("string"!=typeof this.user_data.id||""===this.user_data.id)return tt.error("user_data doesn't contain an id. user_data: "+this.user_data),void this._cleanup();this._signinDoneResolve(),this._subscribeChannels()},e.prototype._subscribeChannels=function(){var t,e=this;this.serverToUserChannel=new Ut("#server-to-user-"+this.user_data.id,this.pusher),this.serverToUserChannel.bind_global((function(t,n){0!==t.indexOf("pusher_internal:")&&0!==t.indexOf("pusher:")&&e.emit(t,n)})),(t=this.serverToUserChannel).subscriptionPending&&t.subscriptionCancelled?t.reinstateSubscription():t.subscriptionPending||"connected"!==e.pusher.connection.state||t.subscribe()},e.prototype._cleanup=function(){this.user_data=null,this.serverToUserChannel&&(this.serverToUserChannel.unbind_all(),this.serverToUserChannel.disconnect(),this.serverToUserChannel=null),this.signin_requested&&this._signinDoneResolve()},e.prototype._newSigninPromiseIfNeeded=function(){if(this.signin_requested&&(!this.signinDonePromise||this.signinDonePromise.done)){var t=Ke(),e=t.promise,n=t.resolve;t.reject,e.done=!1;var r=function(){e.done=!0};e.then(r).catch(r),this.signinDonePromise=e,this._signinDoneResolve=n}},e}(pt),Ze=function(){function t(e,n){var r,i,o,c=this;if(function(t){if(null==t)throw"You must pass your app key when you instantiate Pusher."}(e),!(n=n||{}).cluster&&!n.wsHost&&!n.httpHost){var a=l("javascriptQuickStart");tt.warn("You should always specify a cluster when connecting. "+a)}"disableStats"in n&&tt.warn("The disableStats option is deprecated in favor of enableStats"),this.key=e,this.config=(i=this,o={activityTimeout:(r=n).activityTimeout||s.activityTimeout,cluster:r.cluster||s.cluster,httpPath:r.httpPath||s.httpPath,httpPort:r.httpPort||s.httpPort,httpsPort:r.httpsPort||s.httpsPort,pongTimeout:r.pongTimeout||s.pongTimeout,statsHost:r.statsHost||s.stats_host,unavailableTimeout:r.unavailableTimeout||s.unavailableTimeout,wsPath:r.wsPath||s.wsPath,wsPort:r.wsPort||s.wsPort,wssPort:r.wssPort||s.wssPort,enableStats:Je(r),httpHost:ze(r),useTLS:Xe(r),wsHost:Be(r),userAuthenticator:We(r),channelAuthorizer:Ve(r,i)},"disabledTransports"in r&&(o.disabledTransports=r.disabledTransports),"enabledTransports"in r&&(o.enabledTransports=r.enabledTransports),"ignoreNullOrigin"in r&&(o.ignoreNullOrigin=r.ignoreNullOrigin),"timelineParams"in r&&(o.timelineParams=r.timelineParams),"nacl"in r&&(o.nacl=r.nacl),o),this.channels=ee.createChannels(),this.global_emitter=new pt,this.sessionID=Ae.randomInt(1e9),this.timeline=new xe(this.key,this.sessionID,{cluster:this.config.cluster,features:t.getClientFeatures(),params:this.config.timelineParams||{},limit:50,level:Le.INFO,version:s.VERSION}),this.config.enableStats&&(this.timelineSender=ee.createTimelineSender(this.timeline,{host:this.config.statsHost,path:"/timeline/v2/"+Ae.TimelineTransport.name})),this.connection=ee.createConnectionManager(this.key,{getStrategy:function(t){return Ae.getDefaultStrategy(c.config,t,De)},timeline:this.timeline,activityTimeout:this.config.activityTimeout,pongTimeout:this.config.pongTimeout,unavailableTimeout:this.config.unavailableTimeout,useTLS:Boolean(this.config.useTLS)}),this.connection.bind("connected",(function(){c.subscribeAll(),c.timelineSender&&c.timelineSender.send(c.connection.isUsingTLS())})),this.connection.bind("message",(function(t){var e=0===t.event.indexOf("pusher_internal:");if(t.channel){var n=c.channel(t.channel);n&&n.handleEvent(t)}e||c.global_emitter.emit(t.event,t.data)})),this.connection.bind("connecting",(function(){c.channels.disconnect()})),this.connection.bind("disconnected",(function(){c.channels.disconnect()})),this.connection.bind("error",(function(t){tt.warn(t)})),t.instances.push(this),this.timeline.info({instances:t.instances.length}),this.user=new $e(this),t.isReady&&this.connect()}return t.ready=function(){t.isReady=!0;for(var e=0,n=t.instances.length;e<n;e++)t.instances[e].connect()},t.getClientFeatures=function(){return X(G({ws:Ae.Transports.ws},(function(t){return t.isSupported({})})))},t.prototype.channel=function(t){return this.channels.find(t)},t.prototype.allChannels=function(){return this.channels.all()},t.prototype.connect=function(){if(this.connection.connect(),this.timelineSender&&!this.timelineSenderTimer){var t=this.connection.isUsingTLS(),e=this.timelineSender;this.timelineSenderTimer=new H(6e4,(function(){e.send(t)}))}},t.prototype.disconnect=function(){this.connection.disconnect(),this.timelineSenderTimer&&(this.timelineSenderTimer.ensureAborted(),this.timelineSenderTimer=null)},t.prototype.bind=function(t,e,n){return this.global_emitter.bind(t,e,n),this},t.prototype.unbind=function(t,e,n){return this.global_emitter.unbind(t,e,n),this},t.prototype.bind_global=function(t){return this.global_emitter.bind_global(t),this},t.prototype.unbind_global=function(t){return this.global_emitter.unbind_global(t),this},t.prototype.unbind_all=function(t){return this.global_emitter.unbind_all(),this},t.prototype.subscribeAll=function(){var t;for(t in this.channels.channels)this.channels.channels.hasOwnProperty(t)&&this.subscribe(t)},t.prototype.subscribe=function(t){var e=this.channels.add(t,this);return e.subscriptionPending&&e.subscriptionCancelled?e.reinstateSubscription():e.subscriptionPending||"connected"!==this.connection.state||e.subscribe(),e},t.prototype.unsubscribe=function(t){var e=this.channels.find(t);e&&e.subscriptionPending?e.cancelSubscription():(e=this.channels.remove(t))&&e.subscribed&&e.unsubscribe()},t.prototype.send_event=function(t,e,n){return this.connection.send_event(t,e,n)},t.prototype.shouldUseTLS=function(){return this.config.useTLS},t.prototype.signin=function(){this.user.signin()},t.instances=[],t.isReady=!1,t.logToConsole=!1,t.Runtime=Ae,t.ScriptReceivers=Ae.ScriptReceivers,t.DependenciesReceivers=Ae.DependenciesReceivers,t.auth_callbacks=Ae.auth_callbacks,t}(),tn=e.default=Ze;Ae.setup(Ze)}])},t.exports=e()}},e={};function n(r){var i=e[r];if(void 0!==i)return i.exports;var o=e[r]={exports:{}};return t[r](o,o.exports,n),o.exports}(()=>{"use strict";function t(e){return t="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},t(e)}function e(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function r(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function i(t,e,n){return e&&r(t.prototype,e),n&&r(t,n),Object.defineProperty(t,"prototype",{writable:!1}),t}function o(){return o=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t},o.apply(this,arguments)}function s(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&a(t,e)}function c(t){return c=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},c(t)}function a(t,e){return a=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},a(t,e)}function u(t,e){if(e&&("object"==typeof e||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}function h(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,r=c(t);if(e){var i=c(this).constructor;n=Reflect.construct(r,arguments,i)}else n=r.apply(this,arguments);return u(this,n)}}var l=function(){function t(){e(this,t)}return i(t,[{key:"listenForWhisper",value:function(t,e){return this.listen(".client-"+t,e)}},{key:"notification",value:function(t){return this.listen(".Illuminate\\Notifications\\Events\\BroadcastNotificationCreated",t)}},{key:"stopListeningForWhisper",value:function(t,e){return this.stopListening(".client-"+t,e)}}]),t}(),p=function(){function t(n){e(this,t),this.namespace=n}return i(t,[{key:"format",value:function(t){return"."===t.charAt(0)||"\\"===t.charAt(0)?t.substr(1):(this.namespace&&(t=this.namespace+"."+t),t.replace(/\./g,"\\"))}},{key:"setNamespace",value:function(t){this.namespace=t}}]),t}(),f=function(t){s(r,t);var n=h(r);function r(t,i,o){var s;return e(this,r),(s=n.call(this)).name=i,s.pusher=t,s.options=o,s.eventFormatter=new p(s.options.namespace),s.subscribe(),s}return i(r,[{key:"subscribe",value:function(){this.subscription=this.pusher.subscribe(this.name)}},{key:"unsubscribe",value:function(){this.pusher.unsubscribe(this.name)}},{key:"listen",value:function(t,e){return this.on(this.eventFormatter.format(t),e),this}},{key:"listenToAll",value:function(t){var e=this;return this.subscription.bind_global((function(n,r){if(!n.startsWith("pusher:")){var i=e.options.namespace.replace(/\./g,"\\"),o=n.startsWith(i)?n.substring(i.length+1):"."+n;t(o,r)}})),this}},{key:"stopListening",value:function(t,e){return e?this.subscription.unbind(this.eventFormatter.format(t),e):this.subscription.unbind(this.eventFormatter.format(t)),this}},{key:"stopListeningToAll",value:function(t){return t?this.subscription.unbind_global(t):this.subscription.unbind_global(),this}},{key:"subscribed",value:function(t){return this.on("pusher:subscription_succeeded",(function(){t()})),this}},{key:"error",value:function(t){return this.on("pusher:subscription_error",(function(e){t(e)})),this}},{key:"on",value:function(t,e){return this.subscription.bind(t,e),this}}]),r}(l),d=function(t){s(r,t);var n=h(r);function r(){return e(this,r),n.apply(this,arguments)}return i(r,[{key:"whisper",value:function(t,e){return this.pusher.channels.channels[this.name].trigger("client-".concat(t),e),this}}]),r}(f),y=function(t){s(r,t);var n=h(r);function r(){return e(this,r),n.apply(this,arguments)}return i(r,[{key:"whisper",value:function(t,e){return this.pusher.channels.channels[this.name].trigger("client-".concat(t),e),this}}]),r}(f),v=function(t){s(r,t);var n=h(r);function r(){return e(this,r),n.apply(this,arguments)}return i(r,[{key:"here",value:function(t){return this.on("pusher:subscription_succeeded",(function(e){t(Object.keys(e.members).map((function(t){return e.members[t]})))})),this}},{key:"joining",value:function(t){return this.on("pusher:member_added",(function(e){t(e.info)})),this}},{key:"whisper",value:function(t,e){return this.pusher.channels.channels[this.name].trigger("client-".concat(t),e),this}},{key:"leaving",value:function(t){return this.on("pusher:member_removed",(function(e){t(e.info)})),this}}]),r}(f),b=function(t){s(r,t);var n=h(r);function r(t,i,o){var s;return e(this,r),(s=n.call(this)).events={},s.listeners={},s.name=i,s.socket=t,s.options=o,s.eventFormatter=new p(s.options.namespace),s.subscribe(),s}return i(r,[{key:"subscribe",value:function(){this.socket.emit("subscribe",{channel:this.name,auth:this.options.auth||{}})}},{key:"unsubscribe",value:function(){this.unbind(),this.socket.emit("unsubscribe",{channel:this.name,auth:this.options.auth||{}})}},{key:"listen",value:function(t,e){return this.on(this.eventFormatter.format(t),e),this}},{key:"stopListening",value:function(t,e){return this.unbindEvent(this.eventFormatter.format(t),e),this}},{key:"subscribed",value:function(t){return this.on("connect",(function(e){t(e)})),this}},{key:"error",value:function(t){return this}},{key:"on",value:function(t,e){var n=this;return this.listeners[t]=this.listeners[t]||[],this.events[t]||(this.events[t]=function(e,r){n.name===e&&n.listeners[t]&&n.listeners[t].forEach((function(t){return t(r)}))},this.socket.on(t,this.events[t])),this.listeners[t].push(e),this}},{key:"unbind",value:function(){var t=this;Object.keys(this.events).forEach((function(e){t.unbindEvent(e)}))}},{key:"unbindEvent",value:function(t,e){this.listeners[t]=this.listeners[t]||[],e&&(this.listeners[t]=this.listeners[t].filter((function(t){return t!==e}))),e&&0!==this.listeners[t].length||(this.events[t]&&(this.socket.removeListener(t,this.events[t]),delete this.events[t]),delete this.listeners[t])}}]),r}(l),g=function(t){s(r,t);var n=h(r);function r(){return e(this,r),n.apply(this,arguments)}return i(r,[{key:"whisper",value:function(t,e){return this.socket.emit("client event",{channel:this.name,event:"client-".concat(t),data:e}),this}}]),r}(b),m=function(t){s(r,t);var n=h(r);function r(){return e(this,r),n.apply(this,arguments)}return i(r,[{key:"here",value:function(t){return this.on("presence:subscribed",(function(e){t(e.map((function(t){return t.user_info})))})),this}},{key:"joining",value:function(t){return this.on("presence:joining",(function(e){return t(e.user_info)})),this}},{key:"whisper",value:function(t,e){return this.socket.emit("client event",{channel:this.name,event:"client-".concat(t),data:e}),this}},{key:"leaving",value:function(t){return this.on("presence:leaving",(function(e){return t(e.user_info)})),this}}]),r}(g),w=function(t){s(r,t);var n=h(r);function r(){return e(this,r),n.apply(this,arguments)}return i(r,[{key:"subscribe",value:function(){}},{key:"unsubscribe",value:function(){}},{key:"listen",value:function(t,e){return this}},{key:"listenToAll",value:function(t){return this}},{key:"stopListening",value:function(t,e){return this}},{key:"subscribed",value:function(t){return this}},{key:"error",value:function(t){return this}},{key:"on",value:function(t,e){return this}}]),r}(l),k=function(t){s(r,t);var n=h(r);function r(){return e(this,r),n.apply(this,arguments)}return i(r,[{key:"whisper",value:function(t,e){return this}}]),r}(w),_=function(t){s(r,t);var n=h(r);function r(){return e(this,r),n.apply(this,arguments)}return i(r,[{key:"here",value:function(t){return this}},{key:"joining",value:function(t){return this}},{key:"whisper",value:function(t,e){return this}},{key:"leaving",value:function(t){return this}}]),r}(w),S=function(){function t(n){e(this,t),this._defaultOptions={auth:{headers:{}},authEndpoint:"/broadcasting/auth",userAuthentication:{endpoint:"/broadcasting/user-auth",headers:{}},broadcaster:"pusher",csrfToken:null,bearerToken:null,host:null,key:null,namespace:"App.Events"},this.setOptions(n),this.connect()}return i(t,[{key:"setOptions",value:function(t){this.options=o(this._defaultOptions,t);var e=this.csrfToken();return e&&(this.options.auth.headers["X-CSRF-TOKEN"]=e,this.options.userAuthentication.headers["X-CSRF-TOKEN"]=e),(e=this.options.bearerToken)&&(this.options.auth.headers.Authorization="Bearer "+e,this.options.userAuthentication.headers.Authorization="Bearer "+e),t}},{key:"csrfToken",value:function(){var t;return"undefined"!=typeof window&&window.Laravel&&window.Laravel.csrfToken?window.Laravel.csrfToken:this.options.csrfToken?this.options.csrfToken:"undefined"!=typeof document&&"function"==typeof document.querySelector&&(t=document.querySelector('meta[name="csrf-token"]'))?t.getAttribute("content"):null}}]),t}(),C=function(t){s(r,t);var n=h(r);function r(){var t;return e(this,r),(t=n.apply(this,arguments)).channels={},t}return i(r,[{key:"connect",value:function(){void 0!==this.options.client?this.pusher=this.options.client:this.options.Pusher?this.pusher=new this.options.Pusher(this.options.key,this.options):this.pusher=new Pusher(this.options.key,this.options)}},{key:"signin",value:function(){this.pusher.signin()}},{key:"listen",value:function(t,e,n){return this.channel(t).listen(e,n)}},{key:"channel",value:function(t){return this.channels[t]||(this.channels[t]=new f(this.pusher,t,this.options)),this.channels[t]}},{key:"privateChannel",value:function(t){return this.channels["private-"+t]||(this.channels["private-"+t]=new d(this.pusher,"private-"+t,this.options)),this.channels["private-"+t]}},{key:"encryptedPrivateChannel",value:function(t){return this.channels["private-encrypted-"+t]||(this.channels["private-encrypted-"+t]=new y(this.pusher,"private-encrypted-"+t,this.options)),this.channels["private-encrypted-"+t]}},{key:"presenceChannel",value:function(t){return this.channels["presence-"+t]||(this.channels["presence-"+t]=new v(this.pusher,"presence-"+t,this.options)),this.channels["presence-"+t]}},{key:"leave",value:function(t){var e=this;[t,"private-"+t,"private-encrypted-"+t,"presence-"+t].forEach((function(t,n){e.leaveChannel(t)}))}},{key:"leaveChannel",value:function(t){this.channels[t]&&(this.channels[t].unsubscribe(),delete this.channels[t])}},{key:"socketId",value:function(){return this.pusher.connection.socket_id}},{key:"disconnect",value:function(){this.pusher.disconnect()}}]),r}(S),T=function(t){s(r,t);var n=h(r);function r(){var t;return e(this,r),(t=n.apply(this,arguments)).channels={},t}return i(r,[{key:"connect",value:function(){var t=this,e=this.getSocketIO();return this.socket=e(this.options.host,this.options),this.socket.on("reconnect",(function(){Object.values(t.channels).forEach((function(t){t.subscribe()}))})),this.socket}},{key:"getSocketIO",value:function(){if(void 0!==this.options.client)return this.options.client;if("undefined"!=typeof io)return io;throw new Error("Socket.io client not found. Should be globally available or passed via options.client")}},{key:"listen",value:function(t,e,n){return this.channel(t).listen(e,n)}},{key:"channel",value:function(t){return this.channels[t]||(this.channels[t]=new b(this.socket,t,this.options)),this.channels[t]}},{key:"privateChannel",value:function(t){return this.channels["private-"+t]||(this.channels["private-"+t]=new g(this.socket,"private-"+t,this.options)),this.channels["private-"+t]}},{key:"presenceChannel",value:function(t){return this.channels["presence-"+t]||(this.channels["presence-"+t]=new m(this.socket,"presence-"+t,this.options)),this.channels["presence-"+t]}},{key:"leave",value:function(t){var e=this;[t,"private-"+t,"presence-"+t].forEach((function(t){e.leaveChannel(t)}))}},{key:"leaveChannel",value:function(t){this.channels[t]&&(this.channels[t].unsubscribe(),delete this.channels[t])}},{key:"socketId",value:function(){return this.socket.id}},{key:"disconnect",value:function(){this.socket.disconnect()}}]),r}(S),P=function(t){s(r,t);var n=h(r);function r(){var t;return e(this,r),(t=n.apply(this,arguments)).channels={},t}return i(r,[{key:"connect",value:function(){}},{key:"listen",value:function(t,e,n){return new w}},{key:"channel",value:function(t){return new w}},{key:"privateChannel",value:function(t){return new k}},{key:"encryptedPrivateChannel",value:function(t){return new k}},{key:"presenceChannel",value:function(t){return new _}},{key:"leave",value:function(t){}},{key:"leaveChannel",value:function(t){}},{key:"socketId",value:function(){return"fake-socket-id"}},{key:"disconnect",value:function(){}}]),r}(S),O=function(){function n(t){e(this,n),this.options=t,this.connect(),this.options.withoutInterceptors||this.registerInterceptors()}return i(n,[{key:"channel",value:function(t){return this.connector.channel(t)}},{key:"connect",value:function(){"pusher"==this.options.broadcaster?this.connector=new C(this.options):"socket.io"==this.options.broadcaster?this.connector=new T(this.options):"null"==this.options.broadcaster?this.connector=new P(this.options):"function"==typeof this.options.broadcaster&&(this.connector=new this.options.broadcaster(this.options))}},{key:"disconnect",value:function(){this.connector.disconnect()}},{key:"join",value:function(t){return this.connector.presenceChannel(t)}},{key:"leave",value:function(t){this.connector.leave(t)}},{key:"leaveChannel",value:function(t){this.connector.leaveChannel(t)}},{key:"leaveAllChannels",value:function(){for(var t in this.connector.channels)this.leaveChannel(t)}},{key:"listen",value:function(t,e,n){return this.connector.listen(t,e,n)}},{key:"private",value:function(t){return this.connector.privateChannel(t)}},{key:"encryptedPrivate",value:function(t){return this.connector.encryptedPrivateChannel(t)}},{key:"socketId",value:function(){return this.connector.socketId()}},{key:"registerInterceptors",value:function(){"function"==typeof Vue&&Vue.http&&this.registerVueRequestInterceptor(),"function"==typeof axios&&this.registerAxiosRequestInterceptor(),"function"==typeof jQuery&&this.registerjQueryAjaxSetup(),"object"===("undefined"==typeof Turbo?"undefined":t(Turbo))&&this.registerTurboRequestInterceptor()}},{key:"registerVueRequestInterceptor",value:function(){var t=this;Vue.http.interceptors.push((function(e,n){t.socketId()&&e.headers.set("X-Socket-ID",t.socketId()),n()}))}},{key:"registerAxiosRequestInterceptor",value:function(){var t=this;axios.interceptors.request.use((function(e){return t.socketId()&&(e.headers["X-Socket-Id"]=t.socketId()),e}))}},{key:"registerjQueryAjaxSetup",value:function(){var t=this;void 0!==jQuery.ajax&&jQuery.ajaxPrefilter((function(e,n,r){t.socketId()&&r.setRequestHeader("X-Socket-Id",t.socketId())}))}},{key:"registerTurboRequestInterceptor",value:function(){var t=this;document.addEventListener("turbo:before-fetch-request",(function(e){e.detail.fetchOptions.headers["X-Socket-Id"]=t.socketId()}))}}]),n}();window.Pusher=n(672),window.Echo=new O({broadcaster:"pusher",logToConsole:!0,key:"8b22c3dea726794a362c",httpHost:window.location.hostname,httpsHost:window.location.hostname,wsHost:window.location.hostname,wssHost:window.location.hostname,encrypted:!0,wsPort:443,wssPort:443,forceTLS:!0,disableStats:!1,cluster:"eu",enabledTransports:["ws","wss"],authEndpoint:"api/broadcasting/auth",auth:{headers:{"x-app-id":"563049"}}}),addEventListener("page:loaded",(function(){try{if(window&&window.Pusher&&(window.Pusher.logToConsole=!0),window&&window.Echo&&!window.profileChannel){var t=JSON.parse(localStorage.getItem("user"));t&&t.profile&&(window.profileChannel=window.Echo.private("profile."+t.profile.id).listen(".notifications",(function(t){Object.keys(t).forEach((function(e){var n=document.getElementById(e);n&&(n.innerHTML=t[e])}))})))}}catch(t){console.error(t)}}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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ZXMvcHVzaGVyLWpzL2Rpc3Qvd2ViL3B1c2hlci5qcyIsIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4uLy4uL25vZGVfbW9kdWxlcy9sYXJhdmVsLWVjaG8vZGlzdC9lY2hvLmpzIiwid2VicGFjazovLy8uL2Fzc2V0cy9qcy9lY2hvLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogUHVzaGVyIEphdmFTY3JpcHQgTGlicmFyeSB2Ny42LjBcbiAqIGh0dHBzOi8vcHVzaGVyLmNvbS9cbiAqXG4gKiBDb3B5cmlnaHQgMjAyMCwgUHVzaGVyXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2VuY2UuXG4gKi9cblxuKGZ1bmN0aW9uIHdlYnBhY2tVbml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uKHJvb3QsIGZhY3RvcnkpIHtcblx0aWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnKVxuXHRcdG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpO1xuXHRlbHNlIGlmKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZClcblx0XHRkZWZpbmUoW10sIGZhY3RvcnkpO1xuXHRlbHNlIGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jylcblx0XHRleHBvcnRzW1wiUHVzaGVyXCJdID0gZmFjdG9yeSgpO1xuXHRlbHNlXG5cdFx0cm9vdFtcIlB1c2hlclwiXSA9IGZhY3RvcnkoKTtcbn0pKHdpbmRvdywgZnVuY3Rpb24oKSB7XG5yZXR1cm4gLyoqKioqKi8gKGZ1bmN0aW9uKG1vZHVsZXMpIHsgLy8gd2VicGFja0Jvb3RzdHJhcFxuLyoqKioqKi8gXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4vKioqKioqLyBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuLyoqKioqKi8gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuLyoqKioqKi8gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4vKioqKioqLyBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbi8qKioqKiovIFx0XHR9XG4vKioqKioqLyBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbi8qKioqKiovIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4vKioqKioqLyBcdFx0XHRpOiBtb2R1bGVJZCxcbi8qKioqKiovIFx0XHRcdGw6IGZhbHNlLFxuLyoqKioqKi8gXHRcdFx0ZXhwb3J0czoge31cbi8qKioqKiovIFx0XHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbi8qKioqKiovIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuLyoqKioqKi8gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbi8qKioqKiovIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4vKioqKioqLyBcdH1cbi8qKioqKiovXG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbi8qKioqKiovIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4vKioqKioqLyBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbi8qKioqKiovIFx0XHR9XG4vKioqKioqLyBcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbi8qKioqKiovIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbi8qKioqKiovIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuLyoqKioqKi8gXHRcdH1cbi8qKioqKiovIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuLyoqKioqKi8gXHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4vKioqKioqLyBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuLyoqKioqKi8gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbi8qKioqKiovIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4vKioqKioqLyBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbi8qKioqKiovIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbi8qKioqKiovIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuLyoqKioqKi8gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4vKioqKioqLyBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbi8qKioqKiovIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuLyoqKioqKi8gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbi8qKioqKiovIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4vKioqKioqLyBcdFx0cmV0dXJuIG5zO1xuLyoqKioqKi8gXHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4vKioqKioqLyBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4vKioqKioqLyBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuLyoqKioqKi8gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbi8qKioqKiovIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4vKioqKioqLyBcdFx0cmV0dXJuIGdldHRlcjtcbi8qKioqKiovIFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuLyoqKioqKi9cbi8qKioqKiovXG4vKioqKioqLyBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuLyoqKioqKi8gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAyKTtcbi8qKioqKiovIH0pXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKioqKi8gKFtcbi8qIDAgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbi8vIENvcHlyaWdodCAoQykgMjAxNiBEbWl0cnkgQ2hlc3RueWtoXG4vLyBNSVQgTGljZW5zZS4gU2VlIExJQ0VOU0UgZmlsZSBmb3IgZGV0YWlscy5cbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcbiAgICAgICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcbiAgICAgICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgICAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICB9O1xuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLyoqXG4gKiBQYWNrYWdlIGJhc2U2NCBpbXBsZW1lbnRzIEJhc2U2NCBlbmNvZGluZyBhbmQgZGVjb2RpbmcuXG4gKi9cbi8vIEludmFsaWQgY2hhcmFjdGVyIHVzZWQgaW4gZGVjb2RpbmcgdG8gaW5kaWNhdGVcbi8vIHRoYXQgdGhlIGNoYXJhY3RlciB0byBkZWNvZGUgaXMgb3V0IG9mIHJhbmdlIG9mXG4vLyBhbHBoYWJldCBhbmQgY2Fubm90IGJlIGRlY29kZWQuXG52YXIgSU5WQUxJRF9CWVRFID0gMjU2O1xuLyoqXG4gKiBJbXBsZW1lbnRzIHN0YW5kYXJkIEJhc2U2NCBlbmNvZGluZy5cbiAqXG4gKiBPcGVyYXRlcyBpbiBjb25zdGFudCB0aW1lLlxuICovXG52YXIgQ29kZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgLy8gVE9ETyhkY2hlc3QpOiBtZXRob2RzIHRvIGVuY29kZSBjaHVuay1ieS1jaHVuay5cbiAgICBmdW5jdGlvbiBDb2RlcihfcGFkZGluZ0NoYXJhY3Rlcikge1xuICAgICAgICBpZiAoX3BhZGRpbmdDaGFyYWN0ZXIgPT09IHZvaWQgMCkgeyBfcGFkZGluZ0NoYXJhY3RlciA9IFwiPVwiOyB9XG4gICAgICAgIHRoaXMuX3BhZGRpbmdDaGFyYWN0ZXIgPSBfcGFkZGluZ0NoYXJhY3RlcjtcbiAgICB9XG4gICAgQ29kZXIucHJvdG90eXBlLmVuY29kZWRMZW5ndGggPSBmdW5jdGlvbiAobGVuZ3RoKSB7XG4gICAgICAgIGlmICghdGhpcy5fcGFkZGluZ0NoYXJhY3Rlcikge1xuICAgICAgICAgICAgcmV0dXJuIChsZW5ndGggKiA4ICsgNSkgLyA2IHwgMDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gKGxlbmd0aCArIDIpIC8gMyAqIDQgfCAwO1xuICAgIH07XG4gICAgQ29kZXIucHJvdG90eXBlLmVuY29kZSA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgIHZhciBvdXQgPSBcIlwiO1xuICAgICAgICB2YXIgaSA9IDA7XG4gICAgICAgIGZvciAoOyBpIDwgZGF0YS5sZW5ndGggLSAyOyBpICs9IDMpIHtcbiAgICAgICAgICAgIHZhciBjID0gKGRhdGFbaV0gPDwgMTYpIHwgKGRhdGFbaSArIDFdIDw8IDgpIHwgKGRhdGFbaSArIDJdKTtcbiAgICAgICAgICAgIG91dCArPSB0aGlzLl9lbmNvZGVCeXRlKChjID4+PiAzICogNikgJiA2Myk7XG4gICAgICAgICAgICBvdXQgKz0gdGhpcy5fZW5jb2RlQnl0ZSgoYyA+Pj4gMiAqIDYpICYgNjMpO1xuICAgICAgICAgICAgb3V0ICs9IHRoaXMuX2VuY29kZUJ5dGUoKGMgPj4+IDEgKiA2KSAmIDYzKTtcbiAgICAgICAgICAgIG91dCArPSB0aGlzLl9lbmNvZGVCeXRlKChjID4+PiAwICogNikgJiA2Myk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGxlZnQgPSBkYXRhLmxlbmd0aCAtIGk7XG4gICAgICAgIGlmIChsZWZ0ID4gMCkge1xuICAgICAgICAgICAgdmFyIGMgPSAoZGF0YVtpXSA8PCAxNikgfCAobGVmdCA9PT0gMiA/IGRhdGFbaSArIDFdIDw8IDggOiAwKTtcbiAgICAgICAgICAgIG91dCArPSB0aGlzLl9lbmNvZGVCeXRlKChjID4+PiAzICogNikgJiA2Myk7XG4gICAgICAgICAgICBvdXQgKz0gdGhpcy5fZW5jb2RlQnl0ZSgoYyA+Pj4gMiAqIDYpICYgNjMpO1xuICAgICAgICAgICAgaWYgKGxlZnQgPT09IDIpIHtcbiAgICAgICAgICAgICAgICBvdXQgKz0gdGhpcy5fZW5jb2RlQnl0ZSgoYyA+Pj4gMSAqIDYpICYgNjMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgb3V0ICs9IHRoaXMuX3BhZGRpbmdDaGFyYWN0ZXIgfHwgXCJcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG91dCArPSB0aGlzLl9wYWRkaW5nQ2hhcmFjdGVyIHx8IFwiXCI7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG91dDtcbiAgICB9O1xuICAgIENvZGVyLnByb3RvdHlwZS5tYXhEZWNvZGVkTGVuZ3RoID0gZnVuY3Rpb24gKGxlbmd0aCkge1xuICAgICAgICBpZiAoIXRoaXMuX3BhZGRpbmdDaGFyYWN0ZXIpIHtcbiAgICAgICAgICAgIHJldHVybiAobGVuZ3RoICogNiArIDcpIC8gOCB8IDA7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGxlbmd0aCAvIDQgKiAzIHwgMDtcbiAgICB9O1xuICAgIENvZGVyLnByb3RvdHlwZS5kZWNvZGVkTGVuZ3RoID0gZnVuY3Rpb24gKHMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWF4RGVjb2RlZExlbmd0aChzLmxlbmd0aCAtIHRoaXMuX2dldFBhZGRpbmdMZW5ndGgocykpO1xuICAgIH07XG4gICAgQ29kZXIucHJvdG90eXBlLmRlY29kZSA9IGZ1bmN0aW9uIChzKSB7XG4gICAgICAgIGlmIChzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KDApO1xuICAgICAgICB9XG4gICAgICAgIHZhciBwYWRkaW5nTGVuZ3RoID0gdGhpcy5fZ2V0UGFkZGluZ0xlbmd0aChzKTtcbiAgICAgICAgdmFyIGxlbmd0aCA9IHMubGVuZ3RoIC0gcGFkZGluZ0xlbmd0aDtcbiAgICAgICAgdmFyIG91dCA9IG5ldyBVaW50OEFycmF5KHRoaXMubWF4RGVjb2RlZExlbmd0aChsZW5ndGgpKTtcbiAgICAgICAgdmFyIG9wID0gMDtcbiAgICAgICAgdmFyIGkgPSAwO1xuICAgICAgICB2YXIgaGF2ZUJhZCA9IDA7XG4gICAgICAgIHZhciB2MCA9IDAsIHYxID0gMCwgdjIgPSAwLCB2MyA9IDA7XG4gICAgICAgIGZvciAoOyBpIDwgbGVuZ3RoIC0gNDsgaSArPSA0KSB7XG4gICAgICAgICAgICB2MCA9IHRoaXMuX2RlY29kZUNoYXIocy5jaGFyQ29kZUF0KGkgKyAwKSk7XG4gICAgICAgICAgICB2MSA9IHRoaXMuX2RlY29kZUNoYXIocy5jaGFyQ29kZUF0KGkgKyAxKSk7XG4gICAgICAgICAgICB2MiA9IHRoaXMuX2RlY29kZUNoYXIocy5jaGFyQ29kZUF0KGkgKyAyKSk7XG4gICAgICAgICAgICB2MyA9IHRoaXMuX2RlY29kZUNoYXIocy5jaGFyQ29kZUF0KGkgKyAzKSk7XG4gICAgICAgICAgICBvdXRbb3ArK10gPSAodjAgPDwgMikgfCAodjEgPj4+IDQpO1xuICAgICAgICAgICAgb3V0W29wKytdID0gKHYxIDw8IDQpIHwgKHYyID4+PiAyKTtcbiAgICAgICAgICAgIG91dFtvcCsrXSA9ICh2MiA8PCA2KSB8IHYzO1xuICAgICAgICAgICAgaGF2ZUJhZCB8PSB2MCAmIElOVkFMSURfQllURTtcbiAgICAgICAgICAgIGhhdmVCYWQgfD0gdjEgJiBJTlZBTElEX0JZVEU7XG4gICAgICAgICAgICBoYXZlQmFkIHw9IHYyICYgSU5WQUxJRF9CWVRFO1xuICAgICAgICAgICAgaGF2ZUJhZCB8PSB2MyAmIElOVkFMSURfQllURTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaSA8IGxlbmd0aCAtIDEpIHtcbiAgICAgICAgICAgIHYwID0gdGhpcy5fZGVjb2RlQ2hhcihzLmNoYXJDb2RlQXQoaSkpO1xuICAgICAgICAgICAgdjEgPSB0aGlzLl9kZWNvZGVDaGFyKHMuY2hhckNvZGVBdChpICsgMSkpO1xuICAgICAgICAgICAgb3V0W29wKytdID0gKHYwIDw8IDIpIHwgKHYxID4+PiA0KTtcbiAgICAgICAgICAgIGhhdmVCYWQgfD0gdjAgJiBJTlZBTElEX0JZVEU7XG4gICAgICAgICAgICBoYXZlQmFkIHw9IHYxICYgSU5WQUxJRF9CWVRFO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpIDwgbGVuZ3RoIC0gMikge1xuICAgICAgICAgICAgdjIgPSB0aGlzLl9kZWNvZGVDaGFyKHMuY2hhckNvZGVBdChpICsgMikpO1xuICAgICAgICAgICAgb3V0W29wKytdID0gKHYxIDw8IDQpIHwgKHYyID4+PiAyKTtcbiAgICAgICAgICAgIGhhdmVCYWQgfD0gdjIgJiBJTlZBTElEX0JZVEU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGkgPCBsZW5ndGggLSAzKSB7XG4gICAgICAgICAgICB2MyA9IHRoaXMuX2RlY29kZUNoYXIocy5jaGFyQ29kZUF0KGkgKyAzKSk7XG4gICAgICAgICAgICBvdXRbb3ArK10gPSAodjIgPDwgNikgfCB2MztcbiAgICAgICAgICAgIGhhdmVCYWQgfD0gdjMgJiBJTlZBTElEX0JZVEU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGhhdmVCYWQgIT09IDApIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkJhc2U2NENvZGVyOiBpbmNvcnJlY3QgY2hhcmFjdGVycyBmb3IgZGVjb2RpbmdcIik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG91dDtcbiAgICB9O1xuICAgIC8vIFN0YW5kYXJkIGVuY29kaW5nIGhhdmUgdGhlIGZvbGxvd2luZyBlbmNvZGVkL2RlY29kZWQgcmFuZ2VzLFxuICAgIC8vIHdoaWNoIHdlIG5lZWQgdG8gY29udmVydCBiZXR3ZWVuLlxuICAgIC8vXG4gICAgLy8gQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVogYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXogMDEyMzQ1Njc4OSAgKyAgIC9cbiAgICAvLyBJbmRleDogICAwIC0gMjUgICAgICAgICAgICAgICAgICAgIDI2IC0gNTEgICAgICAgICAgICAgIDUyIC0gNjEgICA2MiAgNjNcbiAgICAvLyBBU0NJSTogIDY1IC0gOTAgICAgICAgICAgICAgICAgICAgIDk3IC0gMTIyICAgICAgICAgICAgIDQ4IC0gNTcgICA0MyAgNDdcbiAgICAvL1xuICAgIC8vIEVuY29kZSA2IGJpdHMgaW4gYiBpbnRvIGEgbmV3IGNoYXJhY3Rlci5cbiAgICBDb2Rlci5wcm90b3R5cGUuX2VuY29kZUJ5dGUgPSBmdW5jdGlvbiAoYikge1xuICAgICAgICAvLyBFbmNvZGluZyB1c2VzIGNvbnN0YW50IHRpbWUgb3BlcmF0aW9ucyBhcyBmb2xsb3dzOlxuICAgICAgICAvL1xuICAgICAgICAvLyAxLiBEZWZpbmUgY29tcGFyaXNvbiBvZiBBIHdpdGggQiB1c2luZyAoQSAtIEIpID4+PiA4OlxuICAgICAgICAvLyAgICAgICAgICBpZiBBID4gQiwgdGhlbiByZXN1bHQgaXMgcG9zaXRpdmUgaW50ZWdlclxuICAgICAgICAvLyAgICAgICAgICBpZiBBIDw9IEIsIHRoZW4gcmVzdWx0IGlzIDBcbiAgICAgICAgLy9cbiAgICAgICAgLy8gMi4gRGVmaW5lIHNlbGVjdGlvbiBvZiBDIG9yIDAgdXNpbmcgYml0d2lzZSBBTkQ6IFggJiBDOlxuICAgICAgICAvLyAgICAgICAgICBpZiBYID09IDAsIHRoZW4gcmVzdWx0IGlzIDBcbiAgICAgICAgLy8gICAgICAgICAgaWYgWCAhPSAwLCB0aGVuIHJlc3VsdCBpcyBDXG4gICAgICAgIC8vXG4gICAgICAgIC8vIDMuIFN0YXJ0IHdpdGggdGhlIHNtYWxsZXN0IGNvbXBhcmlzb24gKGIgPj0gMCksIHdoaWNoIGlzIGFsd2F5c1xuICAgICAgICAvLyAgICB0cnVlLCBzbyBzZXQgdGhlIHJlc3VsdCB0byB0aGUgc3RhcnRpbmcgQVNDSUkgdmFsdWUgKDY1KS5cbiAgICAgICAgLy9cbiAgICAgICAgLy8gNC4gQ29udGludWUgY29tcGFyaW5nIGIgdG8gaGlnaGVyIEFTQ0lJIHZhbHVlcywgYW5kIHNlbGVjdGluZ1xuICAgICAgICAvLyAgICB6ZXJvIGlmIGNvbXBhcmlzb24gaXNuJ3QgdHJ1ZSwgb3RoZXJ3aXNlIHNlbGVjdGluZyBhIHZhbHVlXG4gICAgICAgIC8vICAgIHRvIGFkZCB0byByZXN1bHQsIHdoaWNoOlxuICAgICAgICAvL1xuICAgICAgICAvLyAgICAgICAgICBhKSB1bmRvZXMgdGhlIHByZXZpb3VzIGFkZGl0aW9uXG4gICAgICAgIC8vICAgICAgICAgIGIpIHByb3ZpZGVzIG5ldyB2YWx1ZSB0byBhZGRcbiAgICAgICAgLy9cbiAgICAgICAgdmFyIHJlc3VsdCA9IGI7XG4gICAgICAgIC8vIGIgPj0gMFxuICAgICAgICByZXN1bHQgKz0gNjU7XG4gICAgICAgIC8vIGIgPiAyNVxuICAgICAgICByZXN1bHQgKz0gKCgyNSAtIGIpID4+PiA4KSAmICgoMCAtIDY1KSAtIDI2ICsgOTcpO1xuICAgICAgICAvLyBiID4gNTFcbiAgICAgICAgcmVzdWx0ICs9ICgoNTEgLSBiKSA+Pj4gOCkgJiAoKDI2IC0gOTcpIC0gNTIgKyA0OCk7XG4gICAgICAgIC8vIGIgPiA2MVxuICAgICAgICByZXN1bHQgKz0gKCg2MSAtIGIpID4+PiA4KSAmICgoNTIgLSA0OCkgLSA2MiArIDQzKTtcbiAgICAgICAgLy8gYiA+IDYyXG4gICAgICAgIHJlc3VsdCArPSAoKDYyIC0gYikgPj4+IDgpICYgKCg2MiAtIDQzKSAtIDYzICsgNDcpO1xuICAgICAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShyZXN1bHQpO1xuICAgIH07XG4gICAgLy8gRGVjb2RlIGEgY2hhcmFjdGVyIGNvZGUgaW50byBhIGJ5dGUuXG4gICAgLy8gTXVzdCByZXR1cm4gMjU2IGlmIGNoYXJhY3RlciBpcyBvdXQgb2YgYWxwaGFiZXQgcmFuZ2UuXG4gICAgQ29kZXIucHJvdG90eXBlLl9kZWNvZGVDaGFyID0gZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgLy8gRGVjb2Rpbmcgd29ya3Mgc2ltaWxhciB0byBlbmNvZGluZzogdXNpbmcgdGhlIHNhbWUgY29tcGFyaXNvblxuICAgICAgICAvLyBmdW5jdGlvbiwgYnV0IG5vdyBpdCB3b3JrcyBvbiByYW5nZXM6IHJlc3VsdCBpcyBhbHdheXMgaW5jcmVtZW50ZWRcbiAgICAgICAgLy8gYnkgdmFsdWUsIGJ1dCB0aGlzIHZhbHVlIGJlY29tZXMgemVybyBpZiB0aGUgcmFuZ2UgaXMgbm90XG4gICAgICAgIC8vIHNhdGlzZmllZC5cbiAgICAgICAgLy9cbiAgICAgICAgLy8gRGVjb2Rpbmcgc3RhcnRzIHdpdGggaW52YWxpZCB2YWx1ZSwgMjU2LCB3aGljaCBpcyB0aGVuXG4gICAgICAgIC8vIHN1YnRyYWN0ZWQgd2hlbiB0aGUgcmFuZ2UgaXMgc2F0aXNmaWVkLiBJZiBub25lIG9mIHRoZSByYW5nZXNcbiAgICAgICAgLy8gYXBwbHksIHRoZSBmdW5jdGlvbiByZXR1cm5zIDI1Niwgd2hpY2ggaXMgdGhlbiBjaGVja2VkIGJ5XG4gICAgICAgIC8vIHRoZSBjYWxsZXIgdG8gdGhyb3cgZXJyb3IuXG4gICAgICAgIHZhciByZXN1bHQgPSBJTlZBTElEX0JZVEU7IC8vIHN0YXJ0IHdpdGggaW52YWxpZCBjaGFyYWN0ZXJcbiAgICAgICAgLy8gYyA9PSA0MyAoYyA+IDQyIGFuZCBjIDwgNDQpXG4gICAgICAgIHJlc3VsdCArPSAoKCg0MiAtIGMpICYgKGMgLSA0NCkpID4+PiA4KSAmICgtSU5WQUxJRF9CWVRFICsgYyAtIDQzICsgNjIpO1xuICAgICAgICAvLyBjID09IDQ3IChjID4gNDYgYW5kIGMgPCA0OClcbiAgICAgICAgcmVzdWx0ICs9ICgoKDQ2IC0gYykgJiAoYyAtIDQ4KSkgPj4+IDgpICYgKC1JTlZBTElEX0JZVEUgKyBjIC0gNDcgKyA2Myk7XG4gICAgICAgIC8vIGMgPiA0NyBhbmQgYyA8IDU4XG4gICAgICAgIHJlc3VsdCArPSAoKCg0NyAtIGMpICYgKGMgLSA1OCkpID4+PiA4KSAmICgtSU5WQUxJRF9CWVRFICsgYyAtIDQ4ICsgNTIpO1xuICAgICAgICAvLyBjID4gNjQgYW5kIGMgPCA5MVxuICAgICAgICByZXN1bHQgKz0gKCgoNjQgLSBjKSAmIChjIC0gOTEpKSA+Pj4gOCkgJiAoLUlOVkFMSURfQllURSArIGMgLSA2NSArIDApO1xuICAgICAgICAvLyBjID4gOTYgYW5kIGMgPCAxMjNcbiAgICAgICAgcmVzdWx0ICs9ICgoKDk2IC0gYykgJiAoYyAtIDEyMykpID4+PiA4KSAmICgtSU5WQUxJRF9CWVRFICsgYyAtIDk3ICsgMjYpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG4gICAgQ29kZXIucHJvdG90eXBlLl9nZXRQYWRkaW5nTGVuZ3RoID0gZnVuY3Rpb24gKHMpIHtcbiAgICAgICAgdmFyIHBhZGRpbmdMZW5ndGggPSAwO1xuICAgICAgICBpZiAodGhpcy5fcGFkZGluZ0NoYXJhY3Rlcikge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IHMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICAgICAgICBpZiAoc1tpXSAhPT0gdGhpcy5fcGFkZGluZ0NoYXJhY3Rlcikge1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcGFkZGluZ0xlbmd0aCsrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHMubGVuZ3RoIDwgNCB8fCBwYWRkaW5nTGVuZ3RoID4gMikge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkJhc2U2NENvZGVyOiBpbmNvcnJlY3QgcGFkZGluZ1wiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcGFkZGluZ0xlbmd0aDtcbiAgICB9O1xuICAgIHJldHVybiBDb2Rlcjtcbn0oKSk7XG5leHBvcnRzLkNvZGVyID0gQ29kZXI7XG52YXIgc3RkQ29kZXIgPSBuZXcgQ29kZXIoKTtcbmZ1bmN0aW9uIGVuY29kZShkYXRhKSB7XG4gICAgcmV0dXJuIHN0ZENvZGVyLmVuY29kZShkYXRhKTtcbn1cbmV4cG9ydHMuZW5jb2RlID0gZW5jb2RlO1xuZnVuY3Rpb24gZGVjb2RlKHMpIHtcbiAgICByZXR1cm4gc3RkQ29kZXIuZGVjb2RlKHMpO1xufVxuZXhwb3J0cy5kZWNvZGUgPSBkZWNvZGU7XG4vKipcbiAqIEltcGxlbWVudHMgVVJMLXNhZmUgQmFzZTY0IGVuY29kaW5nLlxuICogKFNhbWUgYXMgQmFzZTY0LCBidXQgJysnIGlzIHJlcGxhY2VkIHdpdGggJy0nLCBhbmQgJy8nIHdpdGggJ18nKS5cbiAqXG4gKiBPcGVyYXRlcyBpbiBjb25zdGFudCB0aW1lLlxuICovXG52YXIgVVJMU2FmZUNvZGVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhVUkxTYWZlQ29kZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gVVJMU2FmZUNvZGVyKCkge1xuICAgICAgICByZXR1cm4gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgfVxuICAgIC8vIFVSTC1zYWZlIGVuY29kaW5nIGhhdmUgdGhlIGZvbGxvd2luZyBlbmNvZGVkL2RlY29kZWQgcmFuZ2VzOlxuICAgIC8vXG4gICAgLy8gQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVogYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXogMDEyMzQ1Njc4OSAgLSAgIF9cbiAgICAvLyBJbmRleDogICAwIC0gMjUgICAgICAgICAgICAgICAgICAgIDI2IC0gNTEgICAgICAgICAgICAgIDUyIC0gNjEgICA2MiAgNjNcbiAgICAvLyBBU0NJSTogIDY1IC0gOTAgICAgICAgICAgICAgICAgICAgIDk3IC0gMTIyICAgICAgICAgICAgIDQ4IC0gNTcgICA0NSAgOTVcbiAgICAvL1xuICAgIFVSTFNhZmVDb2Rlci5wcm90b3R5cGUuX2VuY29kZUJ5dGUgPSBmdW5jdGlvbiAoYikge1xuICAgICAgICB2YXIgcmVzdWx0ID0gYjtcbiAgICAgICAgLy8gYiA+PSAwXG4gICAgICAgIHJlc3VsdCArPSA2NTtcbiAgICAgICAgLy8gYiA+IDI1XG4gICAgICAgIHJlc3VsdCArPSAoKDI1IC0gYikgPj4+IDgpICYgKCgwIC0gNjUpIC0gMjYgKyA5Nyk7XG4gICAgICAgIC8vIGIgPiA1MVxuICAgICAgICByZXN1bHQgKz0gKCg1MSAtIGIpID4+PiA4KSAmICgoMjYgLSA5NykgLSA1MiArIDQ4KTtcbiAgICAgICAgLy8gYiA+IDYxXG4gICAgICAgIHJlc3VsdCArPSAoKDYxIC0gYikgPj4+IDgpICYgKCg1MiAtIDQ4KSAtIDYyICsgNDUpO1xuICAgICAgICAvLyBiID4gNjJcbiAgICAgICAgcmVzdWx0ICs9ICgoNjIgLSBiKSA+Pj4gOCkgJiAoKDYyIC0gNDUpIC0gNjMgKyA5NSk7XG4gICAgICAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKHJlc3VsdCk7XG4gICAgfTtcbiAgICBVUkxTYWZlQ29kZXIucHJvdG90eXBlLl9kZWNvZGVDaGFyID0gZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IElOVkFMSURfQllURTtcbiAgICAgICAgLy8gYyA9PSA0NSAoYyA+IDQ0IGFuZCBjIDwgNDYpXG4gICAgICAgIHJlc3VsdCArPSAoKCg0NCAtIGMpICYgKGMgLSA0NikpID4+PiA4KSAmICgtSU5WQUxJRF9CWVRFICsgYyAtIDQ1ICsgNjIpO1xuICAgICAgICAvLyBjID09IDk1IChjID4gOTQgYW5kIGMgPCA5NilcbiAgICAgICAgcmVzdWx0ICs9ICgoKDk0IC0gYykgJiAoYyAtIDk2KSkgPj4+IDgpICYgKC1JTlZBTElEX0JZVEUgKyBjIC0gOTUgKyA2Myk7XG4gICAgICAgIC8vIGMgPiA0NyBhbmQgYyA8IDU4XG4gICAgICAgIHJlc3VsdCArPSAoKCg0NyAtIGMpICYgKGMgLSA1OCkpID4+PiA4KSAmICgtSU5WQUxJRF9CWVRFICsgYyAtIDQ4ICsgNTIpO1xuICAgICAgICAvLyBjID4gNjQgYW5kIGMgPCA5MVxuICAgICAgICByZXN1bHQgKz0gKCgoNjQgLSBjKSAmIChjIC0gOTEpKSA+Pj4gOCkgJiAoLUlOVkFMSURfQllURSArIGMgLSA2NSArIDApO1xuICAgICAgICAvLyBjID4gOTYgYW5kIGMgPCAxMjNcbiAgICAgICAgcmVzdWx0ICs9ICgoKDk2IC0gYykgJiAoYyAtIDEyMykpID4+PiA4KSAmICgtSU5WQUxJRF9CWVRFICsgYyAtIDk3ICsgMjYpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG4gICAgcmV0dXJuIFVSTFNhZmVDb2Rlcjtcbn0oQ29kZXIpKTtcbmV4cG9ydHMuVVJMU2FmZUNvZGVyID0gVVJMU2FmZUNvZGVyO1xudmFyIHVybFNhZmVDb2RlciA9IG5ldyBVUkxTYWZlQ29kZXIoKTtcbmZ1bmN0aW9uIGVuY29kZVVSTFNhZmUoZGF0YSkge1xuICAgIHJldHVybiB1cmxTYWZlQ29kZXIuZW5jb2RlKGRhdGEpO1xufVxuZXhwb3J0cy5lbmNvZGVVUkxTYWZlID0gZW5jb2RlVVJMU2FmZTtcbmZ1bmN0aW9uIGRlY29kZVVSTFNhZmUocykge1xuICAgIHJldHVybiB1cmxTYWZlQ29kZXIuZGVjb2RlKHMpO1xufVxuZXhwb3J0cy5kZWNvZGVVUkxTYWZlID0gZGVjb2RlVVJMU2FmZTtcbmV4cG9ydHMuZW5jb2RlZExlbmd0aCA9IGZ1bmN0aW9uIChsZW5ndGgpIHtcbiAgICByZXR1cm4gc3RkQ29kZXIuZW5jb2RlZExlbmd0aChsZW5ndGgpO1xufTtcbmV4cG9ydHMubWF4RGVjb2RlZExlbmd0aCA9IGZ1bmN0aW9uIChsZW5ndGgpIHtcbiAgICByZXR1cm4gc3RkQ29kZXIubWF4RGVjb2RlZExlbmd0aChsZW5ndGgpO1xufTtcbmV4cG9ydHMuZGVjb2RlZExlbmd0aCA9IGZ1bmN0aW9uIChzKSB7XG4gICAgcmV0dXJuIHN0ZENvZGVyLmRlY29kZWRMZW5ndGgocyk7XG59O1xuXG5cbi8qKiovIH0pLFxuLyogMSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuLy8gQ29weXJpZ2h0IChDKSAyMDE2IERtaXRyeSBDaGVzdG55a2hcbi8vIE1JVCBMaWNlbnNlLiBTZWUgTElDRU5TRSBmaWxlIGZvciBkZXRhaWxzLlxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLyoqXG4gKiBQYWNrYWdlIHV0ZjggaW1wbGVtZW50cyBVVEYtOCBlbmNvZGluZyBhbmQgZGVjb2RpbmcuXG4gKi9cbnZhciBJTlZBTElEX1VURjE2ID0gXCJ1dGY4OiBpbnZhbGlkIHN0cmluZ1wiO1xudmFyIElOVkFMSURfVVRGOCA9IFwidXRmODogaW52YWxpZCBzb3VyY2UgZW5jb2RpbmdcIjtcbi8qKlxuICogRW5jb2RlcyB0aGUgZ2l2ZW4gc3RyaW5nIGludG8gVVRGLTggYnl0ZSBhcnJheS5cbiAqIFRocm93cyBpZiB0aGUgc291cmNlIHN0cmluZyBoYXMgaW52YWxpZCBVVEYtMTYgZW5jb2RpbmcuXG4gKi9cbmZ1bmN0aW9uIGVuY29kZShzKSB7XG4gICAgLy8gQ2FsY3VsYXRlIHJlc3VsdCBsZW5ndGggYW5kIGFsbG9jYXRlIG91dHB1dCBhcnJheS5cbiAgICAvLyBlbmNvZGVkTGVuZ3RoKCkgYWxzbyB2YWxpZGF0ZXMgc3RyaW5nIGFuZCB0aHJvd3MgZXJyb3JzLFxuICAgIC8vIHNvIHdlIGRvbid0IG5lZWQgcmVwZWF0IHZhbGlkYXRpb24gaGVyZS5cbiAgICB2YXIgYXJyID0gbmV3IFVpbnQ4QXJyYXkoZW5jb2RlZExlbmd0aChzKSk7XG4gICAgdmFyIHBvcyA9IDA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBjID0gcy5jaGFyQ29kZUF0KGkpO1xuICAgICAgICBpZiAoYyA8IDB4ODApIHtcbiAgICAgICAgICAgIGFycltwb3MrK10gPSBjO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGMgPCAweDgwMCkge1xuICAgICAgICAgICAgYXJyW3BvcysrXSA9IDB4YzAgfCBjID4+IDY7XG4gICAgICAgICAgICBhcnJbcG9zKytdID0gMHg4MCB8IGMgJiAweDNmO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGMgPCAweGQ4MDApIHtcbiAgICAgICAgICAgIGFycltwb3MrK10gPSAweGUwIHwgYyA+PiAxMjtcbiAgICAgICAgICAgIGFycltwb3MrK10gPSAweDgwIHwgKGMgPj4gNikgJiAweDNmO1xuICAgICAgICAgICAgYXJyW3BvcysrXSA9IDB4ODAgfCBjICYgMHgzZjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGkrKzsgLy8gZ2V0IG9uZSBtb3JlIGNoYXJhY3RlclxuICAgICAgICAgICAgYyA9IChjICYgMHgzZmYpIDw8IDEwO1xuICAgICAgICAgICAgYyB8PSBzLmNoYXJDb2RlQXQoaSkgJiAweDNmZjtcbiAgICAgICAgICAgIGMgKz0gMHgxMDAwMDtcbiAgICAgICAgICAgIGFycltwb3MrK10gPSAweGYwIHwgYyA+PiAxODtcbiAgICAgICAgICAgIGFycltwb3MrK10gPSAweDgwIHwgKGMgPj4gMTIpICYgMHgzZjtcbiAgICAgICAgICAgIGFycltwb3MrK10gPSAweDgwIHwgKGMgPj4gNikgJiAweDNmO1xuICAgICAgICAgICAgYXJyW3BvcysrXSA9IDB4ODAgfCBjICYgMHgzZjtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYXJyO1xufVxuZXhwb3J0cy5lbmNvZGUgPSBlbmNvZGU7XG4vKipcbiAqIFJldHVybnMgdGhlIG51bWJlciBvZiBieXRlcyByZXF1aXJlZCB0byBlbmNvZGUgdGhlIGdpdmVuIHN0cmluZyBpbnRvIFVURi04LlxuICogVGhyb3dzIGlmIHRoZSBzb3VyY2Ugc3RyaW5nIGhhcyBpbnZhbGlkIFVURi0xNiBlbmNvZGluZy5cbiAqL1xuZnVuY3Rpb24gZW5jb2RlZExlbmd0aChzKSB7XG4gICAgdmFyIHJlc3VsdCA9IDA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBjID0gcy5jaGFyQ29kZUF0KGkpO1xuICAgICAgICBpZiAoYyA8IDB4ODApIHtcbiAgICAgICAgICAgIHJlc3VsdCArPSAxO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGMgPCAweDgwMCkge1xuICAgICAgICAgICAgcmVzdWx0ICs9IDI7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoYyA8IDB4ZDgwMCkge1xuICAgICAgICAgICAgcmVzdWx0ICs9IDM7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoYyA8PSAweGRmZmYpIHtcbiAgICAgICAgICAgIGlmIChpID49IHMubGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihJTlZBTElEX1VURjE2KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGkrKzsgLy8gXCJlYXRcIiBuZXh0IGNoYXJhY3RlclxuICAgICAgICAgICAgcmVzdWx0ICs9IDQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoSU5WQUxJRF9VVEYxNik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmV4cG9ydHMuZW5jb2RlZExlbmd0aCA9IGVuY29kZWRMZW5ndGg7XG4vKipcbiAqIERlY29kZXMgdGhlIGdpdmVuIGJ5dGUgYXJyYXkgZnJvbSBVVEYtOCBpbnRvIGEgc3RyaW5nLlxuICogVGhyb3dzIGlmIGVuY29kaW5nIGlzIGludmFsaWQuXG4gKi9cbmZ1bmN0aW9uIGRlY29kZShhcnIpIHtcbiAgICB2YXIgY2hhcnMgPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyci5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgYiA9IGFycltpXTtcbiAgICAgICAgaWYgKGIgJiAweDgwKSB7XG4gICAgICAgICAgICB2YXIgbWluID0gdm9pZCAwO1xuICAgICAgICAgICAgaWYgKGIgPCAweGUwKSB7XG4gICAgICAgICAgICAgICAgLy8gTmVlZCAxIG1vcmUgYnl0ZS5cbiAgICAgICAgICAgICAgICBpZiAoaSA+PSBhcnIubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihJTlZBTElEX1VURjgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgbjEgPSBhcnJbKytpXTtcbiAgICAgICAgICAgICAgICBpZiAoKG4xICYgMHhjMCkgIT09IDB4ODApIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKElOVkFMSURfVVRGOCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGIgPSAoYiAmIDB4MWYpIDw8IDYgfCAobjEgJiAweDNmKTtcbiAgICAgICAgICAgICAgICBtaW4gPSAweDgwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoYiA8IDB4ZjApIHtcbiAgICAgICAgICAgICAgICAvLyBOZWVkIDIgbW9yZSBieXRlcy5cbiAgICAgICAgICAgICAgICBpZiAoaSA+PSBhcnIubGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoSU5WQUxJRF9VVEY4KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIG4xID0gYXJyWysraV07XG4gICAgICAgICAgICAgICAgdmFyIG4yID0gYXJyWysraV07XG4gICAgICAgICAgICAgICAgaWYgKChuMSAmIDB4YzApICE9PSAweDgwIHx8IChuMiAmIDB4YzApICE9PSAweDgwKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihJTlZBTElEX1VURjgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBiID0gKGIgJiAweDBmKSA8PCAxMiB8IChuMSAmIDB4M2YpIDw8IDYgfCAobjIgJiAweDNmKTtcbiAgICAgICAgICAgICAgICBtaW4gPSAweDgwMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGIgPCAweGY4KSB7XG4gICAgICAgICAgICAgICAgLy8gTmVlZCAzIG1vcmUgYnl0ZXMuXG4gICAgICAgICAgICAgICAgaWYgKGkgPj0gYXJyLmxlbmd0aCAtIDIpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKElOVkFMSURfVVRGOCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciBuMSA9IGFyclsrK2ldO1xuICAgICAgICAgICAgICAgIHZhciBuMiA9IGFyclsrK2ldO1xuICAgICAgICAgICAgICAgIHZhciBuMyA9IGFyclsrK2ldO1xuICAgICAgICAgICAgICAgIGlmICgobjEgJiAweGMwKSAhPT0gMHg4MCB8fCAobjIgJiAweGMwKSAhPT0gMHg4MCB8fCAobjMgJiAweGMwKSAhPT0gMHg4MCkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoSU5WQUxJRF9VVEY4KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYiA9IChiICYgMHgwZikgPDwgMTggfCAobjEgJiAweDNmKSA8PCAxMiB8IChuMiAmIDB4M2YpIDw8IDYgfCAobjMgJiAweDNmKTtcbiAgICAgICAgICAgICAgICBtaW4gPSAweDEwMDAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKElOVkFMSURfVVRGOCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYiA8IG1pbiB8fCAoYiA+PSAweGQ4MDAgJiYgYiA8PSAweGRmZmYpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKElOVkFMSURfVVRGOCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYiA+PSAweDEwMDAwKSB7XG4gICAgICAgICAgICAgICAgLy8gU3Vycm9nYXRlIHBhaXIuXG4gICAgICAgICAgICAgICAgaWYgKGIgPiAweDEwZmZmZikge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoSU5WQUxJRF9VVEY4KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYiAtPSAweDEwMDAwO1xuICAgICAgICAgICAgICAgIGNoYXJzLnB1c2goU3RyaW5nLmZyb21DaGFyQ29kZSgweGQ4MDAgfCAoYiA+PiAxMCkpKTtcbiAgICAgICAgICAgICAgICBiID0gMHhkYzAwIHwgKGIgJiAweDNmZik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY2hhcnMucHVzaChTdHJpbmcuZnJvbUNoYXJDb2RlKGIpKTtcbiAgICB9XG4gICAgcmV0dXJuIGNoYXJzLmpvaW4oXCJcIik7XG59XG5leHBvcnRzLmRlY29kZSA9IGRlY29kZTtcblxuXG4vKioqLyB9KSxcbi8qIDIgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuLy8gcmVxdWlyZWQgc28gd2UgZG9uJ3QgaGF2ZSB0byBkbyByZXF1aXJlKCdwdXNoZXInKS5kZWZhdWx0IGV0Yy5cbm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKS5kZWZhdWx0O1xuXG5cbi8qKiovIH0pLFxuLyogMyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbi8vIEVTTSBDT01QQVQgRkxBR1xuX193ZWJwYWNrX3JlcXVpcmVfXy5yKF9fd2VicGFja19leHBvcnRzX18pO1xuXG4vLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy9ydW50aW1lcy93ZWIvZG9tL3NjcmlwdF9yZWNlaXZlcl9mYWN0b3J5LnRzXG52YXIgU2NyaXB0UmVjZWl2ZXJGYWN0b3J5ID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBTY3JpcHRSZWNlaXZlckZhY3RvcnkocHJlZml4LCBuYW1lKSB7XG4gICAgICAgIHRoaXMubGFzdElkID0gMDtcbiAgICAgICAgdGhpcy5wcmVmaXggPSBwcmVmaXg7XG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgfVxuICAgIFNjcmlwdFJlY2VpdmVyRmFjdG9yeS5wcm90b3R5cGUuY3JlYXRlID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgICAgIHRoaXMubGFzdElkKys7XG4gICAgICAgIHZhciBudW1iZXIgPSB0aGlzLmxhc3RJZDtcbiAgICAgICAgdmFyIGlkID0gdGhpcy5wcmVmaXggKyBudW1iZXI7XG4gICAgICAgIHZhciBuYW1lID0gdGhpcy5uYW1lICsgJ1snICsgbnVtYmVyICsgJ10nO1xuICAgICAgICB2YXIgY2FsbGVkID0gZmFsc2U7XG4gICAgICAgIHZhciBjYWxsYmFja1dyYXBwZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoIWNhbGxlZCkge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgICAgICAgY2FsbGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgdGhpc1tudW1iZXJdID0gY2FsbGJhY2tXcmFwcGVyO1xuICAgICAgICByZXR1cm4geyBudW1iZXI6IG51bWJlciwgaWQ6IGlkLCBuYW1lOiBuYW1lLCBjYWxsYmFjazogY2FsbGJhY2tXcmFwcGVyIH07XG4gICAgfTtcbiAgICBTY3JpcHRSZWNlaXZlckZhY3RvcnkucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uIChyZWNlaXZlcikge1xuICAgICAgICBkZWxldGUgdGhpc1tyZWNlaXZlci5udW1iZXJdO1xuICAgIH07XG4gICAgcmV0dXJuIFNjcmlwdFJlY2VpdmVyRmFjdG9yeTtcbn0oKSk7XG5cbnZhciBTY3JpcHRSZWNlaXZlcnMgPSBuZXcgU2NyaXB0UmVjZWl2ZXJGYWN0b3J5KCdfcHVzaGVyX3NjcmlwdF8nLCAnUHVzaGVyLlNjcmlwdFJlY2VpdmVycycpO1xuXG4vLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy9jb3JlL2RlZmF1bHRzLnRzXG52YXIgRGVmYXVsdHMgPSB7XG4gICAgVkVSU0lPTjogXCI3LjYuMFwiLFxuICAgIFBST1RPQ09MOiA3LFxuICAgIHdzUG9ydDogODAsXG4gICAgd3NzUG9ydDogNDQzLFxuICAgIHdzUGF0aDogJycsXG4gICAgaHR0cEhvc3Q6ICdzb2NranMucHVzaGVyLmNvbScsXG4gICAgaHR0cFBvcnQ6IDgwLFxuICAgIGh0dHBzUG9ydDogNDQzLFxuICAgIGh0dHBQYXRoOiAnL3B1c2hlcicsXG4gICAgc3RhdHNfaG9zdDogJ3N0YXRzLnB1c2hlci5jb20nLFxuICAgIGF1dGhFbmRwb2ludDogJy9wdXNoZXIvYXV0aCcsXG4gICAgYXV0aFRyYW5zcG9ydDogJ2FqYXgnLFxuICAgIGFjdGl2aXR5VGltZW91dDogMTIwMDAwLFxuICAgIHBvbmdUaW1lb3V0OiAzMDAwMCxcbiAgICB1bmF2YWlsYWJsZVRpbWVvdXQ6IDEwMDAwLFxuICAgIGNsdXN0ZXI6ICdtdDEnLFxuICAgIHVzZXJBdXRoZW50aWNhdGlvbjoge1xuICAgICAgICBlbmRwb2ludDogJy9wdXNoZXIvdXNlci1hdXRoJyxcbiAgICAgICAgdHJhbnNwb3J0OiAnYWpheCdcbiAgICB9LFxuICAgIGNoYW5uZWxBdXRob3JpemF0aW9uOiB7XG4gICAgICAgIGVuZHBvaW50OiAnL3B1c2hlci9hdXRoJyxcbiAgICAgICAgdHJhbnNwb3J0OiAnYWpheCdcbiAgICB9LFxuICAgIGNkbl9odHRwOiBcImh0dHA6Ly9qcy5wdXNoZXIuY29tXCIsXG4gICAgY2RuX2h0dHBzOiBcImh0dHBzOi8vanMucHVzaGVyLmNvbVwiLFxuICAgIGRlcGVuZGVuY3lfc3VmZml4OiBcIlwiXG59O1xuLyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyB2YXIgZGVmYXVsdHMgPSAoRGVmYXVsdHMpO1xuXG4vLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy9ydW50aW1lcy93ZWIvZG9tL2RlcGVuZGVuY3lfbG9hZGVyLnRzXG5cblxudmFyIGRlcGVuZGVuY3lfbG9hZGVyX0RlcGVuZGVuY3lMb2FkZXIgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIERlcGVuZGVuY3lMb2FkZXIob3B0aW9ucykge1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgICB0aGlzLnJlY2VpdmVycyA9IG9wdGlvbnMucmVjZWl2ZXJzIHx8IFNjcmlwdFJlY2VpdmVycztcbiAgICAgICAgdGhpcy5sb2FkaW5nID0ge307XG4gICAgfVxuICAgIERlcGVuZGVuY3lMb2FkZXIucHJvdG90eXBlLmxvYWQgPSBmdW5jdGlvbiAobmFtZSwgb3B0aW9ucywgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICBpZiAoc2VsZi5sb2FkaW5nW25hbWVdICYmIHNlbGYubG9hZGluZ1tuYW1lXS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBzZWxmLmxvYWRpbmdbbmFtZV0ucHVzaChjYWxsYmFjayk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBzZWxmLmxvYWRpbmdbbmFtZV0gPSBbY2FsbGJhY2tdO1xuICAgICAgICAgICAgdmFyIHJlcXVlc3QgPSBydW50aW1lLmNyZWF0ZVNjcmlwdFJlcXVlc3Qoc2VsZi5nZXRQYXRoKG5hbWUsIG9wdGlvbnMpKTtcbiAgICAgICAgICAgIHZhciByZWNlaXZlciA9IHNlbGYucmVjZWl2ZXJzLmNyZWF0ZShmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBzZWxmLnJlY2VpdmVycy5yZW1vdmUocmVjZWl2ZXIpO1xuICAgICAgICAgICAgICAgIGlmIChzZWxmLmxvYWRpbmdbbmFtZV0pIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNhbGxiYWNrcyA9IHNlbGYubG9hZGluZ1tuYW1lXTtcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHNlbGYubG9hZGluZ1tuYW1lXTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHN1Y2Nlc3NDYWxsYmFjayA9IGZ1bmN0aW9uICh3YXNTdWNjZXNzZnVsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXdhc1N1Y2Nlc3NmdWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXF1ZXN0LmNsZWFudXAoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjYWxsYmFja3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrc1tpXShlcnJvciwgc3VjY2Vzc0NhbGxiYWNrKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmVxdWVzdC5zZW5kKHJlY2VpdmVyKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgRGVwZW5kZW5jeUxvYWRlci5wcm90b3R5cGUuZ2V0Um9vdCA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgICAgIHZhciBjZG47XG4gICAgICAgIHZhciBwcm90b2NvbCA9IHJ1bnRpbWUuZ2V0RG9jdW1lbnQoKS5sb2NhdGlvbi5wcm90b2NvbDtcbiAgICAgICAgaWYgKChvcHRpb25zICYmIG9wdGlvbnMudXNlVExTKSB8fCBwcm90b2NvbCA9PT0gJ2h0dHBzOicpIHtcbiAgICAgICAgICAgIGNkbiA9IHRoaXMub3B0aW9ucy5jZG5faHR0cHM7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjZG4gPSB0aGlzLm9wdGlvbnMuY2RuX2h0dHA7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNkbi5yZXBsYWNlKC9cXC8qJC8sICcnKSArICcvJyArIHRoaXMub3B0aW9ucy52ZXJzaW9uO1xuICAgIH07XG4gICAgRGVwZW5kZW5jeUxvYWRlci5wcm90b3R5cGUuZ2V0UGF0aCA9IGZ1bmN0aW9uIChuYW1lLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFJvb3Qob3B0aW9ucykgKyAnLycgKyBuYW1lICsgdGhpcy5vcHRpb25zLnN1ZmZpeCArICcuanMnO1xuICAgIH07XG4gICAgcmV0dXJuIERlcGVuZGVuY3lMb2FkZXI7XG59KCkpO1xuLyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyB2YXIgZGVwZW5kZW5jeV9sb2FkZXIgPSAoZGVwZW5kZW5jeV9sb2FkZXJfRGVwZW5kZW5jeUxvYWRlcik7XG5cbi8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL3J1bnRpbWVzL3dlYi9kb20vZGVwZW5kZW5jaWVzLnRzXG5cblxuXG52YXIgRGVwZW5kZW5jaWVzUmVjZWl2ZXJzID0gbmV3IFNjcmlwdFJlY2VpdmVyRmFjdG9yeSgnX3B1c2hlcl9kZXBlbmRlbmNpZXMnLCAnUHVzaGVyLkRlcGVuZGVuY2llc1JlY2VpdmVycycpO1xudmFyIERlcGVuZGVuY2llcyA9IG5ldyBkZXBlbmRlbmN5X2xvYWRlcih7XG4gICAgY2RuX2h0dHA6IGRlZmF1bHRzLmNkbl9odHRwLFxuICAgIGNkbl9odHRwczogZGVmYXVsdHMuY2RuX2h0dHBzLFxuICAgIHZlcnNpb246IGRlZmF1bHRzLlZFUlNJT04sXG4gICAgc3VmZml4OiBkZWZhdWx0cy5kZXBlbmRlbmN5X3N1ZmZpeCxcbiAgICByZWNlaXZlcnM6IERlcGVuZGVuY2llc1JlY2VpdmVyc1xufSk7XG5cbi8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL2NvcmUvdXRpbHMvdXJsX3N0b3JlLnRzXG52YXIgdXJsU3RvcmUgPSB7XG4gICAgYmFzZVVybDogJ2h0dHBzOi8vcHVzaGVyLmNvbScsXG4gICAgdXJsczoge1xuICAgICAgICBhdXRoZW50aWNhdGlvbkVuZHBvaW50OiB7XG4gICAgICAgICAgICBwYXRoOiAnL2RvY3MvY2hhbm5lbHMvc2VydmVyX2FwaS9hdXRoZW50aWNhdGluZ191c2VycydcbiAgICAgICAgfSxcbiAgICAgICAgYXV0aG9yaXphdGlvbkVuZHBvaW50OiB7XG4gICAgICAgICAgICBwYXRoOiAnL2RvY3MvY2hhbm5lbHMvc2VydmVyX2FwaS9hdXRob3JpemluZy11c2Vycy8nXG4gICAgICAgIH0sXG4gICAgICAgIGphdmFzY3JpcHRRdWlja1N0YXJ0OiB7XG4gICAgICAgICAgICBwYXRoOiAnL2RvY3MvamF2YXNjcmlwdF9xdWlja19zdGFydCdcbiAgICAgICAgfSxcbiAgICAgICAgdHJpZ2dlcmluZ0NsaWVudEV2ZW50czoge1xuICAgICAgICAgICAgcGF0aDogJy9kb2NzL2NsaWVudF9hcGlfZ3VpZGUvY2xpZW50X2V2ZW50cyN0cmlnZ2VyLWV2ZW50cydcbiAgICAgICAgfSxcbiAgICAgICAgZW5jcnlwdGVkQ2hhbm5lbFN1cHBvcnQ6IHtcbiAgICAgICAgICAgIGZ1bGxVcmw6ICdodHRwczovL2dpdGh1Yi5jb20vcHVzaGVyL3B1c2hlci1qcy90cmVlL2NjNDkxMDE1MzcxYTRiZGU1NzQzZDFjODdhMGZiYWMwZmViNTMxOTUjZW5jcnlwdGVkLWNoYW5uZWwtc3VwcG9ydCdcbiAgICAgICAgfVxuICAgIH1cbn07XG52YXIgYnVpbGRMb2dTdWZmaXggPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAgdmFyIHVybFByZWZpeCA9ICdTZWU6JztcbiAgICB2YXIgdXJsT2JqID0gdXJsU3RvcmUudXJsc1trZXldO1xuICAgIGlmICghdXJsT2JqKVxuICAgICAgICByZXR1cm4gJyc7XG4gICAgdmFyIHVybDtcbiAgICBpZiAodXJsT2JqLmZ1bGxVcmwpIHtcbiAgICAgICAgdXJsID0gdXJsT2JqLmZ1bGxVcmw7XG4gICAgfVxuICAgIGVsc2UgaWYgKHVybE9iai5wYXRoKSB7XG4gICAgICAgIHVybCA9IHVybFN0b3JlLmJhc2VVcmwgKyB1cmxPYmoucGF0aDtcbiAgICB9XG4gICAgaWYgKCF1cmwpXG4gICAgICAgIHJldHVybiAnJztcbiAgICByZXR1cm4gdXJsUHJlZml4ICsgXCIgXCIgKyB1cmw7XG59O1xuLyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyB2YXIgdXJsX3N0b3JlID0gKHsgYnVpbGRMb2dTdWZmaXg6IGJ1aWxkTG9nU3VmZml4IH0pO1xuXG4vLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy9jb3JlL2F1dGgvb3B0aW9ucy50c1xudmFyIEF1dGhSZXF1ZXN0VHlwZTtcbihmdW5jdGlvbiAoQXV0aFJlcXVlc3RUeXBlKSB7XG4gICAgQXV0aFJlcXVlc3RUeXBlW1wiVXNlckF1dGhlbnRpY2F0aW9uXCJdID0gXCJ1c2VyLWF1dGhlbnRpY2F0aW9uXCI7XG4gICAgQXV0aFJlcXVlc3RUeXBlW1wiQ2hhbm5lbEF1dGhvcml6YXRpb25cIl0gPSBcImNoYW5uZWwtYXV0aG9yaXphdGlvblwiO1xufSkoQXV0aFJlcXVlc3RUeXBlIHx8IChBdXRoUmVxdWVzdFR5cGUgPSB7fSkpO1xuXG4vLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy9jb3JlL2Vycm9ycy50c1xudmFyIF9fZXh0ZW5kcyA9ICh1bmRlZmluZWQgJiYgdW5kZWZpbmVkLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcbiAgICAgICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcbiAgICAgICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgICAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICB9O1xuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xudmFyIEJhZEV2ZW50TmFtZSA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKEJhZEV2ZW50TmFtZSwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBCYWRFdmVudE5hbWUobXNnKSB7XG4gICAgICAgIHZhciBfbmV3VGFyZ2V0ID0gdGhpcy5jb25zdHJ1Y3RvcjtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgbXNnKSB8fCB0aGlzO1xuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YoX3RoaXMsIF9uZXdUYXJnZXQucHJvdG90eXBlKTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICByZXR1cm4gQmFkRXZlbnROYW1lO1xufShFcnJvcikpO1xuXG52YXIgQmFkQ2hhbm5lbE5hbWUgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhCYWRDaGFubmVsTmFtZSwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBCYWRDaGFubmVsTmFtZShtc2cpIHtcbiAgICAgICAgdmFyIF9uZXdUYXJnZXQgPSB0aGlzLmNvbnN0cnVjdG9yO1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBtc2cpIHx8IHRoaXM7XG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZihfdGhpcywgX25ld1RhcmdldC5wcm90b3R5cGUpO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIHJldHVybiBCYWRDaGFubmVsTmFtZTtcbn0oRXJyb3IpKTtcblxudmFyIFJlcXVlc3RUaW1lZE91dCA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFJlcXVlc3RUaW1lZE91dCwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBSZXF1ZXN0VGltZWRPdXQobXNnKSB7XG4gICAgICAgIHZhciBfbmV3VGFyZ2V0ID0gdGhpcy5jb25zdHJ1Y3RvcjtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgbXNnKSB8fCB0aGlzO1xuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YoX3RoaXMsIF9uZXdUYXJnZXQucHJvdG90eXBlKTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICByZXR1cm4gUmVxdWVzdFRpbWVkT3V0O1xufShFcnJvcikpO1xuXG52YXIgVHJhbnNwb3J0UHJpb3JpdHlUb29Mb3cgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhUcmFuc3BvcnRQcmlvcml0eVRvb0xvdywgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBUcmFuc3BvcnRQcmlvcml0eVRvb0xvdyhtc2cpIHtcbiAgICAgICAgdmFyIF9uZXdUYXJnZXQgPSB0aGlzLmNvbnN0cnVjdG9yO1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBtc2cpIHx8IHRoaXM7XG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZihfdGhpcywgX25ld1RhcmdldC5wcm90b3R5cGUpO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIHJldHVybiBUcmFuc3BvcnRQcmlvcml0eVRvb0xvdztcbn0oRXJyb3IpKTtcblxudmFyIFRyYW5zcG9ydENsb3NlZCA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFRyYW5zcG9ydENsb3NlZCwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBUcmFuc3BvcnRDbG9zZWQobXNnKSB7XG4gICAgICAgIHZhciBfbmV3VGFyZ2V0ID0gdGhpcy5jb25zdHJ1Y3RvcjtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgbXNnKSB8fCB0aGlzO1xuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YoX3RoaXMsIF9uZXdUYXJnZXQucHJvdG90eXBlKTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICByZXR1cm4gVHJhbnNwb3J0Q2xvc2VkO1xufShFcnJvcikpO1xuXG52YXIgVW5zdXBwb3J0ZWRGZWF0dXJlID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoVW5zdXBwb3J0ZWRGZWF0dXJlLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFVuc3VwcG9ydGVkRmVhdHVyZShtc2cpIHtcbiAgICAgICAgdmFyIF9uZXdUYXJnZXQgPSB0aGlzLmNvbnN0cnVjdG9yO1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBtc2cpIHx8IHRoaXM7XG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZihfdGhpcywgX25ld1RhcmdldC5wcm90b3R5cGUpO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIHJldHVybiBVbnN1cHBvcnRlZEZlYXR1cmU7XG59KEVycm9yKSk7XG5cbnZhciBVbnN1cHBvcnRlZFRyYW5zcG9ydCA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFVuc3VwcG9ydGVkVHJhbnNwb3J0LCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFVuc3VwcG9ydGVkVHJhbnNwb3J0KG1zZykge1xuICAgICAgICB2YXIgX25ld1RhcmdldCA9IHRoaXMuY29uc3RydWN0b3I7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIG1zZykgfHwgdGhpcztcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKF90aGlzLCBfbmV3VGFyZ2V0LnByb3RvdHlwZSk7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgcmV0dXJuIFVuc3VwcG9ydGVkVHJhbnNwb3J0O1xufShFcnJvcikpO1xuXG52YXIgVW5zdXBwb3J0ZWRTdHJhdGVneSA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFVuc3VwcG9ydGVkU3RyYXRlZ3ksIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gVW5zdXBwb3J0ZWRTdHJhdGVneShtc2cpIHtcbiAgICAgICAgdmFyIF9uZXdUYXJnZXQgPSB0aGlzLmNvbnN0cnVjdG9yO1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBtc2cpIHx8IHRoaXM7XG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZihfdGhpcywgX25ld1RhcmdldC5wcm90b3R5cGUpO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIHJldHVybiBVbnN1cHBvcnRlZFN0cmF0ZWd5O1xufShFcnJvcikpO1xuXG52YXIgSFRUUEF1dGhFcnJvciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKEhUVFBBdXRoRXJyb3IsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gSFRUUEF1dGhFcnJvcihzdGF0dXMsIG1zZykge1xuICAgICAgICB2YXIgX25ld1RhcmdldCA9IHRoaXMuY29uc3RydWN0b3I7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIG1zZykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuc3RhdHVzID0gc3RhdHVzO1xuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YoX3RoaXMsIF9uZXdUYXJnZXQucHJvdG90eXBlKTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICByZXR1cm4gSFRUUEF1dGhFcnJvcjtcbn0oRXJyb3IpKTtcblxuXG4vLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy9ydW50aW1lcy9pc29tb3JwaGljL2F1dGgveGhyX2F1dGgudHNcblxuXG5cblxudmFyIGFqYXggPSBmdW5jdGlvbiAoY29udGV4dCwgcXVlcnksIGF1dGhPcHRpb25zLCBhdXRoUmVxdWVzdFR5cGUsIGNhbGxiYWNrKSB7XG4gICAgdmFyIHhociA9IHJ1bnRpbWUuY3JlYXRlWEhSKCk7XG4gICAgeGhyLm9wZW4oJ1BPU1QnLCBhdXRoT3B0aW9ucy5lbmRwb2ludCwgdHJ1ZSk7XG4gICAgeGhyLnNldFJlcXVlc3RIZWFkZXIoJ0NvbnRlbnQtVHlwZScsICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnKTtcbiAgICBmb3IgKHZhciBoZWFkZXJOYW1lIGluIGF1dGhPcHRpb25zLmhlYWRlcnMpIHtcbiAgICAgICAgeGhyLnNldFJlcXVlc3RIZWFkZXIoaGVhZGVyTmFtZSwgYXV0aE9wdGlvbnMuaGVhZGVyc1toZWFkZXJOYW1lXSk7XG4gICAgfVxuICAgIGlmIChhdXRoT3B0aW9ucy5oZWFkZXJzUHJvdmlkZXIgIT0gbnVsbCkge1xuICAgICAgICB2YXIgZHluYW1pY0hlYWRlcnMgPSBhdXRoT3B0aW9ucy5oZWFkZXJzUHJvdmlkZXIoKTtcbiAgICAgICAgZm9yICh2YXIgaGVhZGVyTmFtZSBpbiBkeW5hbWljSGVhZGVycykge1xuICAgICAgICAgICAgeGhyLnNldFJlcXVlc3RIZWFkZXIoaGVhZGVyTmFtZSwgZHluYW1pY0hlYWRlcnNbaGVhZGVyTmFtZV0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh4aHIucmVhZHlTdGF0ZSA9PT0gNCkge1xuICAgICAgICAgICAgaWYgKHhoci5zdGF0dXMgPT09IDIwMCkge1xuICAgICAgICAgICAgICAgIHZhciBkYXRhID0gdm9pZCAwO1xuICAgICAgICAgICAgICAgIHZhciBwYXJzZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBkYXRhID0gSlNPTi5wYXJzZSh4aHIucmVzcG9uc2VUZXh0KTtcbiAgICAgICAgICAgICAgICAgICAgcGFyc2VkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2sobmV3IEhUVFBBdXRoRXJyb3IoMjAwLCBcIkpTT04gcmV0dXJuZWQgZnJvbSBcIiArIGF1dGhSZXF1ZXN0VHlwZS50b1N0cmluZygpICsgXCIgZW5kcG9pbnQgd2FzIGludmFsaWQsIHlldCBzdGF0dXMgY29kZSB3YXMgMjAwLiBEYXRhIHdhczogXCIgKyB4aHIucmVzcG9uc2VUZXh0KSwgbnVsbCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChwYXJzZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2sobnVsbCwgZGF0YSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdmFyIHN1ZmZpeCA9ICcnO1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoYXV0aFJlcXVlc3RUeXBlKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgQXV0aFJlcXVlc3RUeXBlLlVzZXJBdXRoZW50aWNhdGlvbjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1ZmZpeCA9IHVybF9zdG9yZS5idWlsZExvZ1N1ZmZpeCgnYXV0aGVudGljYXRpb25FbmRwb2ludCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgQXV0aFJlcXVlc3RUeXBlLkNoYW5uZWxBdXRob3JpemF0aW9uOlxuICAgICAgICAgICAgICAgICAgICAgICAgc3VmZml4ID0gXCJDbGllbnRzIG11c3QgYmUgYXV0aG9yaXplZCB0byBqb2luIHByaXZhdGUgb3IgcHJlc2VuY2UgY2hhbm5lbHMuIFwiICsgdXJsX3N0b3JlLmJ1aWxkTG9nU3VmZml4KCdhdXRob3JpemF0aW9uRW5kcG9pbnQnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYWxsYmFjayhuZXcgSFRUUEF1dGhFcnJvcih4aHIuc3RhdHVzLCBcIlVuYWJsZSB0byByZXRyaWV2ZSBhdXRoIHN0cmluZyBmcm9tIFwiICsgYXV0aFJlcXVlc3RUeXBlLnRvU3RyaW5nKCkgKyBcIiBlbmRwb2ludCAtIFwiICtcbiAgICAgICAgICAgICAgICAgICAgKFwicmVjZWl2ZWQgc3RhdHVzOiBcIiArIHhoci5zdGF0dXMgKyBcIiBmcm9tIFwiICsgYXV0aE9wdGlvbnMuZW5kcG9pbnQgKyBcIi4gXCIgKyBzdWZmaXgpKSwgbnVsbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHhoci5zZW5kKHF1ZXJ5KTtcbiAgICByZXR1cm4geGhyO1xufTtcbi8qIGhhcm1vbnkgZGVmYXVsdCBleHBvcnQgKi8gdmFyIHhocl9hdXRoID0gKGFqYXgpO1xuXG4vLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy9jb3JlL2Jhc2U2NC50c1xuZnVuY3Rpb24gZW5jb2RlKHMpIHtcbiAgICByZXR1cm4gYnRvYSh1dG9iKHMpKTtcbn1cbnZhciBmcm9tQ2hhckNvZGUgPSBTdHJpbmcuZnJvbUNoYXJDb2RlO1xudmFyIGI2NGNoYXJzID0gJ0FCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky8nO1xudmFyIGI2NHRhYiA9IHt9O1xuZm9yICh2YXIgYmFzZTY0X2kgPSAwLCBsID0gYjY0Y2hhcnMubGVuZ3RoOyBiYXNlNjRfaSA8IGw7IGJhc2U2NF9pKyspIHtcbiAgICBiNjR0YWJbYjY0Y2hhcnMuY2hhckF0KGJhc2U2NF9pKV0gPSBiYXNlNjRfaTtcbn1cbnZhciBjYl91dG9iID0gZnVuY3Rpb24gKGMpIHtcbiAgICB2YXIgY2MgPSBjLmNoYXJDb2RlQXQoMCk7XG4gICAgcmV0dXJuIGNjIDwgMHg4MFxuICAgICAgICA/IGNcbiAgICAgICAgOiBjYyA8IDB4ODAwXG4gICAgICAgICAgICA/IGZyb21DaGFyQ29kZSgweGMwIHwgKGNjID4+PiA2KSkgKyBmcm9tQ2hhckNvZGUoMHg4MCB8IChjYyAmIDB4M2YpKVxuICAgICAgICAgICAgOiBmcm9tQ2hhckNvZGUoMHhlMCB8ICgoY2MgPj4+IDEyKSAmIDB4MGYpKSArXG4gICAgICAgICAgICAgICAgZnJvbUNoYXJDb2RlKDB4ODAgfCAoKGNjID4+PiA2KSAmIDB4M2YpKSArXG4gICAgICAgICAgICAgICAgZnJvbUNoYXJDb2RlKDB4ODAgfCAoY2MgJiAweDNmKSk7XG59O1xudmFyIHV0b2IgPSBmdW5jdGlvbiAodSkge1xuICAgIHJldHVybiB1LnJlcGxhY2UoL1teXFx4MDAtXFx4N0ZdL2csIGNiX3V0b2IpO1xufTtcbnZhciBjYl9lbmNvZGUgPSBmdW5jdGlvbiAoY2NjKSB7XG4gICAgdmFyIHBhZGxlbiA9IFswLCAyLCAxXVtjY2MubGVuZ3RoICUgM107XG4gICAgdmFyIG9yZCA9IChjY2MuY2hhckNvZGVBdCgwKSA8PCAxNikgfFxuICAgICAgICAoKGNjYy5sZW5ndGggPiAxID8gY2NjLmNoYXJDb2RlQXQoMSkgOiAwKSA8PCA4KSB8XG4gICAgICAgIChjY2MubGVuZ3RoID4gMiA/IGNjYy5jaGFyQ29kZUF0KDIpIDogMCk7XG4gICAgdmFyIGNoYXJzID0gW1xuICAgICAgICBiNjRjaGFycy5jaGFyQXQob3JkID4+PiAxOCksXG4gICAgICAgIGI2NGNoYXJzLmNoYXJBdCgob3JkID4+PiAxMikgJiA2MyksXG4gICAgICAgIHBhZGxlbiA+PSAyID8gJz0nIDogYjY0Y2hhcnMuY2hhckF0KChvcmQgPj4+IDYpICYgNjMpLFxuICAgICAgICBwYWRsZW4gPj0gMSA/ICc9JyA6IGI2NGNoYXJzLmNoYXJBdChvcmQgJiA2MylcbiAgICBdO1xuICAgIHJldHVybiBjaGFycy5qb2luKCcnKTtcbn07XG52YXIgYnRvYSA9IHdpbmRvdy5idG9hIHx8XG4gICAgZnVuY3Rpb24gKGIpIHtcbiAgICAgICAgcmV0dXJuIGIucmVwbGFjZSgvW1xcc1xcU117MSwzfS9nLCBjYl9lbmNvZGUpO1xuICAgIH07XG5cbi8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL2NvcmUvdXRpbHMvdGltZXJzL2Fic3RyYWN0X3RpbWVyLnRzXG52YXIgVGltZXIgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFRpbWVyKHNldCwgY2xlYXIsIGRlbGF5LCBjYWxsYmFjaykge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB0aGlzLmNsZWFyID0gY2xlYXI7XG4gICAgICAgIHRoaXMudGltZXIgPSBzZXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKF90aGlzLnRpbWVyKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMudGltZXIgPSBjYWxsYmFjayhfdGhpcy50aW1lcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIGRlbGF5KTtcbiAgICB9XG4gICAgVGltZXIucHJvdG90eXBlLmlzUnVubmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudGltZXIgIT09IG51bGw7XG4gICAgfTtcbiAgICBUaW1lci5wcm90b3R5cGUuZW5zdXJlQWJvcnRlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMudGltZXIpIHtcbiAgICAgICAgICAgIHRoaXMuY2xlYXIodGhpcy50aW1lcik7XG4gICAgICAgICAgICB0aGlzLnRpbWVyID0gbnVsbDtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIFRpbWVyO1xufSgpKTtcbi8qIGhhcm1vbnkgZGVmYXVsdCBleHBvcnQgKi8gdmFyIGFic3RyYWN0X3RpbWVyID0gKFRpbWVyKTtcblxuLy8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvY29yZS91dGlscy90aW1lcnMvaW5kZXgudHNcbnZhciB0aW1lcnNfZXh0ZW5kcyA9ICh1bmRlZmluZWQgJiYgdW5kZWZpbmVkLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcbiAgICAgICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcbiAgICAgICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgICAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICB9O1xuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xuXG5mdW5jdGlvbiB0aW1lcnNfY2xlYXJUaW1lb3V0KHRpbWVyKSB7XG4gICAgd2luZG93LmNsZWFyVGltZW91dCh0aW1lcik7XG59XG5mdW5jdGlvbiB0aW1lcnNfY2xlYXJJbnRlcnZhbCh0aW1lcikge1xuICAgIHdpbmRvdy5jbGVhckludGVydmFsKHRpbWVyKTtcbn1cbnZhciBPbmVPZmZUaW1lciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdGltZXJzX2V4dGVuZHMoT25lT2ZmVGltZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gT25lT2ZmVGltZXIoZGVsYXksIGNhbGxiYWNrKSB7XG4gICAgICAgIHJldHVybiBfc3VwZXIuY2FsbCh0aGlzLCBzZXRUaW1lb3V0LCB0aW1lcnNfY2xlYXJUaW1lb3V0LCBkZWxheSwgZnVuY3Rpb24gKHRpbWVyKSB7XG4gICAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH0pIHx8IHRoaXM7XG4gICAgfVxuICAgIHJldHVybiBPbmVPZmZUaW1lcjtcbn0oYWJzdHJhY3RfdGltZXIpKTtcblxudmFyIFBlcmlvZGljVGltZXIgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHRpbWVyc19leHRlbmRzKFBlcmlvZGljVGltZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gUGVyaW9kaWNUaW1lcihkZWxheSwgY2FsbGJhY2spIHtcbiAgICAgICAgcmV0dXJuIF9zdXBlci5jYWxsKHRoaXMsIHNldEludGVydmFsLCB0aW1lcnNfY2xlYXJJbnRlcnZhbCwgZGVsYXksIGZ1bmN0aW9uICh0aW1lcikge1xuICAgICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgICAgIHJldHVybiB0aW1lcjtcbiAgICAgICAgfSkgfHwgdGhpcztcbiAgICB9XG4gICAgcmV0dXJuIFBlcmlvZGljVGltZXI7XG59KGFic3RyYWN0X3RpbWVyKSk7XG5cblxuLy8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvY29yZS91dGlsLnRzXG5cbnZhciBVdGlsID0ge1xuICAgIG5vdzogZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoRGF0ZS5ub3cpIHtcbiAgICAgICAgICAgIHJldHVybiBEYXRlLm5vdygpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBEYXRlKCkudmFsdWVPZigpO1xuICAgICAgICB9XG4gICAgfSxcbiAgICBkZWZlcjogZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgICAgIHJldHVybiBuZXcgT25lT2ZmVGltZXIoMCwgY2FsbGJhY2spO1xuICAgIH0sXG4gICAgbWV0aG9kOiBmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICB2YXIgYXJncyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDE7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgYXJnc1tfaSAtIDFdID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgYm91bmRBcmd1bWVudHMgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKG9iamVjdCkge1xuICAgICAgICAgICAgcmV0dXJuIG9iamVjdFtuYW1lXS5hcHBseShvYmplY3QsIGJvdW5kQXJndW1lbnRzLmNvbmNhdChhcmd1bWVudHMpKTtcbiAgICAgICAgfTtcbiAgICB9XG59O1xuLyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyB2YXIgdXRpbCA9IChVdGlsKTtcblxuLy8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvY29yZS91dGlscy9jb2xsZWN0aW9ucy50c1xuXG5cbmZ1bmN0aW9uIGV4dGVuZCh0YXJnZXQpIHtcbiAgICB2YXIgc291cmNlcyA9IFtdO1xuICAgIGZvciAodmFyIF9pID0gMTsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIHNvdXJjZXNbX2kgLSAxXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgfVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc291cmNlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgZXh0ZW5zaW9ucyA9IHNvdXJjZXNbaV07XG4gICAgICAgIGZvciAodmFyIHByb3BlcnR5IGluIGV4dGVuc2lvbnMpIHtcbiAgICAgICAgICAgIGlmIChleHRlbnNpb25zW3Byb3BlcnR5XSAmJlxuICAgICAgICAgICAgICAgIGV4dGVuc2lvbnNbcHJvcGVydHldLmNvbnN0cnVjdG9yICYmXG4gICAgICAgICAgICAgICAgZXh0ZW5zaW9uc1twcm9wZXJ0eV0uY29uc3RydWN0b3IgPT09IE9iamVjdCkge1xuICAgICAgICAgICAgICAgIHRhcmdldFtwcm9wZXJ0eV0gPSBleHRlbmQodGFyZ2V0W3Byb3BlcnR5XSB8fCB7fSwgZXh0ZW5zaW9uc1twcm9wZXJ0eV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0W3Byb3BlcnR5XSA9IGV4dGVuc2lvbnNbcHJvcGVydHldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0YXJnZXQ7XG59XG5mdW5jdGlvbiBzdHJpbmdpZnkoKSB7XG4gICAgdmFyIG0gPSBbJ1B1c2hlciddO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmICh0eXBlb2YgYXJndW1lbnRzW2ldID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgbS5wdXNoKGFyZ3VtZW50c1tpXSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBtLnB1c2goc2FmZUpTT05TdHJpbmdpZnkoYXJndW1lbnRzW2ldKSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG0uam9pbignIDogJyk7XG59XG5mdW5jdGlvbiBhcnJheUluZGV4T2YoYXJyYXksIGl0ZW0pIHtcbiAgICB2YXIgbmF0aXZlSW5kZXhPZiA9IEFycmF5LnByb3RvdHlwZS5pbmRleE9mO1xuICAgIGlmIChhcnJheSA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gLTE7XG4gICAgfVxuICAgIGlmIChuYXRpdmVJbmRleE9mICYmIGFycmF5LmluZGV4T2YgPT09IG5hdGl2ZUluZGV4T2YpIHtcbiAgICAgICAgcmV0dXJuIGFycmF5LmluZGV4T2YoaXRlbSk7XG4gICAgfVxuICAgIGZvciAodmFyIGkgPSAwLCBsID0gYXJyYXkubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIGlmIChhcnJheVtpXSA9PT0gaXRlbSkge1xuICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIC0xO1xufVxuZnVuY3Rpb24gb2JqZWN0QXBwbHkob2JqZWN0LCBmKSB7XG4gICAgZm9yICh2YXIga2V5IGluIG9iamVjdCkge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KSkge1xuICAgICAgICAgICAgZihvYmplY3Rba2V5XSwga2V5LCBvYmplY3QpO1xuICAgICAgICB9XG4gICAgfVxufVxuZnVuY3Rpb24ga2V5cyhvYmplY3QpIHtcbiAgICB2YXIga2V5cyA9IFtdO1xuICAgIG9iamVjdEFwcGx5KG9iamVjdCwgZnVuY3Rpb24gKF8sIGtleSkge1xuICAgICAgICBrZXlzLnB1c2goa2V5KTtcbiAgICB9KTtcbiAgICByZXR1cm4ga2V5cztcbn1cbmZ1bmN0aW9uIHZhbHVlcyhvYmplY3QpIHtcbiAgICB2YXIgdmFsdWVzID0gW107XG4gICAgb2JqZWN0QXBwbHkob2JqZWN0LCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdmFsdWVzLnB1c2godmFsdWUpO1xuICAgIH0pO1xuICAgIHJldHVybiB2YWx1ZXM7XG59XG5mdW5jdGlvbiBhcHBseShhcnJheSwgZiwgY29udGV4dCkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyYXkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgZi5jYWxsKGNvbnRleHQgfHwgd2luZG93LCBhcnJheVtpXSwgaSwgYXJyYXkpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIG1hcChhcnJheSwgZikge1xuICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFycmF5Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHJlc3VsdC5wdXNoKGYoYXJyYXlbaV0sIGksIGFycmF5LCByZXN1bHQpKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIG1hcE9iamVjdChvYmplY3QsIGYpIHtcbiAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgb2JqZWN0QXBwbHkob2JqZWN0LCBmdW5jdGlvbiAodmFsdWUsIGtleSkge1xuICAgICAgICByZXN1bHRba2V5XSA9IGYodmFsdWUpO1xuICAgIH0pO1xuICAgIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBmaWx0ZXIoYXJyYXksIHRlc3QpIHtcbiAgICB0ZXN0ID1cbiAgICAgICAgdGVzdCB8fFxuICAgICAgICAgICAgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICEhdmFsdWU7XG4gICAgICAgICAgICB9O1xuICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFycmF5Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmICh0ZXN0KGFycmF5W2ldLCBpLCBhcnJheSwgcmVzdWx0KSkge1xuICAgICAgICAgICAgcmVzdWx0LnB1c2goYXJyYXlbaV0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBmaWx0ZXJPYmplY3Qob2JqZWN0LCB0ZXN0KSB7XG4gICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgIG9iamVjdEFwcGx5KG9iamVjdCwgZnVuY3Rpb24gKHZhbHVlLCBrZXkpIHtcbiAgICAgICAgaWYgKCh0ZXN0ICYmIHRlc3QodmFsdWUsIGtleSwgb2JqZWN0LCByZXN1bHQpKSB8fCBCb29sZWFuKHZhbHVlKSkge1xuICAgICAgICAgICAgcmVzdWx0W2tleV0gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBmbGF0dGVuKG9iamVjdCkge1xuICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICBvYmplY3RBcHBseShvYmplY3QsIGZ1bmN0aW9uICh2YWx1ZSwga2V5KSB7XG4gICAgICAgIHJlc3VsdC5wdXNoKFtrZXksIHZhbHVlXSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIGFueShhcnJheSwgdGVzdCkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyYXkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKHRlc3QoYXJyYXlbaV0sIGksIGFycmF5KSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuZnVuY3Rpb24gY29sbGVjdGlvbnNfYWxsKGFycmF5LCB0ZXN0KSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnJheS5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoIXRlc3QoYXJyYXlbaV0sIGksIGFycmF5KSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufVxuZnVuY3Rpb24gZW5jb2RlUGFyYW1zT2JqZWN0KGRhdGEpIHtcbiAgICByZXR1cm4gbWFwT2JqZWN0KGRhdGEsIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgdmFsdWUgPSBzYWZlSlNPTlN0cmluZ2lmeSh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudChlbmNvZGUodmFsdWUudG9TdHJpbmcoKSkpO1xuICAgIH0pO1xufVxuZnVuY3Rpb24gYnVpbGRRdWVyeVN0cmluZyhkYXRhKSB7XG4gICAgdmFyIHBhcmFtcyA9IGZpbHRlck9iamVjdChkYXRhLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlICE9PSB1bmRlZmluZWQ7XG4gICAgfSk7XG4gICAgdmFyIHF1ZXJ5ID0gbWFwKGZsYXR0ZW4oZW5jb2RlUGFyYW1zT2JqZWN0KHBhcmFtcykpLCB1dGlsLm1ldGhvZCgnam9pbicsICc9JykpLmpvaW4oJyYnKTtcbiAgICByZXR1cm4gcXVlcnk7XG59XG5mdW5jdGlvbiBkZWN5Y2xlT2JqZWN0KG9iamVjdCkge1xuICAgIHZhciBvYmplY3RzID0gW10sIHBhdGhzID0gW107XG4gICAgcmV0dXJuIChmdW5jdGlvbiBkZXJleih2YWx1ZSwgcGF0aCkge1xuICAgICAgICB2YXIgaSwgbmFtZSwgbnU7XG4gICAgICAgIHN3aXRjaCAodHlwZW9mIHZhbHVlKSB7XG4gICAgICAgICAgICBjYXNlICdvYmplY3QnOlxuICAgICAgICAgICAgICAgIGlmICghdmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBvYmplY3RzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChvYmplY3RzW2ldID09PSB2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgJHJlZjogcGF0aHNbaV0gfTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBvYmplY3RzLnB1c2godmFsdWUpO1xuICAgICAgICAgICAgICAgIHBhdGhzLnB1c2gocGF0aCk7XG4gICAgICAgICAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuYXBwbHkodmFsdWUpID09PSAnW29iamVjdCBBcnJheV0nKSB7XG4gICAgICAgICAgICAgICAgICAgIG51ID0gW107XG4gICAgICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCB2YWx1ZS5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbnVbaV0gPSBkZXJleih2YWx1ZVtpXSwgcGF0aCArICdbJyArIGkgKyAnXScpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBudSA9IHt9O1xuICAgICAgICAgICAgICAgICAgICBmb3IgKG5hbWUgaW4gdmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodmFsdWUsIG5hbWUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbnVbbmFtZV0gPSBkZXJleih2YWx1ZVtuYW1lXSwgcGF0aCArICdbJyArIEpTT04uc3RyaW5naWZ5KG5hbWUpICsgJ10nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gbnU7XG4gICAgICAgICAgICBjYXNlICdudW1iZXInOlxuICAgICAgICAgICAgY2FzZSAnc3RyaW5nJzpcbiAgICAgICAgICAgIGNhc2UgJ2Jvb2xlYW4nOlxuICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgfVxuICAgIH0pKG9iamVjdCwgJyQnKTtcbn1cbmZ1bmN0aW9uIHNhZmVKU09OU3RyaW5naWZ5KHNvdXJjZSkge1xuICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShzb3VyY2UpO1xuICAgIH1cbiAgICBjYXRjaCAoZSkge1xuICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoZGVjeWNsZU9iamVjdChzb3VyY2UpKTtcbiAgICB9XG59XG5cbi8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL2NvcmUvbG9nZ2VyLnRzXG5cblxudmFyIGxvZ2dlcl9Mb2dnZXIgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIExvZ2dlcigpIHtcbiAgICAgICAgdGhpcy5nbG9iYWxMb2cgPSBmdW5jdGlvbiAobWVzc2FnZSkge1xuICAgICAgICAgICAgaWYgKHdpbmRvdy5jb25zb2xlICYmIHdpbmRvdy5jb25zb2xlLmxvZykge1xuICAgICAgICAgICAgICAgIHdpbmRvdy5jb25zb2xlLmxvZyhtZXNzYWdlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XG4gICAgTG9nZ2VyLnByb3RvdHlwZS5kZWJ1ZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmxvZyh0aGlzLmdsb2JhbExvZywgYXJncyk7XG4gICAgfTtcbiAgICBMb2dnZXIucHJvdG90eXBlLndhcm4gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBhcmdzID0gW107XG4gICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5sb2codGhpcy5nbG9iYWxMb2dXYXJuLCBhcmdzKTtcbiAgICB9O1xuICAgIExvZ2dlci5wcm90b3R5cGUuZXJyb3IgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBhcmdzID0gW107XG4gICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5sb2codGhpcy5nbG9iYWxMb2dFcnJvciwgYXJncyk7XG4gICAgfTtcbiAgICBMb2dnZXIucHJvdG90eXBlLmdsb2JhbExvZ1dhcm4gPSBmdW5jdGlvbiAobWVzc2FnZSkge1xuICAgICAgICBpZiAod2luZG93LmNvbnNvbGUgJiYgd2luZG93LmNvbnNvbGUud2Fybikge1xuICAgICAgICAgICAgd2luZG93LmNvbnNvbGUud2FybihtZXNzYWdlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuZ2xvYmFsTG9nKG1lc3NhZ2UpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBMb2dnZXIucHJvdG90eXBlLmdsb2JhbExvZ0Vycm9yID0gZnVuY3Rpb24gKG1lc3NhZ2UpIHtcbiAgICAgICAgaWYgKHdpbmRvdy5jb25zb2xlICYmIHdpbmRvdy5jb25zb2xlLmVycm9yKSB7XG4gICAgICAgICAgICB3aW5kb3cuY29uc29sZS5lcnJvcihtZXNzYWdlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuZ2xvYmFsTG9nV2FybihtZXNzYWdlKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgTG9nZ2VyLnByb3RvdHlwZS5sb2cgPSBmdW5jdGlvbiAoZGVmYXVsdExvZ2dpbmdGdW5jdGlvbikge1xuICAgICAgICB2YXIgYXJncyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDE7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgYXJnc1tfaSAtIDFdID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgbWVzc2FnZSA9IHN0cmluZ2lmeS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICBpZiAoY29yZV9wdXNoZXIubG9nKSB7XG4gICAgICAgICAgICBjb3JlX3B1c2hlci5sb2cobWVzc2FnZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoY29yZV9wdXNoZXIubG9nVG9Db25zb2xlKSB7XG4gICAgICAgICAgICB2YXIgbG9nID0gZGVmYXVsdExvZ2dpbmdGdW5jdGlvbi5iaW5kKHRoaXMpO1xuICAgICAgICAgICAgbG9nKG1lc3NhZ2UpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gTG9nZ2VyO1xufSgpKTtcbi8qIGhhcm1vbnkgZGVmYXVsdCBleHBvcnQgKi8gdmFyIGxvZ2dlciA9IChuZXcgbG9nZ2VyX0xvZ2dlcigpKTtcblxuLy8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvcnVudGltZXMvd2ViL2F1dGgvanNvbnBfYXV0aC50c1xuXG52YXIganNvbnAgPSBmdW5jdGlvbiAoY29udGV4dCwgcXVlcnksIGF1dGhPcHRpb25zLCBhdXRoUmVxdWVzdFR5cGUsIGNhbGxiYWNrKSB7XG4gICAgaWYgKGF1dGhPcHRpb25zLmhlYWRlcnMgIT09IHVuZGVmaW5lZCB8fFxuICAgICAgICBhdXRoT3B0aW9ucy5oZWFkZXJzUHJvdmlkZXIgIT0gbnVsbCkge1xuICAgICAgICBsb2dnZXIud2FybihcIlRvIHNlbmQgaGVhZGVycyB3aXRoIHRoZSBcIiArIGF1dGhSZXF1ZXN0VHlwZS50b1N0cmluZygpICsgXCIgcmVxdWVzdCwgeW91IG11c3QgdXNlIEFKQVgsIHJhdGhlciB0aGFuIEpTT05QLlwiKTtcbiAgICB9XG4gICAgdmFyIGNhbGxiYWNrTmFtZSA9IGNvbnRleHQubmV4dEF1dGhDYWxsYmFja0lELnRvU3RyaW5nKCk7XG4gICAgY29udGV4dC5uZXh0QXV0aENhbGxiYWNrSUQrKztcbiAgICB2YXIgZG9jdW1lbnQgPSBjb250ZXh0LmdldERvY3VtZW50KCk7XG4gICAgdmFyIHNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpO1xuICAgIGNvbnRleHQuYXV0aF9jYWxsYmFja3NbY2FsbGJhY2tOYW1lXSA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgIGNhbGxiYWNrKG51bGwsIGRhdGEpO1xuICAgIH07XG4gICAgdmFyIGNhbGxiYWNrX25hbWUgPSBcIlB1c2hlci5hdXRoX2NhbGxiYWNrc1snXCIgKyBjYWxsYmFja05hbWUgKyBcIiddXCI7XG4gICAgc2NyaXB0LnNyYyA9XG4gICAgICAgIGF1dGhPcHRpb25zLmVuZHBvaW50ICtcbiAgICAgICAgICAgICc/Y2FsbGJhY2s9JyArXG4gICAgICAgICAgICBlbmNvZGVVUklDb21wb25lbnQoY2FsbGJhY2tfbmFtZSkgK1xuICAgICAgICAgICAgJyYnICtcbiAgICAgICAgICAgIHF1ZXJ5O1xuICAgIHZhciBoZWFkID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2hlYWQnKVswXSB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gICAgaGVhZC5pbnNlcnRCZWZvcmUoc2NyaXB0LCBoZWFkLmZpcnN0Q2hpbGQpO1xufTtcbi8qIGhhcm1vbnkgZGVmYXVsdCBleHBvcnQgKi8gdmFyIGpzb25wX2F1dGggPSAoanNvbnApO1xuXG4vLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy9ydW50aW1lcy93ZWIvZG9tL3NjcmlwdF9yZXF1ZXN0LnRzXG52YXIgU2NyaXB0UmVxdWVzdCA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gU2NyaXB0UmVxdWVzdChzcmMpIHtcbiAgICAgICAgdGhpcy5zcmMgPSBzcmM7XG4gICAgfVxuICAgIFNjcmlwdFJlcXVlc3QucHJvdG90eXBlLnNlbmQgPSBmdW5jdGlvbiAocmVjZWl2ZXIpIHtcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICB2YXIgZXJyb3JTdHJpbmcgPSAnRXJyb3IgbG9hZGluZyAnICsgc2VsZi5zcmM7XG4gICAgICAgIHNlbGYuc2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XG4gICAgICAgIHNlbGYuc2NyaXB0LmlkID0gcmVjZWl2ZXIuaWQ7XG4gICAgICAgIHNlbGYuc2NyaXB0LnNyYyA9IHNlbGYuc3JjO1xuICAgICAgICBzZWxmLnNjcmlwdC50eXBlID0gJ3RleHQvamF2YXNjcmlwdCc7XG4gICAgICAgIHNlbGYuc2NyaXB0LmNoYXJzZXQgPSAnVVRGLTgnO1xuICAgICAgICBpZiAoc2VsZi5zY3JpcHQuYWRkRXZlbnRMaXN0ZW5lcikge1xuICAgICAgICAgICAgc2VsZi5zY3JpcHQub25lcnJvciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZWNlaXZlci5jYWxsYmFjayhlcnJvclN0cmluZyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgc2VsZi5zY3JpcHQub25sb2FkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJlY2VpdmVyLmNhbGxiYWNrKG51bGwpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHNlbGYuc2NyaXB0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBpZiAoc2VsZi5zY3JpcHQucmVhZHlTdGF0ZSA9PT0gJ2xvYWRlZCcgfHxcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5zY3JpcHQucmVhZHlTdGF0ZSA9PT0gJ2NvbXBsZXRlJykge1xuICAgICAgICAgICAgICAgICAgICByZWNlaXZlci5jYWxsYmFjayhudWxsKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGlmIChzZWxmLnNjcmlwdC5hc3luYyA9PT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICBkb2N1bWVudC5hdHRhY2hFdmVudCAmJlxuICAgICAgICAgICAgL29wZXJhL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSkge1xuICAgICAgICAgICAgc2VsZi5lcnJvclNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpO1xuICAgICAgICAgICAgc2VsZi5lcnJvclNjcmlwdC5pZCA9IHJlY2VpdmVyLmlkICsgJ19lcnJvcic7XG4gICAgICAgICAgICBzZWxmLmVycm9yU2NyaXB0LnRleHQgPSByZWNlaXZlci5uYW1lICsgXCIoJ1wiICsgZXJyb3JTdHJpbmcgKyBcIicpO1wiO1xuICAgICAgICAgICAgc2VsZi5zY3JpcHQuYXN5bmMgPSBzZWxmLmVycm9yU2NyaXB0LmFzeW5jID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBzZWxmLnNjcmlwdC5hc3luYyA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGhlYWQgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaGVhZCcpWzBdO1xuICAgICAgICBoZWFkLmluc2VydEJlZm9yZShzZWxmLnNjcmlwdCwgaGVhZC5maXJzdENoaWxkKTtcbiAgICAgICAgaWYgKHNlbGYuZXJyb3JTY3JpcHQpIHtcbiAgICAgICAgICAgIGhlYWQuaW5zZXJ0QmVmb3JlKHNlbGYuZXJyb3JTY3JpcHQsIHNlbGYuc2NyaXB0Lm5leHRTaWJsaW5nKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgU2NyaXB0UmVxdWVzdC5wcm90b3R5cGUuY2xlYW51cCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuc2NyaXB0KSB7XG4gICAgICAgICAgICB0aGlzLnNjcmlwdC5vbmxvYWQgPSB0aGlzLnNjcmlwdC5vbmVycm9yID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMuc2NyaXB0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuc2NyaXB0ICYmIHRoaXMuc2NyaXB0LnBhcmVudE5vZGUpIHtcbiAgICAgICAgICAgIHRoaXMuc2NyaXB0LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcy5zY3JpcHQpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmVycm9yU2NyaXB0ICYmIHRoaXMuZXJyb3JTY3JpcHQucGFyZW50Tm9kZSkge1xuICAgICAgICAgICAgdGhpcy5lcnJvclNjcmlwdC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMuZXJyb3JTY3JpcHQpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc2NyaXB0ID0gbnVsbDtcbiAgICAgICAgdGhpcy5lcnJvclNjcmlwdCA9IG51bGw7XG4gICAgfTtcbiAgICByZXR1cm4gU2NyaXB0UmVxdWVzdDtcbn0oKSk7XG4vKiBoYXJtb255IGRlZmF1bHQgZXhwb3J0ICovIHZhciBzY3JpcHRfcmVxdWVzdCA9IChTY3JpcHRSZXF1ZXN0KTtcblxuLy8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvcnVudGltZXMvd2ViL2RvbS9qc29ucF9yZXF1ZXN0LnRzXG5cblxudmFyIGpzb25wX3JlcXVlc3RfSlNPTlBSZXF1ZXN0ID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBKU09OUFJlcXVlc3QodXJsLCBkYXRhKSB7XG4gICAgICAgIHRoaXMudXJsID0gdXJsO1xuICAgICAgICB0aGlzLmRhdGEgPSBkYXRhO1xuICAgIH1cbiAgICBKU09OUFJlcXVlc3QucHJvdG90eXBlLnNlbmQgPSBmdW5jdGlvbiAocmVjZWl2ZXIpIHtcbiAgICAgICAgaWYgKHRoaXMucmVxdWVzdCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBxdWVyeSA9IGJ1aWxkUXVlcnlTdHJpbmcodGhpcy5kYXRhKTtcbiAgICAgICAgdmFyIHVybCA9IHRoaXMudXJsICsgJy8nICsgcmVjZWl2ZXIubnVtYmVyICsgJz8nICsgcXVlcnk7XG4gICAgICAgIHRoaXMucmVxdWVzdCA9IHJ1bnRpbWUuY3JlYXRlU2NyaXB0UmVxdWVzdCh1cmwpO1xuICAgICAgICB0aGlzLnJlcXVlc3Quc2VuZChyZWNlaXZlcik7XG4gICAgfTtcbiAgICBKU09OUFJlcXVlc3QucHJvdG90eXBlLmNsZWFudXAgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLnJlcXVlc3QpIHtcbiAgICAgICAgICAgIHRoaXMucmVxdWVzdC5jbGVhbnVwKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBKU09OUFJlcXVlc3Q7XG59KCkpO1xuLyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyB2YXIganNvbnBfcmVxdWVzdCA9IChqc29ucF9yZXF1ZXN0X0pTT05QUmVxdWVzdCk7XG5cbi8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL3J1bnRpbWVzL3dlYi90aW1lbGluZS9qc29ucF90aW1lbGluZS50c1xuXG5cbnZhciBnZXRBZ2VudCA9IGZ1bmN0aW9uIChzZW5kZXIsIHVzZVRMUykge1xuICAgIHJldHVybiBmdW5jdGlvbiAoZGF0YSwgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIHNjaGVtZSA9ICdodHRwJyArICh1c2VUTFMgPyAncycgOiAnJykgKyAnOi8vJztcbiAgICAgICAgdmFyIHVybCA9IHNjaGVtZSArIChzZW5kZXIuaG9zdCB8fCBzZW5kZXIub3B0aW9ucy5ob3N0KSArIHNlbmRlci5vcHRpb25zLnBhdGg7XG4gICAgICAgIHZhciByZXF1ZXN0ID0gcnVudGltZS5jcmVhdGVKU09OUFJlcXVlc3QodXJsLCBkYXRhKTtcbiAgICAgICAgdmFyIHJlY2VpdmVyID0gcnVudGltZS5TY3JpcHRSZWNlaXZlcnMuY3JlYXRlKGZ1bmN0aW9uIChlcnJvciwgcmVzdWx0KSB7XG4gICAgICAgICAgICBTY3JpcHRSZWNlaXZlcnMucmVtb3ZlKHJlY2VpdmVyKTtcbiAgICAgICAgICAgIHJlcXVlc3QuY2xlYW51cCgpO1xuICAgICAgICAgICAgaWYgKHJlc3VsdCAmJiByZXN1bHQuaG9zdCkge1xuICAgICAgICAgICAgICAgIHNlbmRlci5ob3N0ID0gcmVzdWx0Lmhvc3Q7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjayhlcnJvciwgcmVzdWx0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJlcXVlc3Quc2VuZChyZWNlaXZlcik7XG4gICAgfTtcbn07XG52YXIganNvbnBfdGltZWxpbmVfanNvbnAgPSB7XG4gICAgbmFtZTogJ2pzb25wJyxcbiAgICBnZXRBZ2VudDogZ2V0QWdlbnRcbn07XG4vKiBoYXJtb255IGRlZmF1bHQgZXhwb3J0ICovIHZhciBqc29ucF90aW1lbGluZSA9IChqc29ucF90aW1lbGluZV9qc29ucCk7XG5cbi8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL2NvcmUvdHJhbnNwb3J0cy91cmxfc2NoZW1lcy50c1xuXG5mdW5jdGlvbiBnZXRHZW5lcmljVVJMKGJhc2VTY2hlbWUsIHBhcmFtcywgcGF0aCkge1xuICAgIHZhciBzY2hlbWUgPSBiYXNlU2NoZW1lICsgKHBhcmFtcy51c2VUTFMgPyAncycgOiAnJyk7XG4gICAgdmFyIGhvc3QgPSBwYXJhbXMudXNlVExTID8gcGFyYW1zLmhvc3RUTFMgOiBwYXJhbXMuaG9zdE5vblRMUztcbiAgICByZXR1cm4gc2NoZW1lICsgJzovLycgKyBob3N0ICsgcGF0aDtcbn1cbmZ1bmN0aW9uIGdldEdlbmVyaWNQYXRoKGtleSwgcXVlcnlTdHJpbmcpIHtcbiAgICB2YXIgcGF0aCA9ICcvYXBwLycgKyBrZXk7XG4gICAgdmFyIHF1ZXJ5ID0gJz9wcm90b2NvbD0nICtcbiAgICAgICAgZGVmYXVsdHMuUFJPVE9DT0wgK1xuICAgICAgICAnJmNsaWVudD1qcycgK1xuICAgICAgICAnJnZlcnNpb249JyArXG4gICAgICAgIGRlZmF1bHRzLlZFUlNJT04gK1xuICAgICAgICAocXVlcnlTdHJpbmcgPyAnJicgKyBxdWVyeVN0cmluZyA6ICcnKTtcbiAgICByZXR1cm4gcGF0aCArIHF1ZXJ5O1xufVxudmFyIHdzID0ge1xuICAgIGdldEluaXRpYWw6IGZ1bmN0aW9uIChrZXksIHBhcmFtcykge1xuICAgICAgICB2YXIgcGF0aCA9IChwYXJhbXMuaHR0cFBhdGggfHwgJycpICsgZ2V0R2VuZXJpY1BhdGgoa2V5LCAnZmxhc2g9ZmFsc2UnKTtcbiAgICAgICAgcmV0dXJuIGdldEdlbmVyaWNVUkwoJ3dzJywgcGFyYW1zLCBwYXRoKTtcbiAgICB9XG59O1xudmFyIGh0dHAgPSB7XG4gICAgZ2V0SW5pdGlhbDogZnVuY3Rpb24gKGtleSwgcGFyYW1zKSB7XG4gICAgICAgIHZhciBwYXRoID0gKHBhcmFtcy5odHRwUGF0aCB8fCAnL3B1c2hlcicpICsgZ2V0R2VuZXJpY1BhdGgoa2V5KTtcbiAgICAgICAgcmV0dXJuIGdldEdlbmVyaWNVUkwoJ2h0dHAnLCBwYXJhbXMsIHBhdGgpO1xuICAgIH1cbn07XG52YXIgc29ja2pzID0ge1xuICAgIGdldEluaXRpYWw6IGZ1bmN0aW9uIChrZXksIHBhcmFtcykge1xuICAgICAgICByZXR1cm4gZ2V0R2VuZXJpY1VSTCgnaHR0cCcsIHBhcmFtcywgcGFyYW1zLmh0dHBQYXRoIHx8ICcvcHVzaGVyJyk7XG4gICAgfSxcbiAgICBnZXRQYXRoOiBmdW5jdGlvbiAoa2V5LCBwYXJhbXMpIHtcbiAgICAgICAgcmV0dXJuIGdldEdlbmVyaWNQYXRoKGtleSk7XG4gICAgfVxufTtcblxuLy8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvY29yZS9ldmVudHMvY2FsbGJhY2tfcmVnaXN0cnkudHNcblxudmFyIGNhbGxiYWNrX3JlZ2lzdHJ5X0NhbGxiYWNrUmVnaXN0cnkgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIENhbGxiYWNrUmVnaXN0cnkoKSB7XG4gICAgICAgIHRoaXMuX2NhbGxiYWNrcyA9IHt9O1xuICAgIH1cbiAgICBDYWxsYmFja1JlZ2lzdHJ5LnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2FsbGJhY2tzW3ByZWZpeChuYW1lKV07XG4gICAgfTtcbiAgICBDYWxsYmFja1JlZ2lzdHJ5LnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiAobmFtZSwgY2FsbGJhY2ssIGNvbnRleHQpIHtcbiAgICAgICAgdmFyIHByZWZpeGVkRXZlbnROYW1lID0gcHJlZml4KG5hbWUpO1xuICAgICAgICB0aGlzLl9jYWxsYmFja3NbcHJlZml4ZWRFdmVudE5hbWVdID1cbiAgICAgICAgICAgIHRoaXMuX2NhbGxiYWNrc1twcmVmaXhlZEV2ZW50TmFtZV0gfHwgW107XG4gICAgICAgIHRoaXMuX2NhbGxiYWNrc1twcmVmaXhlZEV2ZW50TmFtZV0ucHVzaCh7XG4gICAgICAgICAgICBmbjogY2FsbGJhY2ssXG4gICAgICAgICAgICBjb250ZXh0OiBjb250ZXh0XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgQ2FsbGJhY2tSZWdpc3RyeS5wcm90b3R5cGUucmVtb3ZlID0gZnVuY3Rpb24gKG5hbWUsIGNhbGxiYWNrLCBjb250ZXh0KSB7XG4gICAgICAgIGlmICghbmFtZSAmJiAhY2FsbGJhY2sgJiYgIWNvbnRleHQpIHtcbiAgICAgICAgICAgIHRoaXMuX2NhbGxiYWNrcyA9IHt9O1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBuYW1lcyA9IG5hbWUgPyBbcHJlZml4KG5hbWUpXSA6IGtleXModGhpcy5fY2FsbGJhY2tzKTtcbiAgICAgICAgaWYgKGNhbGxiYWNrIHx8IGNvbnRleHQpIHtcbiAgICAgICAgICAgIHRoaXMucmVtb3ZlQ2FsbGJhY2sobmFtZXMsIGNhbGxiYWNrLCBjb250ZXh0KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMucmVtb3ZlQWxsQ2FsbGJhY2tzKG5hbWVzKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgQ2FsbGJhY2tSZWdpc3RyeS5wcm90b3R5cGUucmVtb3ZlQ2FsbGJhY2sgPSBmdW5jdGlvbiAobmFtZXMsIGNhbGxiYWNrLCBjb250ZXh0KSB7XG4gICAgICAgIGFwcGx5KG5hbWVzLCBmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICAgICAgdGhpcy5fY2FsbGJhY2tzW25hbWVdID0gZmlsdGVyKHRoaXMuX2NhbGxiYWNrc1tuYW1lXSB8fCBbXSwgZnVuY3Rpb24gKGJpbmRpbmcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKChjYWxsYmFjayAmJiBjYWxsYmFjayAhPT0gYmluZGluZy5mbikgfHxcbiAgICAgICAgICAgICAgICAgICAgKGNvbnRleHQgJiYgY29udGV4dCAhPT0gYmluZGluZy5jb250ZXh0KSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmICh0aGlzLl9jYWxsYmFja3NbbmFtZV0ubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMuX2NhbGxiYWNrc1tuYW1lXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgdGhpcyk7XG4gICAgfTtcbiAgICBDYWxsYmFja1JlZ2lzdHJ5LnByb3RvdHlwZS5yZW1vdmVBbGxDYWxsYmFja3MgPSBmdW5jdGlvbiAobmFtZXMpIHtcbiAgICAgICAgYXBwbHkobmFtZXMsIGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgICAgICBkZWxldGUgdGhpcy5fY2FsbGJhY2tzW25hbWVdO1xuICAgICAgICB9LCB0aGlzKTtcbiAgICB9O1xuICAgIHJldHVybiBDYWxsYmFja1JlZ2lzdHJ5O1xufSgpKTtcbi8qIGhhcm1vbnkgZGVmYXVsdCBleHBvcnQgKi8gdmFyIGNhbGxiYWNrX3JlZ2lzdHJ5ID0gKGNhbGxiYWNrX3JlZ2lzdHJ5X0NhbGxiYWNrUmVnaXN0cnkpO1xuZnVuY3Rpb24gcHJlZml4KG5hbWUpIHtcbiAgICByZXR1cm4gJ18nICsgbmFtZTtcbn1cblxuLy8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvY29yZS9ldmVudHMvZGlzcGF0Y2hlci50c1xuXG5cbnZhciBkaXNwYXRjaGVyX0Rpc3BhdGNoZXIgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIERpc3BhdGNoZXIoZmFpbFRocm91Z2gpIHtcbiAgICAgICAgdGhpcy5jYWxsYmFja3MgPSBuZXcgY2FsbGJhY2tfcmVnaXN0cnkoKTtcbiAgICAgICAgdGhpcy5nbG9iYWxfY2FsbGJhY2tzID0gW107XG4gICAgICAgIHRoaXMuZmFpbFRocm91Z2ggPSBmYWlsVGhyb3VnaDtcbiAgICB9XG4gICAgRGlzcGF0Y2hlci5wcm90b3R5cGUuYmluZCA9IGZ1bmN0aW9uIChldmVudE5hbWUsIGNhbGxiYWNrLCBjb250ZXh0KSB7XG4gICAgICAgIHRoaXMuY2FsbGJhY2tzLmFkZChldmVudE5hbWUsIGNhbGxiYWNrLCBjb250ZXh0KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICBEaXNwYXRjaGVyLnByb3RvdHlwZS5iaW5kX2dsb2JhbCA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgICAgICB0aGlzLmdsb2JhbF9jYWxsYmFja3MucHVzaChjYWxsYmFjayk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgRGlzcGF0Y2hlci5wcm90b3R5cGUudW5iaW5kID0gZnVuY3Rpb24gKGV2ZW50TmFtZSwgY2FsbGJhY2ssIGNvbnRleHQpIHtcbiAgICAgICAgdGhpcy5jYWxsYmFja3MucmVtb3ZlKGV2ZW50TmFtZSwgY2FsbGJhY2ssIGNvbnRleHQpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIERpc3BhdGNoZXIucHJvdG90eXBlLnVuYmluZF9nbG9iYWwgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICAgICAgaWYgKCFjYWxsYmFjaykge1xuICAgICAgICAgICAgdGhpcy5nbG9iYWxfY2FsbGJhY2tzID0gW107XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmdsb2JhbF9jYWxsYmFja3MgPSBmaWx0ZXIodGhpcy5nbG9iYWxfY2FsbGJhY2tzIHx8IFtdLCBmdW5jdGlvbiAoYykgeyByZXR1cm4gYyAhPT0gY2FsbGJhY2s7IH0pO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIERpc3BhdGNoZXIucHJvdG90eXBlLnVuYmluZF9hbGwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMudW5iaW5kKCk7XG4gICAgICAgIHRoaXMudW5iaW5kX2dsb2JhbCgpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIERpc3BhdGNoZXIucHJvdG90eXBlLmVtaXQgPSBmdW5jdGlvbiAoZXZlbnROYW1lLCBkYXRhLCBtZXRhZGF0YSkge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuZ2xvYmFsX2NhbGxiYWNrcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdGhpcy5nbG9iYWxfY2FsbGJhY2tzW2ldKGV2ZW50TmFtZSwgZGF0YSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGNhbGxiYWNrcyA9IHRoaXMuY2FsbGJhY2tzLmdldChldmVudE5hbWUpO1xuICAgICAgICB2YXIgYXJncyA9IFtdO1xuICAgICAgICBpZiAobWV0YWRhdGEpIHtcbiAgICAgICAgICAgIGFyZ3MucHVzaChkYXRhLCBtZXRhZGF0YSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoZGF0YSkge1xuICAgICAgICAgICAgYXJncy5wdXNoKGRhdGEpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjYWxsYmFja3MgJiYgY2FsbGJhY2tzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2FsbGJhY2tzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2tzW2ldLmZuLmFwcGx5KGNhbGxiYWNrc1tpXS5jb250ZXh0IHx8IHdpbmRvdywgYXJncyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy5mYWlsVGhyb3VnaCkge1xuICAgICAgICAgICAgdGhpcy5mYWlsVGhyb3VnaChldmVudE5hbWUsIGRhdGEpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgcmV0dXJuIERpc3BhdGNoZXI7XG59KCkpO1xuLyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyB2YXIgZGlzcGF0Y2hlciA9IChkaXNwYXRjaGVyX0Rpc3BhdGNoZXIpO1xuXG4vLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy9jb3JlL3RyYW5zcG9ydHMvdHJhbnNwb3J0X2Nvbm5lY3Rpb24udHNcbnZhciB0cmFuc3BvcnRfY29ubmVjdGlvbl9leHRlbmRzID0gKHVuZGVmaW5lZCAmJiB1bmRlZmluZWQuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgIH07XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbn0pKCk7XG5cblxuXG5cblxudmFyIHRyYW5zcG9ydF9jb25uZWN0aW9uX1RyYW5zcG9ydENvbm5lY3Rpb24gPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHRyYW5zcG9ydF9jb25uZWN0aW9uX2V4dGVuZHMoVHJhbnNwb3J0Q29ubmVjdGlvbiwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBUcmFuc3BvcnRDb25uZWN0aW9uKGhvb2tzLCBuYW1lLCBwcmlvcml0eSwga2V5LCBvcHRpb25zKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLmluaXRpYWxpemUgPSBydW50aW1lLnRyYW5zcG9ydENvbm5lY3Rpb25Jbml0aWFsaXplcjtcbiAgICAgICAgX3RoaXMuaG9va3MgPSBob29rcztcbiAgICAgICAgX3RoaXMubmFtZSA9IG5hbWU7XG4gICAgICAgIF90aGlzLnByaW9yaXR5ID0gcHJpb3JpdHk7XG4gICAgICAgIF90aGlzLmtleSA9IGtleTtcbiAgICAgICAgX3RoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgICAgIF90aGlzLnN0YXRlID0gJ25ldyc7XG4gICAgICAgIF90aGlzLnRpbWVsaW5lID0gb3B0aW9ucy50aW1lbGluZTtcbiAgICAgICAgX3RoaXMuYWN0aXZpdHlUaW1lb3V0ID0gb3B0aW9ucy5hY3Rpdml0eVRpbWVvdXQ7XG4gICAgICAgIF90aGlzLmlkID0gX3RoaXMudGltZWxpbmUuZ2VuZXJhdGVVbmlxdWVJRCgpO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIFRyYW5zcG9ydENvbm5lY3Rpb24ucHJvdG90eXBlLmhhbmRsZXNBY3Rpdml0eUNoZWNrcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIEJvb2xlYW4odGhpcy5ob29rcy5oYW5kbGVzQWN0aXZpdHlDaGVja3MpO1xuICAgIH07XG4gICAgVHJhbnNwb3J0Q29ubmVjdGlvbi5wcm90b3R5cGUuc3VwcG9ydHNQaW5nID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gQm9vbGVhbih0aGlzLmhvb2tzLnN1cHBvcnRzUGluZyk7XG4gICAgfTtcbiAgICBUcmFuc3BvcnRDb25uZWN0aW9uLnByb3RvdHlwZS5jb25uZWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBpZiAodGhpcy5zb2NrZXQgfHwgdGhpcy5zdGF0ZSAhPT0gJ2luaXRpYWxpemVkJykge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHZhciB1cmwgPSB0aGlzLmhvb2tzLnVybHMuZ2V0SW5pdGlhbCh0aGlzLmtleSwgdGhpcy5vcHRpb25zKTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHRoaXMuc29ja2V0ID0gdGhpcy5ob29rcy5nZXRTb2NrZXQodXJsLCB0aGlzLm9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICB1dGlsLmRlZmVyKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5vbkVycm9yKGUpO1xuICAgICAgICAgICAgICAgIF90aGlzLmNoYW5nZVN0YXRlKCdjbG9zZWQnKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuYmluZExpc3RlbmVycygpO1xuICAgICAgICBsb2dnZXIuZGVidWcoJ0Nvbm5lY3RpbmcnLCB7IHRyYW5zcG9ydDogdGhpcy5uYW1lLCB1cmw6IHVybCB9KTtcbiAgICAgICAgdGhpcy5jaGFuZ2VTdGF0ZSgnY29ubmVjdGluZycpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9O1xuICAgIFRyYW5zcG9ydENvbm5lY3Rpb24ucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5zb2NrZXQpIHtcbiAgICAgICAgICAgIHRoaXMuc29ja2V0LmNsb3NlKCk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgVHJhbnNwb3J0Q29ubmVjdGlvbi5wcm90b3R5cGUuc2VuZCA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGlmICh0aGlzLnN0YXRlID09PSAnb3BlbicpIHtcbiAgICAgICAgICAgIHV0aWwuZGVmZXIoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGlmIChfdGhpcy5zb2NrZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuc29ja2V0LnNlbmQoZGF0YSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgVHJhbnNwb3J0Q29ubmVjdGlvbi5wcm90b3R5cGUucGluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUgPT09ICdvcGVuJyAmJiB0aGlzLnN1cHBvcnRzUGluZygpKSB7XG4gICAgICAgICAgICB0aGlzLnNvY2tldC5waW5nKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFRyYW5zcG9ydENvbm5lY3Rpb24ucHJvdG90eXBlLm9uT3BlbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuaG9va3MuYmVmb3JlT3Blbikge1xuICAgICAgICAgICAgdGhpcy5ob29rcy5iZWZvcmVPcGVuKHRoaXMuc29ja2V0LCB0aGlzLmhvb2tzLnVybHMuZ2V0UGF0aCh0aGlzLmtleSwgdGhpcy5vcHRpb25zKSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jaGFuZ2VTdGF0ZSgnb3BlbicpO1xuICAgICAgICB0aGlzLnNvY2tldC5vbm9wZW4gPSB1bmRlZmluZWQ7XG4gICAgfTtcbiAgICBUcmFuc3BvcnRDb25uZWN0aW9uLnByb3RvdHlwZS5vbkVycm9yID0gZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgIHRoaXMuZW1pdCgnZXJyb3InLCB7IHR5cGU6ICdXZWJTb2NrZXRFcnJvcicsIGVycm9yOiBlcnJvciB9KTtcbiAgICAgICAgdGhpcy50aW1lbGluZS5lcnJvcih0aGlzLmJ1aWxkVGltZWxpbmVNZXNzYWdlKHsgZXJyb3I6IGVycm9yLnRvU3RyaW5nKCkgfSkpO1xuICAgIH07XG4gICAgVHJhbnNwb3J0Q29ubmVjdGlvbi5wcm90b3R5cGUub25DbG9zZSA9IGZ1bmN0aW9uIChjbG9zZUV2ZW50KSB7XG4gICAgICAgIGlmIChjbG9zZUV2ZW50KSB7XG4gICAgICAgICAgICB0aGlzLmNoYW5nZVN0YXRlKCdjbG9zZWQnLCB7XG4gICAgICAgICAgICAgICAgY29kZTogY2xvc2VFdmVudC5jb2RlLFxuICAgICAgICAgICAgICAgIHJlYXNvbjogY2xvc2VFdmVudC5yZWFzb24sXG4gICAgICAgICAgICAgICAgd2FzQ2xlYW46IGNsb3NlRXZlbnQud2FzQ2xlYW5cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5jaGFuZ2VTdGF0ZSgnY2xvc2VkJyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy51bmJpbmRMaXN0ZW5lcnMoKTtcbiAgICAgICAgdGhpcy5zb2NrZXQgPSB1bmRlZmluZWQ7XG4gICAgfTtcbiAgICBUcmFuc3BvcnRDb25uZWN0aW9uLnByb3RvdHlwZS5vbk1lc3NhZ2UgPSBmdW5jdGlvbiAobWVzc2FnZSkge1xuICAgICAgICB0aGlzLmVtaXQoJ21lc3NhZ2UnLCBtZXNzYWdlKTtcbiAgICB9O1xuICAgIFRyYW5zcG9ydENvbm5lY3Rpb24ucHJvdG90eXBlLm9uQWN0aXZpdHkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuZW1pdCgnYWN0aXZpdHknKTtcbiAgICB9O1xuICAgIFRyYW5zcG9ydENvbm5lY3Rpb24ucHJvdG90eXBlLmJpbmRMaXN0ZW5lcnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHRoaXMuc29ja2V0Lm9ub3BlbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIF90aGlzLm9uT3BlbigpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLnNvY2tldC5vbmVycm9yID0gZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICBfdGhpcy5vbkVycm9yKGVycm9yKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5zb2NrZXQub25jbG9zZSA9IGZ1bmN0aW9uIChjbG9zZUV2ZW50KSB7XG4gICAgICAgICAgICBfdGhpcy5vbkNsb3NlKGNsb3NlRXZlbnQpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLnNvY2tldC5vbm1lc3NhZ2UgPSBmdW5jdGlvbiAobWVzc2FnZSkge1xuICAgICAgICAgICAgX3RoaXMub25NZXNzYWdlKG1lc3NhZ2UpO1xuICAgICAgICB9O1xuICAgICAgICBpZiAodGhpcy5zdXBwb3J0c1BpbmcoKSkge1xuICAgICAgICAgICAgdGhpcy5zb2NrZXQub25hY3Rpdml0eSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5vbkFjdGl2aXR5KCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfTtcbiAgICBUcmFuc3BvcnRDb25uZWN0aW9uLnByb3RvdHlwZS51bmJpbmRMaXN0ZW5lcnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLnNvY2tldCkge1xuICAgICAgICAgICAgdGhpcy5zb2NrZXQub25vcGVuID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgdGhpcy5zb2NrZXQub25lcnJvciA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIHRoaXMuc29ja2V0Lm9uY2xvc2UgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB0aGlzLnNvY2tldC5vbm1lc3NhZ2UgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICBpZiAodGhpcy5zdXBwb3J0c1BpbmcoKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuc29ja2V0Lm9uYWN0aXZpdHkgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFRyYW5zcG9ydENvbm5lY3Rpb24ucHJvdG90eXBlLmNoYW5nZVN0YXRlID0gZnVuY3Rpb24gKHN0YXRlLCBwYXJhbXMpIHtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHN0YXRlO1xuICAgICAgICB0aGlzLnRpbWVsaW5lLmluZm8odGhpcy5idWlsZFRpbWVsaW5lTWVzc2FnZSh7XG4gICAgICAgICAgICBzdGF0ZTogc3RhdGUsXG4gICAgICAgICAgICBwYXJhbXM6IHBhcmFtc1xuICAgICAgICB9KSk7XG4gICAgICAgIHRoaXMuZW1pdChzdGF0ZSwgcGFyYW1zKTtcbiAgICB9O1xuICAgIFRyYW5zcG9ydENvbm5lY3Rpb24ucHJvdG90eXBlLmJ1aWxkVGltZWxpbmVNZXNzYWdlID0gZnVuY3Rpb24gKG1lc3NhZ2UpIHtcbiAgICAgICAgcmV0dXJuIGV4dGVuZCh7IGNpZDogdGhpcy5pZCB9LCBtZXNzYWdlKTtcbiAgICB9O1xuICAgIHJldHVybiBUcmFuc3BvcnRDb25uZWN0aW9uO1xufShkaXNwYXRjaGVyKSk7XG4vKiBoYXJtb255IGRlZmF1bHQgZXhwb3J0ICovIHZhciB0cmFuc3BvcnRfY29ubmVjdGlvbiA9ICh0cmFuc3BvcnRfY29ubmVjdGlvbl9UcmFuc3BvcnRDb25uZWN0aW9uKTtcblxuLy8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvY29yZS90cmFuc3BvcnRzL3RyYW5zcG9ydC50c1xuXG52YXIgdHJhbnNwb3J0X1RyYW5zcG9ydCA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gVHJhbnNwb3J0KGhvb2tzKSB7XG4gICAgICAgIHRoaXMuaG9va3MgPSBob29rcztcbiAgICB9XG4gICAgVHJhbnNwb3J0LnByb3RvdHlwZS5pc1N1cHBvcnRlZCA9IGZ1bmN0aW9uIChlbnZpcm9ubWVudCkge1xuICAgICAgICByZXR1cm4gdGhpcy5ob29rcy5pc1N1cHBvcnRlZChlbnZpcm9ubWVudCk7XG4gICAgfTtcbiAgICBUcmFuc3BvcnQucHJvdG90eXBlLmNyZWF0ZUNvbm5lY3Rpb24gPSBmdW5jdGlvbiAobmFtZSwgcHJpb3JpdHksIGtleSwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gbmV3IHRyYW5zcG9ydF9jb25uZWN0aW9uKHRoaXMuaG9va3MsIG5hbWUsIHByaW9yaXR5LCBrZXksIG9wdGlvbnMpO1xuICAgIH07XG4gICAgcmV0dXJuIFRyYW5zcG9ydDtcbn0oKSk7XG4vKiBoYXJtb255IGRlZmF1bHQgZXhwb3J0ICovIHZhciB0cmFuc3BvcnRzX3RyYW5zcG9ydCA9ICh0cmFuc3BvcnRfVHJhbnNwb3J0KTtcblxuLy8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvcnVudGltZXMvaXNvbW9ycGhpYy90cmFuc3BvcnRzL3RyYW5zcG9ydHMudHNcblxuXG5cblxudmFyIFdTVHJhbnNwb3J0ID0gbmV3IHRyYW5zcG9ydHNfdHJhbnNwb3J0KHtcbiAgICB1cmxzOiB3cyxcbiAgICBoYW5kbGVzQWN0aXZpdHlDaGVja3M6IGZhbHNlLFxuICAgIHN1cHBvcnRzUGluZzogZmFsc2UsXG4gICAgaXNJbml0aWFsaXplZDogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gQm9vbGVhbihydW50aW1lLmdldFdlYlNvY2tldEFQSSgpKTtcbiAgICB9LFxuICAgIGlzU3VwcG9ydGVkOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBCb29sZWFuKHJ1bnRpbWUuZ2V0V2ViU29ja2V0QVBJKCkpO1xuICAgIH0sXG4gICAgZ2V0U29ja2V0OiBmdW5jdGlvbiAodXJsKSB7XG4gICAgICAgIHJldHVybiBydW50aW1lLmNyZWF0ZVdlYlNvY2tldCh1cmwpO1xuICAgIH1cbn0pO1xudmFyIGh0dHBDb25maWd1cmF0aW9uID0ge1xuICAgIHVybHM6IGh0dHAsXG4gICAgaGFuZGxlc0FjdGl2aXR5Q2hlY2tzOiBmYWxzZSxcbiAgICBzdXBwb3J0c1Bpbmc6IHRydWUsXG4gICAgaXNJbml0aWFsaXplZDogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG59O1xudmFyIHN0cmVhbWluZ0NvbmZpZ3VyYXRpb24gPSBleHRlbmQoe1xuICAgIGdldFNvY2tldDogZnVuY3Rpb24gKHVybCkge1xuICAgICAgICByZXR1cm4gcnVudGltZS5IVFRQRmFjdG9yeS5jcmVhdGVTdHJlYW1pbmdTb2NrZXQodXJsKTtcbiAgICB9XG59LCBodHRwQ29uZmlndXJhdGlvbik7XG52YXIgcG9sbGluZ0NvbmZpZ3VyYXRpb24gPSBleHRlbmQoe1xuICAgIGdldFNvY2tldDogZnVuY3Rpb24gKHVybCkge1xuICAgICAgICByZXR1cm4gcnVudGltZS5IVFRQRmFjdG9yeS5jcmVhdGVQb2xsaW5nU29ja2V0KHVybCk7XG4gICAgfVxufSwgaHR0cENvbmZpZ3VyYXRpb24pO1xudmFyIHhockNvbmZpZ3VyYXRpb24gPSB7XG4gICAgaXNTdXBwb3J0ZWQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHJ1bnRpbWUuaXNYSFJTdXBwb3J0ZWQoKTtcbiAgICB9XG59O1xudmFyIFhIUlN0cmVhbWluZ1RyYW5zcG9ydCA9IG5ldyB0cmFuc3BvcnRzX3RyYW5zcG9ydCgoZXh0ZW5kKHt9LCBzdHJlYW1pbmdDb25maWd1cmF0aW9uLCB4aHJDb25maWd1cmF0aW9uKSkpO1xudmFyIFhIUlBvbGxpbmdUcmFuc3BvcnQgPSBuZXcgdHJhbnNwb3J0c190cmFuc3BvcnQoZXh0ZW5kKHt9LCBwb2xsaW5nQ29uZmlndXJhdGlvbiwgeGhyQ29uZmlndXJhdGlvbikpO1xudmFyIFRyYW5zcG9ydHMgPSB7XG4gICAgd3M6IFdTVHJhbnNwb3J0LFxuICAgIHhocl9zdHJlYW1pbmc6IFhIUlN0cmVhbWluZ1RyYW5zcG9ydCxcbiAgICB4aHJfcG9sbGluZzogWEhSUG9sbGluZ1RyYW5zcG9ydFxufTtcbi8qIGhhcm1vbnkgZGVmYXVsdCBleHBvcnQgKi8gdmFyIHRyYW5zcG9ydHMgPSAoVHJhbnNwb3J0cyk7XG5cbi8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL3J1bnRpbWVzL3dlYi90cmFuc3BvcnRzL3RyYW5zcG9ydHMudHNcblxuXG5cblxuXG5cbnZhciBTb2NrSlNUcmFuc3BvcnQgPSBuZXcgdHJhbnNwb3J0c190cmFuc3BvcnQoe1xuICAgIGZpbGU6ICdzb2NranMnLFxuICAgIHVybHM6IHNvY2tqcyxcbiAgICBoYW5kbGVzQWN0aXZpdHlDaGVja3M6IHRydWUsXG4gICAgc3VwcG9ydHNQaW5nOiBmYWxzZSxcbiAgICBpc1N1cHBvcnRlZDogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9LFxuICAgIGlzSW5pdGlhbGl6ZWQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHdpbmRvdy5Tb2NrSlMgIT09IHVuZGVmaW5lZDtcbiAgICB9LFxuICAgIGdldFNvY2tldDogZnVuY3Rpb24gKHVybCwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gbmV3IHdpbmRvdy5Tb2NrSlModXJsLCBudWxsLCB7XG4gICAgICAgICAgICBqc19wYXRoOiBEZXBlbmRlbmNpZXMuZ2V0UGF0aCgnc29ja2pzJywge1xuICAgICAgICAgICAgICAgIHVzZVRMUzogb3B0aW9ucy51c2VUTFNcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgaWdub3JlX251bGxfb3JpZ2luOiBvcHRpb25zLmlnbm9yZU51bGxPcmlnaW5cbiAgICAgICAgfSk7XG4gICAgfSxcbiAgICBiZWZvcmVPcGVuOiBmdW5jdGlvbiAoc29ja2V0LCBwYXRoKSB7XG4gICAgICAgIHNvY2tldC5zZW5kKEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICAgIHBhdGg6IHBhdGhcbiAgICAgICAgfSkpO1xuICAgIH1cbn0pO1xudmFyIHhkckNvbmZpZ3VyYXRpb24gPSB7XG4gICAgaXNTdXBwb3J0ZWQ6IGZ1bmN0aW9uIChlbnZpcm9ubWVudCkge1xuICAgICAgICB2YXIgeWVzID0gcnVudGltZS5pc1hEUlN1cHBvcnRlZChlbnZpcm9ubWVudC51c2VUTFMpO1xuICAgICAgICByZXR1cm4geWVzO1xuICAgIH1cbn07XG52YXIgWERSU3RyZWFtaW5nVHJhbnNwb3J0ID0gbmV3IHRyYW5zcG9ydHNfdHJhbnNwb3J0KChleHRlbmQoe30sIHN0cmVhbWluZ0NvbmZpZ3VyYXRpb24sIHhkckNvbmZpZ3VyYXRpb24pKSk7XG52YXIgWERSUG9sbGluZ1RyYW5zcG9ydCA9IG5ldyB0cmFuc3BvcnRzX3RyYW5zcG9ydChleHRlbmQoe30sIHBvbGxpbmdDb25maWd1cmF0aW9uLCB4ZHJDb25maWd1cmF0aW9uKSk7XG50cmFuc3BvcnRzLnhkcl9zdHJlYW1pbmcgPSBYRFJTdHJlYW1pbmdUcmFuc3BvcnQ7XG50cmFuc3BvcnRzLnhkcl9wb2xsaW5nID0gWERSUG9sbGluZ1RyYW5zcG9ydDtcbnRyYW5zcG9ydHMuc29ja2pzID0gU29ja0pTVHJhbnNwb3J0O1xuLyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyB2YXIgdHJhbnNwb3J0c190cmFuc3BvcnRzID0gKHRyYW5zcG9ydHMpO1xuXG4vLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy9ydW50aW1lcy93ZWIvbmV0X2luZm8udHNcbnZhciBuZXRfaW5mb19leHRlbmRzID0gKHVuZGVmaW5lZCAmJiB1bmRlZmluZWQuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgIH07XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbn0pKCk7XG5cbnZhciBOZXRJbmZvID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBuZXRfaW5mb19leHRlbmRzKE5ldEluZm8sIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gTmV0SW5mbygpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcykgfHwgdGhpcztcbiAgICAgICAgdmFyIHNlbGYgPSBfdGhpcztcbiAgICAgICAgaWYgKHdpbmRvdy5hZGRFdmVudExpc3RlbmVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdvbmxpbmUnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgc2VsZi5lbWl0KCdvbmxpbmUnKTtcbiAgICAgICAgICAgIH0sIGZhbHNlKTtcbiAgICAgICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdvZmZsaW5lJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHNlbGYuZW1pdCgnb2ZmbGluZScpO1xuICAgICAgICAgICAgfSwgZmFsc2UpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgTmV0SW5mby5wcm90b3R5cGUuaXNPbmxpbmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh3aW5kb3cubmF2aWdhdG9yLm9uTGluZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB3aW5kb3cubmF2aWdhdG9yLm9uTGluZTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIE5ldEluZm87XG59KGRpc3BhdGNoZXIpKTtcblxudmFyIG5ldF9pbmZvX05ldHdvcmsgPSBuZXcgTmV0SW5mbygpO1xuXG4vLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy9jb3JlL3RyYW5zcG9ydHMvYXNzaXN0YW50X3RvX3RoZV90cmFuc3BvcnRfbWFuYWdlci50c1xuXG5cbnZhciBhc3Npc3RhbnRfdG9fdGhlX3RyYW5zcG9ydF9tYW5hZ2VyX0Fzc2lzdGFudFRvVGhlVHJhbnNwb3J0TWFuYWdlciA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQXNzaXN0YW50VG9UaGVUcmFuc3BvcnRNYW5hZ2VyKG1hbmFnZXIsIHRyYW5zcG9ydCwgb3B0aW9ucykge1xuICAgICAgICB0aGlzLm1hbmFnZXIgPSBtYW5hZ2VyO1xuICAgICAgICB0aGlzLnRyYW5zcG9ydCA9IHRyYW5zcG9ydDtcbiAgICAgICAgdGhpcy5taW5QaW5nRGVsYXkgPSBvcHRpb25zLm1pblBpbmdEZWxheTtcbiAgICAgICAgdGhpcy5tYXhQaW5nRGVsYXkgPSBvcHRpb25zLm1heFBpbmdEZWxheTtcbiAgICAgICAgdGhpcy5waW5nRGVsYXkgPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIEFzc2lzdGFudFRvVGhlVHJhbnNwb3J0TWFuYWdlci5wcm90b3R5cGUuY3JlYXRlQ29ubmVjdGlvbiA9IGZ1bmN0aW9uIChuYW1lLCBwcmlvcml0eSwga2V5LCBvcHRpb25zKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIG9wdGlvbnMgPSBleHRlbmQoe30sIG9wdGlvbnMsIHtcbiAgICAgICAgICAgIGFjdGl2aXR5VGltZW91dDogdGhpcy5waW5nRGVsYXlcbiAgICAgICAgfSk7XG4gICAgICAgIHZhciBjb25uZWN0aW9uID0gdGhpcy50cmFuc3BvcnQuY3JlYXRlQ29ubmVjdGlvbihuYW1lLCBwcmlvcml0eSwga2V5LCBvcHRpb25zKTtcbiAgICAgICAgdmFyIG9wZW5UaW1lc3RhbXAgPSBudWxsO1xuICAgICAgICB2YXIgb25PcGVuID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgY29ubmVjdGlvbi51bmJpbmQoJ29wZW4nLCBvbk9wZW4pO1xuICAgICAgICAgICAgY29ubmVjdGlvbi5iaW5kKCdjbG9zZWQnLCBvbkNsb3NlZCk7XG4gICAgICAgICAgICBvcGVuVGltZXN0YW1wID0gdXRpbC5ub3coKTtcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIG9uQ2xvc2VkID0gZnVuY3Rpb24gKGNsb3NlRXZlbnQpIHtcbiAgICAgICAgICAgIGNvbm5lY3Rpb24udW5iaW5kKCdjbG9zZWQnLCBvbkNsb3NlZCk7XG4gICAgICAgICAgICBpZiAoY2xvc2VFdmVudC5jb2RlID09PSAxMDAyIHx8IGNsb3NlRXZlbnQuY29kZSA9PT0gMTAwMykge1xuICAgICAgICAgICAgICAgIF90aGlzLm1hbmFnZXIucmVwb3J0RGVhdGgoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKCFjbG9zZUV2ZW50Lndhc0NsZWFuICYmIG9wZW5UaW1lc3RhbXApIHtcbiAgICAgICAgICAgICAgICB2YXIgbGlmZXNwYW4gPSB1dGlsLm5vdygpIC0gb3BlblRpbWVzdGFtcDtcbiAgICAgICAgICAgICAgICBpZiAobGlmZXNwYW4gPCAyICogX3RoaXMubWF4UGluZ0RlbGF5KSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLm1hbmFnZXIucmVwb3J0RGVhdGgoKTtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMucGluZ0RlbGF5ID0gTWF0aC5tYXgobGlmZXNwYW4gLyAyLCBfdGhpcy5taW5QaW5nRGVsYXkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgY29ubmVjdGlvbi5iaW5kKCdvcGVuJywgb25PcGVuKTtcbiAgICAgICAgcmV0dXJuIGNvbm5lY3Rpb247XG4gICAgfTtcbiAgICBBc3Npc3RhbnRUb1RoZVRyYW5zcG9ydE1hbmFnZXIucHJvdG90eXBlLmlzU3VwcG9ydGVkID0gZnVuY3Rpb24gKGVudmlyb25tZW50KSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1hbmFnZXIuaXNBbGl2ZSgpICYmIHRoaXMudHJhbnNwb3J0LmlzU3VwcG9ydGVkKGVudmlyb25tZW50KTtcbiAgICB9O1xuICAgIHJldHVybiBBc3Npc3RhbnRUb1RoZVRyYW5zcG9ydE1hbmFnZXI7XG59KCkpO1xuLyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyB2YXIgYXNzaXN0YW50X3RvX3RoZV90cmFuc3BvcnRfbWFuYWdlciA9IChhc3Npc3RhbnRfdG9fdGhlX3RyYW5zcG9ydF9tYW5hZ2VyX0Fzc2lzdGFudFRvVGhlVHJhbnNwb3J0TWFuYWdlcik7XG5cbi8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL2NvcmUvY29ubmVjdGlvbi9wcm90b2NvbC9wcm90b2NvbC50c1xudmFyIFByb3RvY29sID0ge1xuICAgIGRlY29kZU1lc3NhZ2U6IGZ1bmN0aW9uIChtZXNzYWdlRXZlbnQpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHZhciBtZXNzYWdlRGF0YSA9IEpTT04ucGFyc2UobWVzc2FnZUV2ZW50LmRhdGEpO1xuICAgICAgICAgICAgdmFyIHB1c2hlckV2ZW50RGF0YSA9IG1lc3NhZ2VEYXRhLmRhdGE7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHB1c2hlckV2ZW50RGF0YSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBwdXNoZXJFdmVudERhdGEgPSBKU09OLnBhcnNlKG1lc3NhZ2VEYXRhLmRhdGEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZSkgeyB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgcHVzaGVyRXZlbnQgPSB7XG4gICAgICAgICAgICAgICAgZXZlbnQ6IG1lc3NhZ2VEYXRhLmV2ZW50LFxuICAgICAgICAgICAgICAgIGNoYW5uZWw6IG1lc3NhZ2VEYXRhLmNoYW5uZWwsXG4gICAgICAgICAgICAgICAgZGF0YTogcHVzaGVyRXZlbnREYXRhXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaWYgKG1lc3NhZ2VEYXRhLnVzZXJfaWQpIHtcbiAgICAgICAgICAgICAgICBwdXNoZXJFdmVudC51c2VyX2lkID0gbWVzc2FnZURhdGEudXNlcl9pZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBwdXNoZXJFdmVudDtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgdGhyb3cgeyB0eXBlOiAnTWVzc2FnZVBhcnNlRXJyb3InLCBlcnJvcjogZSwgZGF0YTogbWVzc2FnZUV2ZW50LmRhdGEgfTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgZW5jb2RlTWVzc2FnZTogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShldmVudCk7XG4gICAgfSxcbiAgICBwcm9jZXNzSGFuZHNoYWtlOiBmdW5jdGlvbiAobWVzc2FnZUV2ZW50KSB7XG4gICAgICAgIHZhciBtZXNzYWdlID0gUHJvdG9jb2wuZGVjb2RlTWVzc2FnZShtZXNzYWdlRXZlbnQpO1xuICAgICAgICBpZiAobWVzc2FnZS5ldmVudCA9PT0gJ3B1c2hlcjpjb25uZWN0aW9uX2VzdGFibGlzaGVkJykge1xuICAgICAgICAgICAgaWYgKCFtZXNzYWdlLmRhdGEuYWN0aXZpdHlfdGltZW91dCkge1xuICAgICAgICAgICAgICAgIHRocm93ICdObyBhY3Rpdml0eSB0aW1lb3V0IHNwZWNpZmllZCBpbiBoYW5kc2hha2UnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBhY3Rpb246ICdjb25uZWN0ZWQnLFxuICAgICAgICAgICAgICAgIGlkOiBtZXNzYWdlLmRhdGEuc29ja2V0X2lkLFxuICAgICAgICAgICAgICAgIGFjdGl2aXR5VGltZW91dDogbWVzc2FnZS5kYXRhLmFjdGl2aXR5X3RpbWVvdXQgKiAxMDAwXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKG1lc3NhZ2UuZXZlbnQgPT09ICdwdXNoZXI6ZXJyb3InKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGFjdGlvbjogdGhpcy5nZXRDbG9zZUFjdGlvbihtZXNzYWdlLmRhdGEpLFxuICAgICAgICAgICAgICAgIGVycm9yOiB0aGlzLmdldENsb3NlRXJyb3IobWVzc2FnZS5kYXRhKVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRocm93ICdJbnZhbGlkIGhhbmRzaGFrZSc7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIGdldENsb3NlQWN0aW9uOiBmdW5jdGlvbiAoY2xvc2VFdmVudCkge1xuICAgICAgICBpZiAoY2xvc2VFdmVudC5jb2RlIDwgNDAwMCkge1xuICAgICAgICAgICAgaWYgKGNsb3NlRXZlbnQuY29kZSA+PSAxMDAyICYmIGNsb3NlRXZlbnQuY29kZSA8PSAxMDA0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdiYWNrb2ZmJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGNsb3NlRXZlbnQuY29kZSA9PT0gNDAwMCkge1xuICAgICAgICAgICAgcmV0dXJuICd0bHNfb25seSc7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoY2xvc2VFdmVudC5jb2RlIDwgNDEwMCkge1xuICAgICAgICAgICAgcmV0dXJuICdyZWZ1c2VkJztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChjbG9zZUV2ZW50LmNvZGUgPCA0MjAwKSB7XG4gICAgICAgICAgICByZXR1cm4gJ2JhY2tvZmYnO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGNsb3NlRXZlbnQuY29kZSA8IDQzMDApIHtcbiAgICAgICAgICAgIHJldHVybiAncmV0cnknO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuICdyZWZ1c2VkJztcbiAgICAgICAgfVxuICAgIH0sXG4gICAgZ2V0Q2xvc2VFcnJvcjogZnVuY3Rpb24gKGNsb3NlRXZlbnQpIHtcbiAgICAgICAgaWYgKGNsb3NlRXZlbnQuY29kZSAhPT0gMTAwMCAmJiBjbG9zZUV2ZW50LmNvZGUgIT09IDEwMDEpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdHlwZTogJ1B1c2hlckVycm9yJyxcbiAgICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgIGNvZGU6IGNsb3NlRXZlbnQuY29kZSxcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogY2xvc2VFdmVudC5yZWFzb24gfHwgY2xvc2VFdmVudC5tZXNzYWdlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgfVxufTtcbi8qIGhhcm1vbnkgZGVmYXVsdCBleHBvcnQgKi8gdmFyIHByb3RvY29sX3Byb3RvY29sID0gKFByb3RvY29sKTtcblxuLy8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvY29yZS9jb25uZWN0aW9uL2Nvbm5lY3Rpb24udHNcbnZhciBjb25uZWN0aW9uX2V4dGVuZHMgPSAodW5kZWZpbmVkICYmIHVuZGVmaW5lZC5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcbiAgICAgICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgfTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcblxuXG5cblxudmFyIGNvbm5lY3Rpb25fQ29ubmVjdGlvbiA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgY29ubmVjdGlvbl9leHRlbmRzKENvbm5lY3Rpb24sIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gQ29ubmVjdGlvbihpZCwgdHJhbnNwb3J0KSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLmlkID0gaWQ7XG4gICAgICAgIF90aGlzLnRyYW5zcG9ydCA9IHRyYW5zcG9ydDtcbiAgICAgICAgX3RoaXMuYWN0aXZpdHlUaW1lb3V0ID0gdHJhbnNwb3J0LmFjdGl2aXR5VGltZW91dDtcbiAgICAgICAgX3RoaXMuYmluZExpc3RlbmVycygpO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIENvbm5lY3Rpb24ucHJvdG90eXBlLmhhbmRsZXNBY3Rpdml0eUNoZWNrcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudHJhbnNwb3J0LmhhbmRsZXNBY3Rpdml0eUNoZWNrcygpO1xuICAgIH07XG4gICAgQ29ubmVjdGlvbi5wcm90b3R5cGUuc2VuZCA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRyYW5zcG9ydC5zZW5kKGRhdGEpO1xuICAgIH07XG4gICAgQ29ubmVjdGlvbi5wcm90b3R5cGUuc2VuZF9ldmVudCA9IGZ1bmN0aW9uIChuYW1lLCBkYXRhLCBjaGFubmVsKSB7XG4gICAgICAgIHZhciBldmVudCA9IHsgZXZlbnQ6IG5hbWUsIGRhdGE6IGRhdGEgfTtcbiAgICAgICAgaWYgKGNoYW5uZWwpIHtcbiAgICAgICAgICAgIGV2ZW50LmNoYW5uZWwgPSBjaGFubmVsO1xuICAgICAgICB9XG4gICAgICAgIGxvZ2dlci5kZWJ1ZygnRXZlbnQgc2VudCcsIGV2ZW50KTtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2VuZChwcm90b2NvbF9wcm90b2NvbC5lbmNvZGVNZXNzYWdlKGV2ZW50KSk7XG4gICAgfTtcbiAgICBDb25uZWN0aW9uLnByb3RvdHlwZS5waW5nID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy50cmFuc3BvcnQuc3VwcG9ydHNQaW5nKCkpIHtcbiAgICAgICAgICAgIHRoaXMudHJhbnNwb3J0LnBpbmcoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuc2VuZF9ldmVudCgncHVzaGVyOnBpbmcnLCB7fSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIENvbm5lY3Rpb24ucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLnRyYW5zcG9ydC5jbG9zZSgpO1xuICAgIH07XG4gICAgQ29ubmVjdGlvbi5wcm90b3R5cGUuYmluZExpc3RlbmVycyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIGxpc3RlbmVycyA9IHtcbiAgICAgICAgICAgIG1lc3NhZ2U6IGZ1bmN0aW9uIChtZXNzYWdlRXZlbnQpIHtcbiAgICAgICAgICAgICAgICB2YXIgcHVzaGVyRXZlbnQ7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgcHVzaGVyRXZlbnQgPSBwcm90b2NvbF9wcm90b2NvbC5kZWNvZGVNZXNzYWdlKG1lc3NhZ2VFdmVudCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLmVtaXQoJ2Vycm9yJywge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ01lc3NhZ2VQYXJzZUVycm9yJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yOiBlLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YTogbWVzc2FnZUV2ZW50LmRhdGFcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChwdXNoZXJFdmVudCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIGxvZ2dlci5kZWJ1ZygnRXZlbnQgcmVjZCcsIHB1c2hlckV2ZW50KTtcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChwdXNoZXJFdmVudC5ldmVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAncHVzaGVyOmVycm9yJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5lbWl0KCdlcnJvcicsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ1B1c2hlckVycm9yJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YTogcHVzaGVyRXZlbnQuZGF0YVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAncHVzaGVyOnBpbmcnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLmVtaXQoJ3BpbmcnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3B1c2hlcjpwb25nJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5lbWl0KCdwb25nJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuZW1pdCgnbWVzc2FnZScsIHB1c2hlckV2ZW50KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYWN0aXZpdHk6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5lbWl0KCdhY3Rpdml0eScpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGVycm9yOiBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5lbWl0KCdlcnJvcicsIGVycm9yKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjbG9zZWQ6IGZ1bmN0aW9uIChjbG9zZUV2ZW50KSB7XG4gICAgICAgICAgICAgICAgdW5iaW5kTGlzdGVuZXJzKCk7XG4gICAgICAgICAgICAgICAgaWYgKGNsb3NlRXZlbnQgJiYgY2xvc2VFdmVudC5jb2RlKSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLmhhbmRsZUNsb3NlRXZlbnQoY2xvc2VFdmVudCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIF90aGlzLnRyYW5zcG9ydCA9IG51bGw7XG4gICAgICAgICAgICAgICAgX3RoaXMuZW1pdCgnY2xvc2VkJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHZhciB1bmJpbmRMaXN0ZW5lcnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBvYmplY3RBcHBseShsaXN0ZW5lcnMsIGZ1bmN0aW9uIChsaXN0ZW5lciwgZXZlbnQpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy50cmFuc3BvcnQudW5iaW5kKGV2ZW50LCBsaXN0ZW5lcik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgb2JqZWN0QXBwbHkobGlzdGVuZXJzLCBmdW5jdGlvbiAobGlzdGVuZXIsIGV2ZW50KSB7XG4gICAgICAgICAgICBfdGhpcy50cmFuc3BvcnQuYmluZChldmVudCwgbGlzdGVuZXIpO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIENvbm5lY3Rpb24ucHJvdG90eXBlLmhhbmRsZUNsb3NlRXZlbnQgPSBmdW5jdGlvbiAoY2xvc2VFdmVudCkge1xuICAgICAgICB2YXIgYWN0aW9uID0gcHJvdG9jb2xfcHJvdG9jb2wuZ2V0Q2xvc2VBY3Rpb24oY2xvc2VFdmVudCk7XG4gICAgICAgIHZhciBlcnJvciA9IHByb3RvY29sX3Byb3RvY29sLmdldENsb3NlRXJyb3IoY2xvc2VFdmVudCk7XG4gICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgdGhpcy5lbWl0KCdlcnJvcicsIGVycm9yKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYWN0aW9uKSB7XG4gICAgICAgICAgICB0aGlzLmVtaXQoYWN0aW9uLCB7IGFjdGlvbjogYWN0aW9uLCBlcnJvcjogZXJyb3IgfSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBDb25uZWN0aW9uO1xufShkaXNwYXRjaGVyKSk7XG4vKiBoYXJtb255IGRlZmF1bHQgZXhwb3J0ICovIHZhciBjb25uZWN0aW9uX2Nvbm5lY3Rpb24gPSAoY29ubmVjdGlvbl9Db25uZWN0aW9uKTtcblxuLy8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvY29yZS9jb25uZWN0aW9uL2hhbmRzaGFrZS9pbmRleC50c1xuXG5cblxudmFyIGhhbmRzaGFrZV9IYW5kc2hha2UgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEhhbmRzaGFrZSh0cmFuc3BvcnQsIGNhbGxiYWNrKSB7XG4gICAgICAgIHRoaXMudHJhbnNwb3J0ID0gdHJhbnNwb3J0O1xuICAgICAgICB0aGlzLmNhbGxiYWNrID0gY2FsbGJhY2s7XG4gICAgICAgIHRoaXMuYmluZExpc3RlbmVycygpO1xuICAgIH1cbiAgICBIYW5kc2hha2UucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLnVuYmluZExpc3RlbmVycygpO1xuICAgICAgICB0aGlzLnRyYW5zcG9ydC5jbG9zZSgpO1xuICAgIH07XG4gICAgSGFuZHNoYWtlLnByb3RvdHlwZS5iaW5kTGlzdGVuZXJzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB0aGlzLm9uTWVzc2FnZSA9IGZ1bmN0aW9uIChtKSB7XG4gICAgICAgICAgICBfdGhpcy51bmJpbmRMaXN0ZW5lcnMoKTtcbiAgICAgICAgICAgIHZhciByZXN1bHQ7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHJlc3VsdCA9IHByb3RvY29sX3Byb3RvY29sLnByb2Nlc3NIYW5kc2hha2UobSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIF90aGlzLmZpbmlzaCgnZXJyb3InLCB7IGVycm9yOiBlIH0pO1xuICAgICAgICAgICAgICAgIF90aGlzLnRyYW5zcG9ydC5jbG9zZSgpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChyZXN1bHQuYWN0aW9uID09PSAnY29ubmVjdGVkJykge1xuICAgICAgICAgICAgICAgIF90aGlzLmZpbmlzaCgnY29ubmVjdGVkJywge1xuICAgICAgICAgICAgICAgICAgICBjb25uZWN0aW9uOiBuZXcgY29ubmVjdGlvbl9jb25uZWN0aW9uKHJlc3VsdC5pZCwgX3RoaXMudHJhbnNwb3J0KSxcbiAgICAgICAgICAgICAgICAgICAgYWN0aXZpdHlUaW1lb3V0OiByZXN1bHQuYWN0aXZpdHlUaW1lb3V0XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5maW5pc2gocmVzdWx0LmFjdGlvbiwgeyBlcnJvcjogcmVzdWx0LmVycm9yIH0pO1xuICAgICAgICAgICAgICAgIF90aGlzLnRyYW5zcG9ydC5jbG9zZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB0aGlzLm9uQ2xvc2VkID0gZnVuY3Rpb24gKGNsb3NlRXZlbnQpIHtcbiAgICAgICAgICAgIF90aGlzLnVuYmluZExpc3RlbmVycygpO1xuICAgICAgICAgICAgdmFyIGFjdGlvbiA9IHByb3RvY29sX3Byb3RvY29sLmdldENsb3NlQWN0aW9uKGNsb3NlRXZlbnQpIHx8ICdiYWNrb2ZmJztcbiAgICAgICAgICAgIHZhciBlcnJvciA9IHByb3RvY29sX3Byb3RvY29sLmdldENsb3NlRXJyb3IoY2xvc2VFdmVudCk7XG4gICAgICAgICAgICBfdGhpcy5maW5pc2goYWN0aW9uLCB7IGVycm9yOiBlcnJvciB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy50cmFuc3BvcnQuYmluZCgnbWVzc2FnZScsIHRoaXMub25NZXNzYWdlKTtcbiAgICAgICAgdGhpcy50cmFuc3BvcnQuYmluZCgnY2xvc2VkJywgdGhpcy5vbkNsb3NlZCk7XG4gICAgfTtcbiAgICBIYW5kc2hha2UucHJvdG90eXBlLnVuYmluZExpc3RlbmVycyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy50cmFuc3BvcnQudW5iaW5kKCdtZXNzYWdlJywgdGhpcy5vbk1lc3NhZ2UpO1xuICAgICAgICB0aGlzLnRyYW5zcG9ydC51bmJpbmQoJ2Nsb3NlZCcsIHRoaXMub25DbG9zZWQpO1xuICAgIH07XG4gICAgSGFuZHNoYWtlLnByb3RvdHlwZS5maW5pc2ggPSBmdW5jdGlvbiAoYWN0aW9uLCBwYXJhbXMpIHtcbiAgICAgICAgdGhpcy5jYWxsYmFjayhleHRlbmQoeyB0cmFuc3BvcnQ6IHRoaXMudHJhbnNwb3J0LCBhY3Rpb246IGFjdGlvbiB9LCBwYXJhbXMpKTtcbiAgICB9O1xuICAgIHJldHVybiBIYW5kc2hha2U7XG59KCkpO1xuLyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyB2YXIgY29ubmVjdGlvbl9oYW5kc2hha2UgPSAoaGFuZHNoYWtlX0hhbmRzaGFrZSk7XG5cbi8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL2NvcmUvdGltZWxpbmUvdGltZWxpbmVfc2VuZGVyLnRzXG5cbnZhciB0aW1lbGluZV9zZW5kZXJfVGltZWxpbmVTZW5kZXIgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFRpbWVsaW5lU2VuZGVyKHRpbWVsaW5lLCBvcHRpb25zKSB7XG4gICAgICAgIHRoaXMudGltZWxpbmUgPSB0aW1lbGluZTtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICB9XG4gICAgVGltZWxpbmVTZW5kZXIucHJvdG90eXBlLnNlbmQgPSBmdW5jdGlvbiAodXNlVExTLCBjYWxsYmFjaykge1xuICAgICAgICBpZiAodGhpcy50aW1lbGluZS5pc0VtcHR5KCkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnRpbWVsaW5lLnNlbmQocnVudGltZS5UaW1lbGluZVRyYW5zcG9ydC5nZXRBZ2VudCh0aGlzLCB1c2VUTFMpLCBjYWxsYmFjayk7XG4gICAgfTtcbiAgICByZXR1cm4gVGltZWxpbmVTZW5kZXI7XG59KCkpO1xuLyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyB2YXIgdGltZWxpbmVfc2VuZGVyID0gKHRpbWVsaW5lX3NlbmRlcl9UaW1lbGluZVNlbmRlcik7XG5cbi8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL2NvcmUvY2hhbm5lbHMvY2hhbm5lbC50c1xudmFyIGNoYW5uZWxfZXh0ZW5kcyA9ICh1bmRlZmluZWQgJiYgdW5kZWZpbmVkLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcbiAgICAgICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcbiAgICAgICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgICAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICB9O1xuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xuXG5cblxuXG5cbnZhciBjaGFubmVsX0NoYW5uZWwgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIGNoYW5uZWxfZXh0ZW5kcyhDaGFubmVsLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIENoYW5uZWwobmFtZSwgcHVzaGVyKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGZ1bmN0aW9uIChldmVudCwgZGF0YSkge1xuICAgICAgICAgICAgbG9nZ2VyLmRlYnVnKCdObyBjYWxsYmFja3Mgb24gJyArIG5hbWUgKyAnIGZvciAnICsgZXZlbnQpO1xuICAgICAgICB9KSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5uYW1lID0gbmFtZTtcbiAgICAgICAgX3RoaXMucHVzaGVyID0gcHVzaGVyO1xuICAgICAgICBfdGhpcy5zdWJzY3JpYmVkID0gZmFsc2U7XG4gICAgICAgIF90aGlzLnN1YnNjcmlwdGlvblBlbmRpbmcgPSBmYWxzZTtcbiAgICAgICAgX3RoaXMuc3Vic2NyaXB0aW9uQ2FuY2VsbGVkID0gZmFsc2U7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgQ2hhbm5lbC5wcm90b3R5cGUuYXV0aG9yaXplID0gZnVuY3Rpb24gKHNvY2tldElkLCBjYWxsYmFjaykge1xuICAgICAgICByZXR1cm4gY2FsbGJhY2sobnVsbCwgeyBhdXRoOiAnJyB9KTtcbiAgICB9O1xuICAgIENoYW5uZWwucHJvdG90eXBlLnRyaWdnZXIgPSBmdW5jdGlvbiAoZXZlbnQsIGRhdGEpIHtcbiAgICAgICAgaWYgKGV2ZW50LmluZGV4T2YoJ2NsaWVudC0nKSAhPT0gMCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEJhZEV2ZW50TmFtZShcIkV2ZW50ICdcIiArIGV2ZW50ICsgXCInIGRvZXMgbm90IHN0YXJ0IHdpdGggJ2NsaWVudC0nXCIpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdGhpcy5zdWJzY3JpYmVkKSB7XG4gICAgICAgICAgICB2YXIgc3VmZml4ID0gdXJsX3N0b3JlLmJ1aWxkTG9nU3VmZml4KCd0cmlnZ2VyaW5nQ2xpZW50RXZlbnRzJyk7XG4gICAgICAgICAgICBsb2dnZXIud2FybihcIkNsaWVudCBldmVudCB0cmlnZ2VyZWQgYmVmb3JlIGNoYW5uZWwgJ3N1YnNjcmlwdGlvbl9zdWNjZWVkZWQnIGV2ZW50IC4gXCIgKyBzdWZmaXgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLnB1c2hlci5zZW5kX2V2ZW50KGV2ZW50LCBkYXRhLCB0aGlzLm5hbWUpO1xuICAgIH07XG4gICAgQ2hhbm5lbC5wcm90b3R5cGUuZGlzY29ubmVjdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5zdWJzY3JpYmVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuc3Vic2NyaXB0aW9uUGVuZGluZyA9IGZhbHNlO1xuICAgIH07XG4gICAgQ2hhbm5lbC5wcm90b3R5cGUuaGFuZGxlRXZlbnQgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgdmFyIGV2ZW50TmFtZSA9IGV2ZW50LmV2ZW50O1xuICAgICAgICB2YXIgZGF0YSA9IGV2ZW50LmRhdGE7XG4gICAgICAgIGlmIChldmVudE5hbWUgPT09ICdwdXNoZXJfaW50ZXJuYWw6c3Vic2NyaXB0aW9uX3N1Y2NlZWRlZCcpIHtcbiAgICAgICAgICAgIHRoaXMuaGFuZGxlU3Vic2NyaXB0aW9uU3VjY2VlZGVkRXZlbnQoZXZlbnQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGV2ZW50TmFtZSA9PT0gJ3B1c2hlcl9pbnRlcm5hbDpzdWJzY3JpcHRpb25fY291bnQnKSB7XG4gICAgICAgICAgICB0aGlzLmhhbmRsZVN1YnNjcmlwdGlvbkNvdW50RXZlbnQoZXZlbnQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGV2ZW50TmFtZS5pbmRleE9mKCdwdXNoZXJfaW50ZXJuYWw6JykgIT09IDApIHtcbiAgICAgICAgICAgIHZhciBtZXRhZGF0YSA9IHt9O1xuICAgICAgICAgICAgdGhpcy5lbWl0KGV2ZW50TmFtZSwgZGF0YSwgbWV0YWRhdGEpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBDaGFubmVsLnByb3RvdHlwZS5oYW5kbGVTdWJzY3JpcHRpb25TdWNjZWVkZWRFdmVudCA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICB0aGlzLnN1YnNjcmlwdGlvblBlbmRpbmcgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5zdWJzY3JpYmVkID0gdHJ1ZTtcbiAgICAgICAgaWYgKHRoaXMuc3Vic2NyaXB0aW9uQ2FuY2VsbGVkKSB7XG4gICAgICAgICAgICB0aGlzLnB1c2hlci51bnN1YnNjcmliZSh0aGlzLm5hbWUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5lbWl0KCdwdXNoZXI6c3Vic2NyaXB0aW9uX3N1Y2NlZWRlZCcsIGV2ZW50LmRhdGEpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBDaGFubmVsLnByb3RvdHlwZS5oYW5kbGVTdWJzY3JpcHRpb25Db3VudEV2ZW50ID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIGlmIChldmVudC5kYXRhLnN1YnNjcmlwdGlvbl9jb3VudCkge1xuICAgICAgICAgICAgdGhpcy5zdWJzY3JpcHRpb25Db3VudCA9IGV2ZW50LmRhdGEuc3Vic2NyaXB0aW9uX2NvdW50O1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZW1pdCgncHVzaGVyOnN1YnNjcmlwdGlvbl9jb3VudCcsIGV2ZW50LmRhdGEpO1xuICAgIH07XG4gICAgQ2hhbm5lbC5wcm90b3R5cGUuc3Vic2NyaWJlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBpZiAodGhpcy5zdWJzY3JpYmVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zdWJzY3JpcHRpb25QZW5kaW5nID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5zdWJzY3JpcHRpb25DYW5jZWxsZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5hdXRob3JpemUodGhpcy5wdXNoZXIuY29ubmVjdGlvbi5zb2NrZXRfaWQsIGZ1bmN0aW9uIChlcnJvciwgZGF0YSkge1xuICAgICAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuc3Vic2NyaXB0aW9uUGVuZGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGxvZ2dlci5lcnJvcihlcnJvci50b1N0cmluZygpKTtcbiAgICAgICAgICAgICAgICBfdGhpcy5lbWl0KCdwdXNoZXI6c3Vic2NyaXB0aW9uX2Vycm9yJywgT2JqZWN0LmFzc2lnbih7fSwge1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiAnQXV0aEVycm9yJyxcbiAgICAgICAgICAgICAgICAgICAgZXJyb3I6IGVycm9yLm1lc3NhZ2VcbiAgICAgICAgICAgICAgICB9LCBlcnJvciBpbnN0YW5jZW9mIEhUVFBBdXRoRXJyb3IgPyB7IHN0YXR1czogZXJyb3Iuc3RhdHVzIH0gOiB7fSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgX3RoaXMucHVzaGVyLnNlbmRfZXZlbnQoJ3B1c2hlcjpzdWJzY3JpYmUnLCB7XG4gICAgICAgICAgICAgICAgICAgIGF1dGg6IGRhdGEuYXV0aCxcbiAgICAgICAgICAgICAgICAgICAgY2hhbm5lbF9kYXRhOiBkYXRhLmNoYW5uZWxfZGF0YSxcbiAgICAgICAgICAgICAgICAgICAgY2hhbm5lbDogX3RoaXMubmFtZVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIENoYW5uZWwucHJvdG90eXBlLnVuc3Vic2NyaWJlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLnN1YnNjcmliZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5wdXNoZXIuc2VuZF9ldmVudCgncHVzaGVyOnVuc3Vic2NyaWJlJywge1xuICAgICAgICAgICAgY2hhbm5lbDogdGhpcy5uYW1lXG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgQ2hhbm5lbC5wcm90b3R5cGUuY2FuY2VsU3Vic2NyaXB0aW9uID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLnN1YnNjcmlwdGlvbkNhbmNlbGxlZCA9IHRydWU7XG4gICAgfTtcbiAgICBDaGFubmVsLnByb3RvdHlwZS5yZWluc3RhdGVTdWJzY3JpcHRpb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuc3Vic2NyaXB0aW9uQ2FuY2VsbGVkID0gZmFsc2U7XG4gICAgfTtcbiAgICByZXR1cm4gQ2hhbm5lbDtcbn0oZGlzcGF0Y2hlcikpO1xuLyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyB2YXIgY2hhbm5lbHNfY2hhbm5lbCA9IChjaGFubmVsX0NoYW5uZWwpO1xuXG4vLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy9jb3JlL2NoYW5uZWxzL3ByaXZhdGVfY2hhbm5lbC50c1xudmFyIHByaXZhdGVfY2hhbm5lbF9leHRlbmRzID0gKHVuZGVmaW5lZCAmJiB1bmRlZmluZWQuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgIH07XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbn0pKCk7XG5cbnZhciBQcml2YXRlQ2hhbm5lbCA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgcHJpdmF0ZV9jaGFubmVsX2V4dGVuZHMoUHJpdmF0ZUNoYW5uZWwsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gUHJpdmF0ZUNoYW5uZWwoKSB7XG4gICAgICAgIHJldHVybiBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICB9XG4gICAgUHJpdmF0ZUNoYW5uZWwucHJvdG90eXBlLmF1dGhvcml6ZSA9IGZ1bmN0aW9uIChzb2NrZXRJZCwgY2FsbGJhY2spIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHVzaGVyLmNvbmZpZy5jaGFubmVsQXV0aG9yaXplcih7XG4gICAgICAgICAgICBjaGFubmVsTmFtZTogdGhpcy5uYW1lLFxuICAgICAgICAgICAgc29ja2V0SWQ6IHNvY2tldElkXG4gICAgICAgIH0sIGNhbGxiYWNrKTtcbiAgICB9O1xuICAgIHJldHVybiBQcml2YXRlQ2hhbm5lbDtcbn0oY2hhbm5lbHNfY2hhbm5lbCkpO1xuLyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyB2YXIgcHJpdmF0ZV9jaGFubmVsID0gKFByaXZhdGVDaGFubmVsKTtcblxuLy8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvY29yZS9jaGFubmVscy9tZW1iZXJzLnRzXG5cbnZhciBtZW1iZXJzX01lbWJlcnMgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIE1lbWJlcnMoKSB7XG4gICAgICAgIHRoaXMucmVzZXQoKTtcbiAgICB9XG4gICAgTWVtYmVycy5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodGhpcy5tZW1iZXJzLCBpZCkpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgaWQ6IGlkLFxuICAgICAgICAgICAgICAgIGluZm86IHRoaXMubWVtYmVyc1tpZF1cbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgIH07XG4gICAgTWVtYmVycy5wcm90b3R5cGUuZWFjaCA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBvYmplY3RBcHBseSh0aGlzLm1lbWJlcnMsIGZ1bmN0aW9uIChtZW1iZXIsIGlkKSB7XG4gICAgICAgICAgICBjYWxsYmFjayhfdGhpcy5nZXQoaWQpKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBNZW1iZXJzLnByb3RvdHlwZS5zZXRNeUlEID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICAgIHRoaXMubXlJRCA9IGlkO1xuICAgIH07XG4gICAgTWVtYmVycy5wcm90b3R5cGUub25TdWJzY3JpcHRpb24gPSBmdW5jdGlvbiAoc3Vic2NyaXB0aW9uRGF0YSkge1xuICAgICAgICB0aGlzLm1lbWJlcnMgPSBzdWJzY3JpcHRpb25EYXRhLnByZXNlbmNlLmhhc2g7XG4gICAgICAgIHRoaXMuY291bnQgPSBzdWJzY3JpcHRpb25EYXRhLnByZXNlbmNlLmNvdW50O1xuICAgICAgICB0aGlzLm1lID0gdGhpcy5nZXQodGhpcy5teUlEKTtcbiAgICB9O1xuICAgIE1lbWJlcnMucHJvdG90eXBlLmFkZE1lbWJlciA9IGZ1bmN0aW9uIChtZW1iZXJEYXRhKSB7XG4gICAgICAgIGlmICh0aGlzLmdldChtZW1iZXJEYXRhLnVzZXJfaWQpID09PSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLmNvdW50Kys7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5tZW1iZXJzW21lbWJlckRhdGEudXNlcl9pZF0gPSBtZW1iZXJEYXRhLnVzZXJfaW5mbztcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0KG1lbWJlckRhdGEudXNlcl9pZCk7XG4gICAgfTtcbiAgICBNZW1iZXJzLnByb3RvdHlwZS5yZW1vdmVNZW1iZXIgPSBmdW5jdGlvbiAobWVtYmVyRGF0YSkge1xuICAgICAgICB2YXIgbWVtYmVyID0gdGhpcy5nZXQobWVtYmVyRGF0YS51c2VyX2lkKTtcbiAgICAgICAgaWYgKG1lbWJlcikge1xuICAgICAgICAgICAgZGVsZXRlIHRoaXMubWVtYmVyc1ttZW1iZXJEYXRhLnVzZXJfaWRdO1xuICAgICAgICAgICAgdGhpcy5jb3VudC0tO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZW1iZXI7XG4gICAgfTtcbiAgICBNZW1iZXJzLnByb3RvdHlwZS5yZXNldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5tZW1iZXJzID0ge307XG4gICAgICAgIHRoaXMuY291bnQgPSAwO1xuICAgICAgICB0aGlzLm15SUQgPSBudWxsO1xuICAgICAgICB0aGlzLm1lID0gbnVsbDtcbiAgICB9O1xuICAgIHJldHVybiBNZW1iZXJzO1xufSgpKTtcbi8qIGhhcm1vbnkgZGVmYXVsdCBleHBvcnQgKi8gdmFyIG1lbWJlcnMgPSAobWVtYmVyc19NZW1iZXJzKTtcblxuLy8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvY29yZS9jaGFubmVscy9wcmVzZW5jZV9jaGFubmVsLnRzXG52YXIgcHJlc2VuY2VfY2hhbm5lbF9leHRlbmRzID0gKHVuZGVmaW5lZCAmJiB1bmRlZmluZWQuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgIH07XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbn0pKCk7XG52YXIgX19hd2FpdGVyID0gKHVuZGVmaW5lZCAmJiB1bmRlZmluZWQuX19hd2FpdGVyKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcbiAgICB9KTtcbn07XG52YXIgX19nZW5lcmF0b3IgPSAodW5kZWZpbmVkICYmIHVuZGVmaW5lZC5fX2dlbmVyYXRvcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIGJvZHkpIHtcbiAgICB2YXIgXyA9IHsgbGFiZWw6IDAsIHNlbnQ6IGZ1bmN0aW9uKCkgeyBpZiAodFswXSAmIDEpIHRocm93IHRbMV07IHJldHVybiB0WzFdOyB9LCB0cnlzOiBbXSwgb3BzOiBbXSB9LCBmLCB5LCB0LCBnO1xuICAgIHJldHVybiBnID0geyBuZXh0OiB2ZXJiKDApLCBcInRocm93XCI6IHZlcmIoMSksIFwicmV0dXJuXCI6IHZlcmIoMikgfSwgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIChnW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXM7IH0pLCBnO1xuICAgIGZ1bmN0aW9uIHZlcmIobikgeyByZXR1cm4gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHN0ZXAoW24sIHZdKTsgfTsgfVxuICAgIGZ1bmN0aW9uIHN0ZXAob3ApIHtcbiAgICAgICAgaWYgKGYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBleGVjdXRpbmcuXCIpO1xuICAgICAgICB3aGlsZSAoXykgdHJ5IHtcbiAgICAgICAgICAgIGlmIChmID0gMSwgeSAmJiAodCA9IG9wWzBdICYgMiA/IHlbXCJyZXR1cm5cIl0gOiBvcFswXSA/IHlbXCJ0aHJvd1wiXSB8fCAoKHQgPSB5W1wicmV0dXJuXCJdKSAmJiB0LmNhbGwoeSksIDApIDogeS5uZXh0KSAmJiAhKHQgPSB0LmNhbGwoeSwgb3BbMV0pKS5kb25lKSByZXR1cm4gdDtcbiAgICAgICAgICAgIGlmICh5ID0gMCwgdCkgb3AgPSBbb3BbMF0gJiAyLCB0LnZhbHVlXTtcbiAgICAgICAgICAgIHN3aXRjaCAob3BbMF0pIHtcbiAgICAgICAgICAgICAgICBjYXNlIDA6IGNhc2UgMTogdCA9IG9wOyBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDQ6IF8ubGFiZWwrKzsgcmV0dXJuIHsgdmFsdWU6IG9wWzFdLCBkb25lOiBmYWxzZSB9O1xuICAgICAgICAgICAgICAgIGNhc2UgNTogXy5sYWJlbCsrOyB5ID0gb3BbMV07IG9wID0gWzBdOyBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBjYXNlIDc6IG9wID0gXy5vcHMucG9wKCk7IF8udHJ5cy5wb3AoKTsgY29udGludWU7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEodCA9IF8udHJ5cywgdCA9IHQubGVuZ3RoID4gMCAmJiB0W3QubGVuZ3RoIC0gMV0pICYmIChvcFswXSA9PT0gNiB8fCBvcFswXSA9PT0gMikpIHsgXyA9IDA7IGNvbnRpbnVlOyB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gMyAmJiAoIXQgfHwgKG9wWzFdID4gdFswXSAmJiBvcFsxXSA8IHRbM10pKSkgeyBfLmxhYmVsID0gb3BbMV07IGJyZWFrOyB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gNiAmJiBfLmxhYmVsIDwgdFsxXSkgeyBfLmxhYmVsID0gdFsxXTsgdCA9IG9wOyBicmVhazsgfVxuICAgICAgICAgICAgICAgICAgICBpZiAodCAmJiBfLmxhYmVsIDwgdFsyXSkgeyBfLmxhYmVsID0gdFsyXTsgXy5vcHMucHVzaChvcCk7IGJyZWFrOyB9XG4gICAgICAgICAgICAgICAgICAgIGlmICh0WzJdKSBfLm9wcy5wb3AoKTtcbiAgICAgICAgICAgICAgICAgICAgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG9wID0gYm9keS5jYWxsKHRoaXNBcmcsIF8pO1xuICAgICAgICB9IGNhdGNoIChlKSB7IG9wID0gWzYsIGVdOyB5ID0gMDsgfSBmaW5hbGx5IHsgZiA9IHQgPSAwOyB9XG4gICAgICAgIGlmIChvcFswXSAmIDUpIHRocm93IG9wWzFdOyByZXR1cm4geyB2YWx1ZTogb3BbMF0gPyBvcFsxXSA6IHZvaWQgMCwgZG9uZTogdHJ1ZSB9O1xuICAgIH1cbn07XG5cblxuXG5cbnZhciBwcmVzZW5jZV9jaGFubmVsX1ByZXNlbmNlQ2hhbm5lbCA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgcHJlc2VuY2VfY2hhbm5lbF9leHRlbmRzKFByZXNlbmNlQ2hhbm5lbCwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBQcmVzZW5jZUNoYW5uZWwobmFtZSwgcHVzaGVyKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIG5hbWUsIHB1c2hlcikgfHwgdGhpcztcbiAgICAgICAgX3RoaXMubWVtYmVycyA9IG5ldyBtZW1iZXJzKCk7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgUHJlc2VuY2VDaGFubmVsLnByb3RvdHlwZS5hdXRob3JpemUgPSBmdW5jdGlvbiAoc29ja2V0SWQsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIF9zdXBlci5wcm90b3R5cGUuYXV0aG9yaXplLmNhbGwodGhpcywgc29ja2V0SWQsIGZ1bmN0aW9uIChlcnJvciwgYXV0aERhdGEpIHsgcmV0dXJuIF9fYXdhaXRlcihfdGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBjaGFubmVsRGF0YSwgc3VmZml4O1xuICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEhZXJyb3IpIHJldHVybiBbMywgM107XG4gICAgICAgICAgICAgICAgICAgICAgICBhdXRoRGF0YSA9IGF1dGhEYXRhO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEoYXV0aERhdGEuY2hhbm5lbF9kYXRhICE9IG51bGwpKSByZXR1cm4gWzMsIDFdO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2hhbm5lbERhdGEgPSBKU09OLnBhcnNlKGF1dGhEYXRhLmNoYW5uZWxfZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1lbWJlcnMuc2V0TXlJRChjaGFubmVsRGF0YS51c2VyX2lkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMywgM107XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTogcmV0dXJuIFs0LCB0aGlzLnB1c2hlci51c2VyLnNpZ25pbkRvbmVQcm9taXNlXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICAgICAgX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMucHVzaGVyLnVzZXIudXNlcl9kYXRhICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1lbWJlcnMuc2V0TXlJRCh0aGlzLnB1c2hlci51c2VyLnVzZXJfZGF0YS5pZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWZmaXggPSB1cmxfc3RvcmUuYnVpbGRMb2dTdWZmaXgoJ2F1dGhvcml6YXRpb25FbmRwb2ludCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvZ2dlci5lcnJvcihcIkludmFsaWQgYXV0aCByZXNwb25zZSBmb3IgY2hhbm5lbCAnXCIgKyB0aGlzLm5hbWUgKyBcIicsIFwiICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKFwiZXhwZWN0ZWQgJ2NoYW5uZWxfZGF0YScgZmllbGQuIFwiICsgc3VmZml4ICsgXCIsIFwiKSArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwib3IgdGhlIHVzZXIgc2hvdWxkIGJlIHNpZ25lZCBpbi5cIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soJ0ludmFsaWQgYXV0aCByZXNwb25zZScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMl07XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5sYWJlbCA9IDM7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKGVycm9yLCBhdXRoRGF0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzJdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTsgfSk7XG4gICAgfTtcbiAgICBQcmVzZW5jZUNoYW5uZWwucHJvdG90eXBlLmhhbmRsZUV2ZW50ID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIHZhciBldmVudE5hbWUgPSBldmVudC5ldmVudDtcbiAgICAgICAgaWYgKGV2ZW50TmFtZS5pbmRleE9mKCdwdXNoZXJfaW50ZXJuYWw6JykgPT09IDApIHtcbiAgICAgICAgICAgIHRoaXMuaGFuZGxlSW50ZXJuYWxFdmVudChldmVudCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB2YXIgZGF0YSA9IGV2ZW50LmRhdGE7XG4gICAgICAgICAgICB2YXIgbWV0YWRhdGEgPSB7fTtcbiAgICAgICAgICAgIGlmIChldmVudC51c2VyX2lkKSB7XG4gICAgICAgICAgICAgICAgbWV0YWRhdGEudXNlcl9pZCA9IGV2ZW50LnVzZXJfaWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmVtaXQoZXZlbnROYW1lLCBkYXRhLCBtZXRhZGF0YSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFByZXNlbmNlQ2hhbm5lbC5wcm90b3R5cGUuaGFuZGxlSW50ZXJuYWxFdmVudCA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICB2YXIgZXZlbnROYW1lID0gZXZlbnQuZXZlbnQ7XG4gICAgICAgIHZhciBkYXRhID0gZXZlbnQuZGF0YTtcbiAgICAgICAgc3dpdGNoIChldmVudE5hbWUpIHtcbiAgICAgICAgICAgIGNhc2UgJ3B1c2hlcl9pbnRlcm5hbDpzdWJzY3JpcHRpb25fc3VjY2VlZGVkJzpcbiAgICAgICAgICAgICAgICB0aGlzLmhhbmRsZVN1YnNjcmlwdGlvblN1Y2NlZWRlZEV2ZW50KGV2ZW50KTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ3B1c2hlcl9pbnRlcm5hbDpzdWJzY3JpcHRpb25fY291bnQnOlxuICAgICAgICAgICAgICAgIHRoaXMuaGFuZGxlU3Vic2NyaXB0aW9uQ291bnRFdmVudChldmVudCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdwdXNoZXJfaW50ZXJuYWw6bWVtYmVyX2FkZGVkJzpcbiAgICAgICAgICAgICAgICB2YXIgYWRkZWRNZW1iZXIgPSB0aGlzLm1lbWJlcnMuYWRkTWVtYmVyKGRhdGEpO1xuICAgICAgICAgICAgICAgIHRoaXMuZW1pdCgncHVzaGVyOm1lbWJlcl9hZGRlZCcsIGFkZGVkTWVtYmVyKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ3B1c2hlcl9pbnRlcm5hbDptZW1iZXJfcmVtb3ZlZCc6XG4gICAgICAgICAgICAgICAgdmFyIHJlbW92ZWRNZW1iZXIgPSB0aGlzLm1lbWJlcnMucmVtb3ZlTWVtYmVyKGRhdGEpO1xuICAgICAgICAgICAgICAgIGlmIChyZW1vdmVkTWVtYmVyKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZW1pdCgncHVzaGVyOm1lbWJlcl9yZW1vdmVkJywgcmVtb3ZlZE1lbWJlcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBQcmVzZW5jZUNoYW5uZWwucHJvdG90eXBlLmhhbmRsZVN1YnNjcmlwdGlvblN1Y2NlZWRlZEV2ZW50ID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIHRoaXMuc3Vic2NyaXB0aW9uUGVuZGluZyA9IGZhbHNlO1xuICAgICAgICB0aGlzLnN1YnNjcmliZWQgPSB0cnVlO1xuICAgICAgICBpZiAodGhpcy5zdWJzY3JpcHRpb25DYW5jZWxsZWQpIHtcbiAgICAgICAgICAgIHRoaXMucHVzaGVyLnVuc3Vic2NyaWJlKHRoaXMubmFtZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLm1lbWJlcnMub25TdWJzY3JpcHRpb24oZXZlbnQuZGF0YSk7XG4gICAgICAgICAgICB0aGlzLmVtaXQoJ3B1c2hlcjpzdWJzY3JpcHRpb25fc3VjY2VlZGVkJywgdGhpcy5tZW1iZXJzKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgUHJlc2VuY2VDaGFubmVsLnByb3RvdHlwZS5kaXNjb25uZWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLm1lbWJlcnMucmVzZXQoKTtcbiAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5kaXNjb25uZWN0LmNhbGwodGhpcyk7XG4gICAgfTtcbiAgICByZXR1cm4gUHJlc2VuY2VDaGFubmVsO1xufShwcml2YXRlX2NoYW5uZWwpKTtcbi8qIGhhcm1vbnkgZGVmYXVsdCBleHBvcnQgKi8gdmFyIHByZXNlbmNlX2NoYW5uZWwgPSAocHJlc2VuY2VfY2hhbm5lbF9QcmVzZW5jZUNoYW5uZWwpO1xuXG4vLyBFWFRFUk5BTCBNT0RVTEU6IC4vbm9kZV9tb2R1bGVzL0BzdGFibGVsaWIvdXRmOC9saWIvdXRmOC5qc1xudmFyIHV0ZjggPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpO1xuXG4vLyBFWFRFUk5BTCBNT0RVTEU6IC4vbm9kZV9tb2R1bGVzL0BzdGFibGVsaWIvYmFzZTY0L2xpYi9iYXNlNjQuanNcbnZhciBiYXNlNjQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuXG4vLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy9jb3JlL2NoYW5uZWxzL2VuY3J5cHRlZF9jaGFubmVsLnRzXG52YXIgZW5jcnlwdGVkX2NoYW5uZWxfZXh0ZW5kcyA9ICh1bmRlZmluZWQgJiYgdW5kZWZpbmVkLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcbiAgICAgICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcbiAgICAgICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgICAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICB9O1xuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xuXG5cblxuXG5cbnZhciBlbmNyeXB0ZWRfY2hhbm5lbF9FbmNyeXB0ZWRDaGFubmVsID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBlbmNyeXB0ZWRfY2hhbm5lbF9leHRlbmRzKEVuY3J5cHRlZENoYW5uZWwsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gRW5jcnlwdGVkQ2hhbm5lbChuYW1lLCBwdXNoZXIsIG5hY2wpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgbmFtZSwgcHVzaGVyKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5rZXkgPSBudWxsO1xuICAgICAgICBfdGhpcy5uYWNsID0gbmFjbDtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBFbmNyeXB0ZWRDaGFubmVsLnByb3RvdHlwZS5hdXRob3JpemUgPSBmdW5jdGlvbiAoc29ja2V0SWQsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIF9zdXBlci5wcm90b3R5cGUuYXV0aG9yaXplLmNhbGwodGhpcywgc29ja2V0SWQsIGZ1bmN0aW9uIChlcnJvciwgYXV0aERhdGEpIHtcbiAgICAgICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKGVycm9yLCBhdXRoRGF0YSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHNoYXJlZFNlY3JldCA9IGF1dGhEYXRhWydzaGFyZWRfc2VjcmV0J107XG4gICAgICAgICAgICBpZiAoIXNoYXJlZFNlY3JldCkge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKG5ldyBFcnJvcihcIk5vIHNoYXJlZF9zZWNyZXQga2V5IGluIGF1dGggcGF5bG9hZCBmb3IgZW5jcnlwdGVkIGNoYW5uZWw6IFwiICsgX3RoaXMubmFtZSksIG51bGwpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF90aGlzLmtleSA9IE9iamVjdChiYXNlNjRbXCJkZWNvZGVcIl0pKHNoYXJlZFNlY3JldCk7XG4gICAgICAgICAgICBkZWxldGUgYXV0aERhdGFbJ3NoYXJlZF9zZWNyZXQnXTtcbiAgICAgICAgICAgIGNhbGxiYWNrKG51bGwsIGF1dGhEYXRhKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBFbmNyeXB0ZWRDaGFubmVsLnByb3RvdHlwZS50cmlnZ2VyID0gZnVuY3Rpb24gKGV2ZW50LCBkYXRhKSB7XG4gICAgICAgIHRocm93IG5ldyBVbnN1cHBvcnRlZEZlYXR1cmUoJ0NsaWVudCBldmVudHMgYXJlIG5vdCBjdXJyZW50bHkgc3VwcG9ydGVkIGZvciBlbmNyeXB0ZWQgY2hhbm5lbHMnKTtcbiAgICB9O1xuICAgIEVuY3J5cHRlZENoYW5uZWwucHJvdG90eXBlLmhhbmRsZUV2ZW50ID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIHZhciBldmVudE5hbWUgPSBldmVudC5ldmVudDtcbiAgICAgICAgdmFyIGRhdGEgPSBldmVudC5kYXRhO1xuICAgICAgICBpZiAoZXZlbnROYW1lLmluZGV4T2YoJ3B1c2hlcl9pbnRlcm5hbDonKSA9PT0gMCB8fFxuICAgICAgICAgICAgZXZlbnROYW1lLmluZGV4T2YoJ3B1c2hlcjonKSA9PT0gMCkge1xuICAgICAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5oYW5kbGVFdmVudC5jYWxsKHRoaXMsIGV2ZW50KTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmhhbmRsZUVuY3J5cHRlZEV2ZW50KGV2ZW50TmFtZSwgZGF0YSk7XG4gICAgfTtcbiAgICBFbmNyeXB0ZWRDaGFubmVsLnByb3RvdHlwZS5oYW5kbGVFbmNyeXB0ZWRFdmVudCA9IGZ1bmN0aW9uIChldmVudCwgZGF0YSkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBpZiAoIXRoaXMua2V5KSB7XG4gICAgICAgICAgICBsb2dnZXIuZGVidWcoJ1JlY2VpdmVkIGVuY3J5cHRlZCBldmVudCBiZWZvcmUga2V5IGhhcyBiZWVuIHJldHJpZXZlZCBmcm9tIHRoZSBhdXRoRW5kcG9pbnQnKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWRhdGEuY2lwaGVydGV4dCB8fCAhZGF0YS5ub25jZSkge1xuICAgICAgICAgICAgbG9nZ2VyLmVycm9yKCdVbmV4cGVjdGVkIGZvcm1hdCBmb3IgZW5jcnlwdGVkIGV2ZW50LCBleHBlY3RlZCBvYmplY3Qgd2l0aCBgY2lwaGVydGV4dGAgYW5kIGBub25jZWAgZmllbGRzLCBnb3Q6ICcgK1xuICAgICAgICAgICAgICAgIGRhdGEpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBjaXBoZXJUZXh0ID0gT2JqZWN0KGJhc2U2NFtcImRlY29kZVwiXSkoZGF0YS5jaXBoZXJ0ZXh0KTtcbiAgICAgICAgaWYgKGNpcGhlclRleHQubGVuZ3RoIDwgdGhpcy5uYWNsLnNlY3JldGJveC5vdmVyaGVhZExlbmd0aCkge1xuICAgICAgICAgICAgbG9nZ2VyLmVycm9yKFwiRXhwZWN0ZWQgZW5jcnlwdGVkIGV2ZW50IGNpcGhlcnRleHQgbGVuZ3RoIHRvIGJlIFwiICsgdGhpcy5uYWNsLnNlY3JldGJveC5vdmVyaGVhZExlbmd0aCArIFwiLCBnb3Q6IFwiICsgY2lwaGVyVGV4dC5sZW5ndGgpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBub25jZSA9IE9iamVjdChiYXNlNjRbXCJkZWNvZGVcIl0pKGRhdGEubm9uY2UpO1xuICAgICAgICBpZiAobm9uY2UubGVuZ3RoIDwgdGhpcy5uYWNsLnNlY3JldGJveC5ub25jZUxlbmd0aCkge1xuICAgICAgICAgICAgbG9nZ2VyLmVycm9yKFwiRXhwZWN0ZWQgZW5jcnlwdGVkIGV2ZW50IG5vbmNlIGxlbmd0aCB0byBiZSBcIiArIHRoaXMubmFjbC5zZWNyZXRib3gubm9uY2VMZW5ndGggKyBcIiwgZ290OiBcIiArIG5vbmNlLmxlbmd0aCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGJ5dGVzID0gdGhpcy5uYWNsLnNlY3JldGJveC5vcGVuKGNpcGhlclRleHQsIG5vbmNlLCB0aGlzLmtleSk7XG4gICAgICAgIGlmIChieXRlcyA9PT0gbnVsbCkge1xuICAgICAgICAgICAgbG9nZ2VyLmRlYnVnKCdGYWlsZWQgdG8gZGVjcnlwdCBhbiBldmVudCwgcHJvYmFibHkgYmVjYXVzZSBpdCB3YXMgZW5jcnlwdGVkIHdpdGggYSBkaWZmZXJlbnQga2V5LiBGZXRjaGluZyBhIG5ldyBrZXkgZnJvbSB0aGUgYXV0aEVuZHBvaW50Li4uJyk7XG4gICAgICAgICAgICB0aGlzLmF1dGhvcml6ZSh0aGlzLnB1c2hlci5jb25uZWN0aW9uLnNvY2tldF9pZCwgZnVuY3Rpb24gKGVycm9yLCBhdXRoRGF0YSkge1xuICAgICAgICAgICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICBsb2dnZXIuZXJyb3IoXCJGYWlsZWQgdG8gbWFrZSBhIHJlcXVlc3QgdG8gdGhlIGF1dGhFbmRwb2ludDogXCIgKyBhdXRoRGF0YSArIFwiLiBVbmFibGUgdG8gZmV0Y2ggbmV3IGtleSwgc28gZHJvcHBpbmcgZW5jcnlwdGVkIGV2ZW50XCIpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJ5dGVzID0gX3RoaXMubmFjbC5zZWNyZXRib3gub3BlbihjaXBoZXJUZXh0LCBub25jZSwgX3RoaXMua2V5KTtcbiAgICAgICAgICAgICAgICBpZiAoYnl0ZXMgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLmVycm9yKFwiRmFpbGVkIHRvIGRlY3J5cHQgZXZlbnQgd2l0aCBuZXcga2V5LiBEcm9wcGluZyBlbmNyeXB0ZWQgZXZlbnRcIik7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgX3RoaXMuZW1pdChldmVudCwgX3RoaXMuZ2V0RGF0YVRvRW1pdChieXRlcykpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZW1pdChldmVudCwgdGhpcy5nZXREYXRhVG9FbWl0KGJ5dGVzKSk7XG4gICAgfTtcbiAgICBFbmNyeXB0ZWRDaGFubmVsLnByb3RvdHlwZS5nZXREYXRhVG9FbWl0ID0gZnVuY3Rpb24gKGJ5dGVzKSB7XG4gICAgICAgIHZhciByYXcgPSBPYmplY3QodXRmOFtcImRlY29kZVwiXSkoYnl0ZXMpO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIEpTT04ucGFyc2UocmF3KTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoX2EpIHtcbiAgICAgICAgICAgIHJldHVybiByYXc7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBFbmNyeXB0ZWRDaGFubmVsO1xufShwcml2YXRlX2NoYW5uZWwpKTtcbi8qIGhhcm1vbnkgZGVmYXVsdCBleHBvcnQgKi8gdmFyIGVuY3J5cHRlZF9jaGFubmVsID0gKGVuY3J5cHRlZF9jaGFubmVsX0VuY3J5cHRlZENoYW5uZWwpO1xuXG4vLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy9jb3JlL2Nvbm5lY3Rpb24vY29ubmVjdGlvbl9tYW5hZ2VyLnRzXG52YXIgY29ubmVjdGlvbl9tYW5hZ2VyX2V4dGVuZHMgPSAodW5kZWZpbmVkICYmIHVuZGVmaW5lZC5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcbiAgICAgICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgfTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcblxuXG5cblxuXG52YXIgY29ubmVjdGlvbl9tYW5hZ2VyX0Nvbm5lY3Rpb25NYW5hZ2VyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBjb25uZWN0aW9uX21hbmFnZXJfZXh0ZW5kcyhDb25uZWN0aW9uTWFuYWdlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBDb25uZWN0aW9uTWFuYWdlcihrZXksIG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuc3RhdGUgPSAnaW5pdGlhbGl6ZWQnO1xuICAgICAgICBfdGhpcy5jb25uZWN0aW9uID0gbnVsbDtcbiAgICAgICAgX3RoaXMua2V5ID0ga2V5O1xuICAgICAgICBfdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICAgICAgX3RoaXMudGltZWxpbmUgPSBfdGhpcy5vcHRpb25zLnRpbWVsaW5lO1xuICAgICAgICBfdGhpcy51c2luZ1RMUyA9IF90aGlzLm9wdGlvbnMudXNlVExTO1xuICAgICAgICBfdGhpcy5lcnJvckNhbGxiYWNrcyA9IF90aGlzLmJ1aWxkRXJyb3JDYWxsYmFja3MoKTtcbiAgICAgICAgX3RoaXMuY29ubmVjdGlvbkNhbGxiYWNrcyA9IF90aGlzLmJ1aWxkQ29ubmVjdGlvbkNhbGxiYWNrcyhfdGhpcy5lcnJvckNhbGxiYWNrcyk7XG4gICAgICAgIF90aGlzLmhhbmRzaGFrZUNhbGxiYWNrcyA9IF90aGlzLmJ1aWxkSGFuZHNoYWtlQ2FsbGJhY2tzKF90aGlzLmVycm9yQ2FsbGJhY2tzKTtcbiAgICAgICAgdmFyIE5ldHdvcmsgPSBydW50aW1lLmdldE5ldHdvcmsoKTtcbiAgICAgICAgTmV0d29yay5iaW5kKCdvbmxpbmUnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBfdGhpcy50aW1lbGluZS5pbmZvKHsgbmV0aW5mbzogJ29ubGluZScgfSk7XG4gICAgICAgICAgICBpZiAoX3RoaXMuc3RhdGUgPT09ICdjb25uZWN0aW5nJyB8fCBfdGhpcy5zdGF0ZSA9PT0gJ3VuYXZhaWxhYmxlJykge1xuICAgICAgICAgICAgICAgIF90aGlzLnJldHJ5SW4oMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBOZXR3b3JrLmJpbmQoJ29mZmxpbmUnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBfdGhpcy50aW1lbGluZS5pbmZvKHsgbmV0aW5mbzogJ29mZmxpbmUnIH0pO1xuICAgICAgICAgICAgaWYgKF90aGlzLmNvbm5lY3Rpb24pIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5zZW5kQWN0aXZpdHlDaGVjaygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgX3RoaXMudXBkYXRlU3RyYXRlZ3koKTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBDb25uZWN0aW9uTWFuYWdlci5wcm90b3R5cGUuY29ubmVjdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuY29ubmVjdGlvbiB8fCB0aGlzLnJ1bm5lcikge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdGhpcy5zdHJhdGVneS5pc1N1cHBvcnRlZCgpKSB7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZVN0YXRlKCdmYWlsZWQnKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnVwZGF0ZVN0YXRlKCdjb25uZWN0aW5nJyk7XG4gICAgICAgIHRoaXMuc3RhcnRDb25uZWN0aW5nKCk7XG4gICAgICAgIHRoaXMuc2V0VW5hdmFpbGFibGVUaW1lcigpO1xuICAgIH07XG4gICAgQ29ubmVjdGlvbk1hbmFnZXIucHJvdG90eXBlLnNlbmQgPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICBpZiAodGhpcy5jb25uZWN0aW9uKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jb25uZWN0aW9uLnNlbmQoZGF0YSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIENvbm5lY3Rpb25NYW5hZ2VyLnByb3RvdHlwZS5zZW5kX2V2ZW50ID0gZnVuY3Rpb24gKG5hbWUsIGRhdGEsIGNoYW5uZWwpIHtcbiAgICAgICAgaWYgKHRoaXMuY29ubmVjdGlvbikge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29ubmVjdGlvbi5zZW5kX2V2ZW50KG5hbWUsIGRhdGEsIGNoYW5uZWwpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBDb25uZWN0aW9uTWFuYWdlci5wcm90b3R5cGUuZGlzY29ubmVjdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5kaXNjb25uZWN0SW50ZXJuYWxseSgpO1xuICAgICAgICB0aGlzLnVwZGF0ZVN0YXRlKCdkaXNjb25uZWN0ZWQnKTtcbiAgICB9O1xuICAgIENvbm5lY3Rpb25NYW5hZ2VyLnByb3RvdHlwZS5pc1VzaW5nVExTID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy51c2luZ1RMUztcbiAgICB9O1xuICAgIENvbm5lY3Rpb25NYW5hZ2VyLnByb3RvdHlwZS5zdGFydENvbm5lY3RpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciBjYWxsYmFjayA9IGZ1bmN0aW9uIChlcnJvciwgaGFuZHNoYWtlKSB7XG4gICAgICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5ydW5uZXIgPSBfdGhpcy5zdHJhdGVneS5jb25uZWN0KDAsIGNhbGxiYWNrKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmIChoYW5kc2hha2UuYWN0aW9uID09PSAnZXJyb3InKSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLmVtaXQoJ2Vycm9yJywge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ0hhbmRzaGFrZUVycm9yJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yOiBoYW5kc2hha2UuZXJyb3JcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLnRpbWVsaW5lLmVycm9yKHsgaGFuZHNoYWtlRXJyb3I6IGhhbmRzaGFrZS5lcnJvciB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLmFib3J0Q29ubmVjdGluZygpO1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5oYW5kc2hha2VDYWxsYmFja3NbaGFuZHNoYWtlLmFjdGlvbl0oaGFuZHNoYWtlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMucnVubmVyID0gdGhpcy5zdHJhdGVneS5jb25uZWN0KDAsIGNhbGxiYWNrKTtcbiAgICB9O1xuICAgIENvbm5lY3Rpb25NYW5hZ2VyLnByb3RvdHlwZS5hYm9ydENvbm5lY3RpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLnJ1bm5lcikge1xuICAgICAgICAgICAgdGhpcy5ydW5uZXIuYWJvcnQoKTtcbiAgICAgICAgICAgIHRoaXMucnVubmVyID0gbnVsbDtcbiAgICAgICAgfVxuICAgIH07XG4gICAgQ29ubmVjdGlvbk1hbmFnZXIucHJvdG90eXBlLmRpc2Nvbm5lY3RJbnRlcm5hbGx5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmFib3J0Q29ubmVjdGluZygpO1xuICAgICAgICB0aGlzLmNsZWFyUmV0cnlUaW1lcigpO1xuICAgICAgICB0aGlzLmNsZWFyVW5hdmFpbGFibGVUaW1lcigpO1xuICAgICAgICBpZiAodGhpcy5jb25uZWN0aW9uKSB7XG4gICAgICAgICAgICB2YXIgY29ubmVjdGlvbiA9IHRoaXMuYWJhbmRvbkNvbm5lY3Rpb24oKTtcbiAgICAgICAgICAgIGNvbm5lY3Rpb24uY2xvc2UoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgQ29ubmVjdGlvbk1hbmFnZXIucHJvdG90eXBlLnVwZGF0ZVN0cmF0ZWd5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLnN0cmF0ZWd5ID0gdGhpcy5vcHRpb25zLmdldFN0cmF0ZWd5KHtcbiAgICAgICAgICAgIGtleTogdGhpcy5rZXksXG4gICAgICAgICAgICB0aW1lbGluZTogdGhpcy50aW1lbGluZSxcbiAgICAgICAgICAgIHVzZVRMUzogdGhpcy51c2luZ1RMU1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIENvbm5lY3Rpb25NYW5hZ2VyLnByb3RvdHlwZS5yZXRyeUluID0gZnVuY3Rpb24gKGRlbGF5KSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHRoaXMudGltZWxpbmUuaW5mbyh7IGFjdGlvbjogJ3JldHJ5JywgZGVsYXk6IGRlbGF5IH0pO1xuICAgICAgICBpZiAoZGVsYXkgPiAwKSB7XG4gICAgICAgICAgICB0aGlzLmVtaXQoJ2Nvbm5lY3RpbmdfaW4nLCBNYXRoLnJvdW5kKGRlbGF5IC8gMTAwMCkpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucmV0cnlUaW1lciA9IG5ldyBPbmVPZmZUaW1lcihkZWxheSB8fCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBfdGhpcy5kaXNjb25uZWN0SW50ZXJuYWxseSgpO1xuICAgICAgICAgICAgX3RoaXMuY29ubmVjdCgpO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIENvbm5lY3Rpb25NYW5hZ2VyLnByb3RvdHlwZS5jbGVhclJldHJ5VGltZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLnJldHJ5VGltZXIpIHtcbiAgICAgICAgICAgIHRoaXMucmV0cnlUaW1lci5lbnN1cmVBYm9ydGVkKCk7XG4gICAgICAgICAgICB0aGlzLnJldHJ5VGltZXIgPSBudWxsO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBDb25uZWN0aW9uTWFuYWdlci5wcm90b3R5cGUuc2V0VW5hdmFpbGFibGVUaW1lciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdGhpcy51bmF2YWlsYWJsZVRpbWVyID0gbmV3IE9uZU9mZlRpbWVyKHRoaXMub3B0aW9ucy51bmF2YWlsYWJsZVRpbWVvdXQsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIF90aGlzLnVwZGF0ZVN0YXRlKCd1bmF2YWlsYWJsZScpO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIENvbm5lY3Rpb25NYW5hZ2VyLnByb3RvdHlwZS5jbGVhclVuYXZhaWxhYmxlVGltZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLnVuYXZhaWxhYmxlVGltZXIpIHtcbiAgICAgICAgICAgIHRoaXMudW5hdmFpbGFibGVUaW1lci5lbnN1cmVBYm9ydGVkKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIENvbm5lY3Rpb25NYW5hZ2VyLnByb3RvdHlwZS5zZW5kQWN0aXZpdHlDaGVjayA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdGhpcy5zdG9wQWN0aXZpdHlDaGVjaygpO1xuICAgICAgICB0aGlzLmNvbm5lY3Rpb24ucGluZygpO1xuICAgICAgICB0aGlzLmFjdGl2aXR5VGltZXIgPSBuZXcgT25lT2ZmVGltZXIodGhpcy5vcHRpb25zLnBvbmdUaW1lb3V0LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBfdGhpcy50aW1lbGluZS5lcnJvcih7IHBvbmdfdGltZWRfb3V0OiBfdGhpcy5vcHRpb25zLnBvbmdUaW1lb3V0IH0pO1xuICAgICAgICAgICAgX3RoaXMucmV0cnlJbigwKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBDb25uZWN0aW9uTWFuYWdlci5wcm90b3R5cGUucmVzZXRBY3Rpdml0eUNoZWNrID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB0aGlzLnN0b3BBY3Rpdml0eUNoZWNrKCk7XG4gICAgICAgIGlmICh0aGlzLmNvbm5lY3Rpb24gJiYgIXRoaXMuY29ubmVjdGlvbi5oYW5kbGVzQWN0aXZpdHlDaGVja3MoKSkge1xuICAgICAgICAgICAgdGhpcy5hY3Rpdml0eVRpbWVyID0gbmV3IE9uZU9mZlRpbWVyKHRoaXMuYWN0aXZpdHlUaW1lb3V0LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuc2VuZEFjdGl2aXR5Q2hlY2soKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBDb25uZWN0aW9uTWFuYWdlci5wcm90b3R5cGUuc3RvcEFjdGl2aXR5Q2hlY2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLmFjdGl2aXR5VGltZXIpIHtcbiAgICAgICAgICAgIHRoaXMuYWN0aXZpdHlUaW1lci5lbnN1cmVBYm9ydGVkKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIENvbm5lY3Rpb25NYW5hZ2VyLnByb3RvdHlwZS5idWlsZENvbm5lY3Rpb25DYWxsYmFja3MgPSBmdW5jdGlvbiAoZXJyb3JDYWxsYmFja3MpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgcmV0dXJuIGV4dGVuZCh7fSwgZXJyb3JDYWxsYmFja3MsIHtcbiAgICAgICAgICAgIG1lc3NhZ2U6IGZ1bmN0aW9uIChtZXNzYWdlKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMucmVzZXRBY3Rpdml0eUNoZWNrKCk7XG4gICAgICAgICAgICAgICAgX3RoaXMuZW1pdCgnbWVzc2FnZScsIG1lc3NhZ2UpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHBpbmc6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5zZW5kX2V2ZW50KCdwdXNoZXI6cG9uZycsIHt9KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBhY3Rpdml0eTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIF90aGlzLnJlc2V0QWN0aXZpdHlDaGVjaygpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGVycm9yOiBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5lbWl0KCdlcnJvcicsIGVycm9yKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjbG9zZWQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5hYmFuZG9uQ29ubmVjdGlvbigpO1xuICAgICAgICAgICAgICAgIGlmIChfdGhpcy5zaG91bGRSZXRyeSgpKSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLnJldHJ5SW4oMTAwMCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIENvbm5lY3Rpb25NYW5hZ2VyLnByb3RvdHlwZS5idWlsZEhhbmRzaGFrZUNhbGxiYWNrcyA9IGZ1bmN0aW9uIChlcnJvckNhbGxiYWNrcykge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICByZXR1cm4gZXh0ZW5kKHt9LCBlcnJvckNhbGxiYWNrcywge1xuICAgICAgICAgICAgY29ubmVjdGVkOiBmdW5jdGlvbiAoaGFuZHNoYWtlKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuYWN0aXZpdHlUaW1lb3V0ID0gTWF0aC5taW4oX3RoaXMub3B0aW9ucy5hY3Rpdml0eVRpbWVvdXQsIGhhbmRzaGFrZS5hY3Rpdml0eVRpbWVvdXQsIGhhbmRzaGFrZS5jb25uZWN0aW9uLmFjdGl2aXR5VGltZW91dCB8fCBJbmZpbml0eSk7XG4gICAgICAgICAgICAgICAgX3RoaXMuY2xlYXJVbmF2YWlsYWJsZVRpbWVyKCk7XG4gICAgICAgICAgICAgICAgX3RoaXMuc2V0Q29ubmVjdGlvbihoYW5kc2hha2UuY29ubmVjdGlvbik7XG4gICAgICAgICAgICAgICAgX3RoaXMuc29ja2V0X2lkID0gX3RoaXMuY29ubmVjdGlvbi5pZDtcbiAgICAgICAgICAgICAgICBfdGhpcy51cGRhdGVTdGF0ZSgnY29ubmVjdGVkJywgeyBzb2NrZXRfaWQ6IF90aGlzLnNvY2tldF9pZCB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBDb25uZWN0aW9uTWFuYWdlci5wcm90b3R5cGUuYnVpbGRFcnJvckNhbGxiYWNrcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIHdpdGhFcnJvckVtaXR0ZWQgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgaWYgKHJlc3VsdC5lcnJvcikge1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5lbWl0KCdlcnJvcicsIHsgdHlwZTogJ1dlYlNvY2tldEVycm9yJywgZXJyb3I6IHJlc3VsdC5lcnJvciB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2FsbGJhY2socmVzdWx0KTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0bHNfb25seTogd2l0aEVycm9yRW1pdHRlZChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMudXNpbmdUTFMgPSB0cnVlO1xuICAgICAgICAgICAgICAgIF90aGlzLnVwZGF0ZVN0cmF0ZWd5KCk7XG4gICAgICAgICAgICAgICAgX3RoaXMucmV0cnlJbigwKTtcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgcmVmdXNlZDogd2l0aEVycm9yRW1pdHRlZChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuZGlzY29ubmVjdCgpO1xuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBiYWNrb2ZmOiB3aXRoRXJyb3JFbWl0dGVkKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5yZXRyeUluKDEwMDApO1xuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICByZXRyeTogd2l0aEVycm9yRW1pdHRlZChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMucmV0cnlJbigwKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH07XG4gICAgfTtcbiAgICBDb25uZWN0aW9uTWFuYWdlci5wcm90b3R5cGUuc2V0Q29ubmVjdGlvbiA9IGZ1bmN0aW9uIChjb25uZWN0aW9uKSB7XG4gICAgICAgIHRoaXMuY29ubmVjdGlvbiA9IGNvbm5lY3Rpb247XG4gICAgICAgIGZvciAodmFyIGV2ZW50IGluIHRoaXMuY29ubmVjdGlvbkNhbGxiYWNrcykge1xuICAgICAgICAgICAgdGhpcy5jb25uZWN0aW9uLmJpbmQoZXZlbnQsIHRoaXMuY29ubmVjdGlvbkNhbGxiYWNrc1tldmVudF0pO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucmVzZXRBY3Rpdml0eUNoZWNrKCk7XG4gICAgfTtcbiAgICBDb25uZWN0aW9uTWFuYWdlci5wcm90b3R5cGUuYWJhbmRvbkNvbm5lY3Rpb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghdGhpcy5jb25uZWN0aW9uKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zdG9wQWN0aXZpdHlDaGVjaygpO1xuICAgICAgICBmb3IgKHZhciBldmVudCBpbiB0aGlzLmNvbm5lY3Rpb25DYWxsYmFja3MpIHtcbiAgICAgICAgICAgIHRoaXMuY29ubmVjdGlvbi51bmJpbmQoZXZlbnQsIHRoaXMuY29ubmVjdGlvbkNhbGxiYWNrc1tldmVudF0pO1xuICAgICAgICB9XG4gICAgICAgIHZhciBjb25uZWN0aW9uID0gdGhpcy5jb25uZWN0aW9uO1xuICAgICAgICB0aGlzLmNvbm5lY3Rpb24gPSBudWxsO1xuICAgICAgICByZXR1cm4gY29ubmVjdGlvbjtcbiAgICB9O1xuICAgIENvbm5lY3Rpb25NYW5hZ2VyLnByb3RvdHlwZS51cGRhdGVTdGF0ZSA9IGZ1bmN0aW9uIChuZXdTdGF0ZSwgZGF0YSkge1xuICAgICAgICB2YXIgcHJldmlvdXNTdGF0ZSA9IHRoaXMuc3RhdGU7XG4gICAgICAgIHRoaXMuc3RhdGUgPSBuZXdTdGF0ZTtcbiAgICAgICAgaWYgKHByZXZpb3VzU3RhdGUgIT09IG5ld1N0YXRlKSB7XG4gICAgICAgICAgICB2YXIgbmV3U3RhdGVEZXNjcmlwdGlvbiA9IG5ld1N0YXRlO1xuICAgICAgICAgICAgaWYgKG5ld1N0YXRlRGVzY3JpcHRpb24gPT09ICdjb25uZWN0ZWQnKSB7XG4gICAgICAgICAgICAgICAgbmV3U3RhdGVEZXNjcmlwdGlvbiArPSAnIHdpdGggbmV3IHNvY2tldCBJRCAnICsgZGF0YS5zb2NrZXRfaWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsb2dnZXIuZGVidWcoJ1N0YXRlIGNoYW5nZWQnLCBwcmV2aW91c1N0YXRlICsgJyAtPiAnICsgbmV3U3RhdGVEZXNjcmlwdGlvbik7XG4gICAgICAgICAgICB0aGlzLnRpbWVsaW5lLmluZm8oeyBzdGF0ZTogbmV3U3RhdGUsIHBhcmFtczogZGF0YSB9KTtcbiAgICAgICAgICAgIHRoaXMuZW1pdCgnc3RhdGVfY2hhbmdlJywgeyBwcmV2aW91czogcHJldmlvdXNTdGF0ZSwgY3VycmVudDogbmV3U3RhdGUgfSk7XG4gICAgICAgICAgICB0aGlzLmVtaXQobmV3U3RhdGUsIGRhdGEpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBDb25uZWN0aW9uTWFuYWdlci5wcm90b3R5cGUuc2hvdWxkUmV0cnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnN0YXRlID09PSAnY29ubmVjdGluZycgfHwgdGhpcy5zdGF0ZSA9PT0gJ2Nvbm5lY3RlZCc7XG4gICAgfTtcbiAgICByZXR1cm4gQ29ubmVjdGlvbk1hbmFnZXI7XG59KGRpc3BhdGNoZXIpKTtcbi8qIGhhcm1vbnkgZGVmYXVsdCBleHBvcnQgKi8gdmFyIGNvbm5lY3Rpb25fbWFuYWdlciA9IChjb25uZWN0aW9uX21hbmFnZXJfQ29ubmVjdGlvbk1hbmFnZXIpO1xuXG4vLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy9jb3JlL2NoYW5uZWxzL2NoYW5uZWxzLnRzXG5cblxuXG5cbnZhciBjaGFubmVsc19DaGFubmVscyA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQ2hhbm5lbHMoKSB7XG4gICAgICAgIHRoaXMuY2hhbm5lbHMgPSB7fTtcbiAgICB9XG4gICAgQ2hhbm5lbHMucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIChuYW1lLCBwdXNoZXIpIHtcbiAgICAgICAgaWYgKCF0aGlzLmNoYW5uZWxzW25hbWVdKSB7XG4gICAgICAgICAgICB0aGlzLmNoYW5uZWxzW25hbWVdID0gY3JlYXRlQ2hhbm5lbChuYW1lLCBwdXNoZXIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmNoYW5uZWxzW25hbWVdO1xuICAgIH07XG4gICAgQ2hhbm5lbHMucHJvdG90eXBlLmFsbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlcyh0aGlzLmNoYW5uZWxzKTtcbiAgICB9O1xuICAgIENoYW5uZWxzLnByb3RvdHlwZS5maW5kID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2hhbm5lbHNbbmFtZV07XG4gICAgfTtcbiAgICBDaGFubmVscy5wcm90b3R5cGUucmVtb3ZlID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgdmFyIGNoYW5uZWwgPSB0aGlzLmNoYW5uZWxzW25hbWVdO1xuICAgICAgICBkZWxldGUgdGhpcy5jaGFubmVsc1tuYW1lXTtcbiAgICAgICAgcmV0dXJuIGNoYW5uZWw7XG4gICAgfTtcbiAgICBDaGFubmVscy5wcm90b3R5cGUuZGlzY29ubmVjdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgb2JqZWN0QXBwbHkodGhpcy5jaGFubmVscywgZnVuY3Rpb24gKGNoYW5uZWwpIHtcbiAgICAgICAgICAgIGNoYW5uZWwuZGlzY29ubmVjdCgpO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIHJldHVybiBDaGFubmVscztcbn0oKSk7XG4vKiBoYXJtb255IGRlZmF1bHQgZXhwb3J0ICovIHZhciBjaGFubmVscyA9IChjaGFubmVsc19DaGFubmVscyk7XG5mdW5jdGlvbiBjcmVhdGVDaGFubmVsKG5hbWUsIHB1c2hlcikge1xuICAgIGlmIChuYW1lLmluZGV4T2YoJ3ByaXZhdGUtZW5jcnlwdGVkLScpID09PSAwKSB7XG4gICAgICAgIGlmIChwdXNoZXIuY29uZmlnLm5hY2wpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWN0b3J5LmNyZWF0ZUVuY3J5cHRlZENoYW5uZWwobmFtZSwgcHVzaGVyLCBwdXNoZXIuY29uZmlnLm5hY2wpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBlcnJNc2cgPSAnVHJpZWQgdG8gc3Vic2NyaWJlIHRvIGEgcHJpdmF0ZS1lbmNyeXB0ZWQtIGNoYW5uZWwgYnV0IG5vIG5hY2wgaW1wbGVtZW50YXRpb24gYXZhaWxhYmxlJztcbiAgICAgICAgdmFyIHN1ZmZpeCA9IHVybF9zdG9yZS5idWlsZExvZ1N1ZmZpeCgnZW5jcnlwdGVkQ2hhbm5lbFN1cHBvcnQnKTtcbiAgICAgICAgdGhyb3cgbmV3IFVuc3VwcG9ydGVkRmVhdHVyZShlcnJNc2cgKyBcIi4gXCIgKyBzdWZmaXgpO1xuICAgIH1cbiAgICBlbHNlIGlmIChuYW1lLmluZGV4T2YoJ3ByaXZhdGUtJykgPT09IDApIHtcbiAgICAgICAgcmV0dXJuIGZhY3RvcnkuY3JlYXRlUHJpdmF0ZUNoYW5uZWwobmFtZSwgcHVzaGVyKTtcbiAgICB9XG4gICAgZWxzZSBpZiAobmFtZS5pbmRleE9mKCdwcmVzZW5jZS0nKSA9PT0gMCkge1xuICAgICAgICByZXR1cm4gZmFjdG9yeS5jcmVhdGVQcmVzZW5jZUNoYW5uZWwobmFtZSwgcHVzaGVyKTtcbiAgICB9XG4gICAgZWxzZSBpZiAobmFtZS5pbmRleE9mKCcjJykgPT09IDApIHtcbiAgICAgICAgdGhyb3cgbmV3IEJhZENoYW5uZWxOYW1lKCdDYW5ub3QgY3JlYXRlIGEgY2hhbm5lbCB3aXRoIG5hbWUgXCInICsgbmFtZSArICdcIi4nKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBmYWN0b3J5LmNyZWF0ZUNoYW5uZWwobmFtZSwgcHVzaGVyKTtcbiAgICB9XG59XG5cbi8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL2NvcmUvdXRpbHMvZmFjdG9yeS50c1xuXG5cblxuXG5cblxuXG5cblxudmFyIEZhY3RvcnkgPSB7XG4gICAgY3JlYXRlQ2hhbm5lbHM6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBjaGFubmVscygpO1xuICAgIH0sXG4gICAgY3JlYXRlQ29ubmVjdGlvbk1hbmFnZXI6IGZ1bmN0aW9uIChrZXksIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBjb25uZWN0aW9uX21hbmFnZXIoa2V5LCBvcHRpb25zKTtcbiAgICB9LFxuICAgIGNyZWF0ZUNoYW5uZWw6IGZ1bmN0aW9uIChuYW1lLCBwdXNoZXIpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBjaGFubmVsc19jaGFubmVsKG5hbWUsIHB1c2hlcik7XG4gICAgfSxcbiAgICBjcmVhdGVQcml2YXRlQ2hhbm5lbDogZnVuY3Rpb24gKG5hbWUsIHB1c2hlcikge1xuICAgICAgICByZXR1cm4gbmV3IHByaXZhdGVfY2hhbm5lbChuYW1lLCBwdXNoZXIpO1xuICAgIH0sXG4gICAgY3JlYXRlUHJlc2VuY2VDaGFubmVsOiBmdW5jdGlvbiAobmFtZSwgcHVzaGVyKSB7XG4gICAgICAgIHJldHVybiBuZXcgcHJlc2VuY2VfY2hhbm5lbChuYW1lLCBwdXNoZXIpO1xuICAgIH0sXG4gICAgY3JlYXRlRW5jcnlwdGVkQ2hhbm5lbDogZnVuY3Rpb24gKG5hbWUsIHB1c2hlciwgbmFjbCkge1xuICAgICAgICByZXR1cm4gbmV3IGVuY3J5cHRlZF9jaGFubmVsKG5hbWUsIHB1c2hlciwgbmFjbCk7XG4gICAgfSxcbiAgICBjcmVhdGVUaW1lbGluZVNlbmRlcjogZnVuY3Rpb24gKHRpbWVsaW5lLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBuZXcgdGltZWxpbmVfc2VuZGVyKHRpbWVsaW5lLCBvcHRpb25zKTtcbiAgICB9LFxuICAgIGNyZWF0ZUhhbmRzaGFrZTogZnVuY3Rpb24gKHRyYW5zcG9ydCwgY2FsbGJhY2spIHtcbiAgICAgICAgcmV0dXJuIG5ldyBjb25uZWN0aW9uX2hhbmRzaGFrZSh0cmFuc3BvcnQsIGNhbGxiYWNrKTtcbiAgICB9LFxuICAgIGNyZWF0ZUFzc2lzdGFudFRvVGhlVHJhbnNwb3J0TWFuYWdlcjogZnVuY3Rpb24gKG1hbmFnZXIsIHRyYW5zcG9ydCwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gbmV3IGFzc2lzdGFudF90b190aGVfdHJhbnNwb3J0X21hbmFnZXIobWFuYWdlciwgdHJhbnNwb3J0LCBvcHRpb25zKTtcbiAgICB9XG59O1xuLyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyB2YXIgZmFjdG9yeSA9IChGYWN0b3J5KTtcblxuLy8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvY29yZS90cmFuc3BvcnRzL3RyYW5zcG9ydF9tYW5hZ2VyLnRzXG5cbnZhciB0cmFuc3BvcnRfbWFuYWdlcl9UcmFuc3BvcnRNYW5hZ2VyID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBUcmFuc3BvcnRNYW5hZ2VyKG9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICAgICAgdGhpcy5saXZlc0xlZnQgPSB0aGlzLm9wdGlvbnMubGl2ZXMgfHwgSW5maW5pdHk7XG4gICAgfVxuICAgIFRyYW5zcG9ydE1hbmFnZXIucHJvdG90eXBlLmdldEFzc2lzdGFudCA9IGZ1bmN0aW9uICh0cmFuc3BvcnQpIHtcbiAgICAgICAgcmV0dXJuIGZhY3RvcnkuY3JlYXRlQXNzaXN0YW50VG9UaGVUcmFuc3BvcnRNYW5hZ2VyKHRoaXMsIHRyYW5zcG9ydCwge1xuICAgICAgICAgICAgbWluUGluZ0RlbGF5OiB0aGlzLm9wdGlvbnMubWluUGluZ0RlbGF5LFxuICAgICAgICAgICAgbWF4UGluZ0RlbGF5OiB0aGlzLm9wdGlvbnMubWF4UGluZ0RlbGF5XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgVHJhbnNwb3J0TWFuYWdlci5wcm90b3R5cGUuaXNBbGl2ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubGl2ZXNMZWZ0ID4gMDtcbiAgICB9O1xuICAgIFRyYW5zcG9ydE1hbmFnZXIucHJvdG90eXBlLnJlcG9ydERlYXRoID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmxpdmVzTGVmdCAtPSAxO1xuICAgIH07XG4gICAgcmV0dXJuIFRyYW5zcG9ydE1hbmFnZXI7XG59KCkpO1xuLyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyB2YXIgdHJhbnNwb3J0X21hbmFnZXIgPSAodHJhbnNwb3J0X21hbmFnZXJfVHJhbnNwb3J0TWFuYWdlcik7XG5cbi8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL2NvcmUvc3RyYXRlZ2llcy9zZXF1ZW50aWFsX3N0cmF0ZWd5LnRzXG5cblxuXG52YXIgc2VxdWVudGlhbF9zdHJhdGVneV9TZXF1ZW50aWFsU3RyYXRlZ3kgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFNlcXVlbnRpYWxTdHJhdGVneShzdHJhdGVnaWVzLCBvcHRpb25zKSB7XG4gICAgICAgIHRoaXMuc3RyYXRlZ2llcyA9IHN0cmF0ZWdpZXM7XG4gICAgICAgIHRoaXMubG9vcCA9IEJvb2xlYW4ob3B0aW9ucy5sb29wKTtcbiAgICAgICAgdGhpcy5mYWlsRmFzdCA9IEJvb2xlYW4ob3B0aW9ucy5mYWlsRmFzdCk7XG4gICAgICAgIHRoaXMudGltZW91dCA9IG9wdGlvbnMudGltZW91dDtcbiAgICAgICAgdGhpcy50aW1lb3V0TGltaXQgPSBvcHRpb25zLnRpbWVvdXRMaW1pdDtcbiAgICB9XG4gICAgU2VxdWVudGlhbFN0cmF0ZWd5LnByb3RvdHlwZS5pc1N1cHBvcnRlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGFueSh0aGlzLnN0cmF0ZWdpZXMsIHV0aWwubWV0aG9kKCdpc1N1cHBvcnRlZCcpKTtcbiAgICB9O1xuICAgIFNlcXVlbnRpYWxTdHJhdGVneS5wcm90b3R5cGUuY29ubmVjdCA9IGZ1bmN0aW9uIChtaW5Qcmlvcml0eSwgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIHN0cmF0ZWdpZXMgPSB0aGlzLnN0cmF0ZWdpZXM7XG4gICAgICAgIHZhciBjdXJyZW50ID0gMDtcbiAgICAgICAgdmFyIHRpbWVvdXQgPSB0aGlzLnRpbWVvdXQ7XG4gICAgICAgIHZhciBydW5uZXIgPSBudWxsO1xuICAgICAgICB2YXIgdHJ5TmV4dFN0cmF0ZWd5ID0gZnVuY3Rpb24gKGVycm9yLCBoYW5kc2hha2UpIHtcbiAgICAgICAgICAgIGlmIChoYW5kc2hha2UpIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjayhudWxsLCBoYW5kc2hha2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY3VycmVudCA9IGN1cnJlbnQgKyAxO1xuICAgICAgICAgICAgICAgIGlmIChfdGhpcy5sb29wKSB7XG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnQgPSBjdXJyZW50ICUgc3RyYXRlZ2llcy5sZW5ndGg7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChjdXJyZW50IDwgc3RyYXRlZ2llcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRpbWVvdXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpbWVvdXQgPSB0aW1lb3V0ICogMjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfdGhpcy50aW1lb3V0TGltaXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aW1lb3V0ID0gTWF0aC5taW4odGltZW91dCwgX3RoaXMudGltZW91dExpbWl0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBydW5uZXIgPSBfdGhpcy50cnlTdHJhdGVneShzdHJhdGVnaWVzW2N1cnJlbnRdLCBtaW5Qcmlvcml0eSwgeyB0aW1lb3V0OiB0aW1lb3V0LCBmYWlsRmFzdDogX3RoaXMuZmFpbEZhc3QgfSwgdHJ5TmV4dFN0cmF0ZWd5KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKHRydWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgcnVubmVyID0gdGhpcy50cnlTdHJhdGVneShzdHJhdGVnaWVzW2N1cnJlbnRdLCBtaW5Qcmlvcml0eSwgeyB0aW1lb3V0OiB0aW1lb3V0LCBmYWlsRmFzdDogdGhpcy5mYWlsRmFzdCB9LCB0cnlOZXh0U3RyYXRlZ3kpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgYWJvcnQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBydW5uZXIuYWJvcnQoKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBmb3JjZU1pblByaW9yaXR5OiBmdW5jdGlvbiAocCkge1xuICAgICAgICAgICAgICAgIG1pblByaW9yaXR5ID0gcDtcbiAgICAgICAgICAgICAgICBpZiAocnVubmVyKSB7XG4gICAgICAgICAgICAgICAgICAgIHJ1bm5lci5mb3JjZU1pblByaW9yaXR5KHApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9O1xuICAgIFNlcXVlbnRpYWxTdHJhdGVneS5wcm90b3R5cGUudHJ5U3RyYXRlZ3kgPSBmdW5jdGlvbiAoc3RyYXRlZ3ksIG1pblByaW9yaXR5LCBvcHRpb25zLCBjYWxsYmFjaykge1xuICAgICAgICB2YXIgdGltZXIgPSBudWxsO1xuICAgICAgICB2YXIgcnVubmVyID0gbnVsbDtcbiAgICAgICAgaWYgKG9wdGlvbnMudGltZW91dCA+IDApIHtcbiAgICAgICAgICAgIHRpbWVyID0gbmV3IE9uZU9mZlRpbWVyKG9wdGlvbnMudGltZW91dCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJ1bm5lci5hYm9ydCgpO1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKHRydWUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcnVubmVyID0gc3RyYXRlZ3kuY29ubmVjdChtaW5Qcmlvcml0eSwgZnVuY3Rpb24gKGVycm9yLCBoYW5kc2hha2UpIHtcbiAgICAgICAgICAgIGlmIChlcnJvciAmJiB0aW1lciAmJiB0aW1lci5pc1J1bm5pbmcoKSAmJiAhb3B0aW9ucy5mYWlsRmFzdCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aW1lcikge1xuICAgICAgICAgICAgICAgIHRpbWVyLmVuc3VyZUFib3J0ZWQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhbGxiYWNrKGVycm9yLCBoYW5kc2hha2UpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGFib3J0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRpbWVyKSB7XG4gICAgICAgICAgICAgICAgICAgIHRpbWVyLmVuc3VyZUFib3J0ZWQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcnVubmVyLmFib3J0KCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZm9yY2VNaW5Qcmlvcml0eTogZnVuY3Rpb24gKHApIHtcbiAgICAgICAgICAgICAgICBydW5uZXIuZm9yY2VNaW5Qcmlvcml0eShwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9O1xuICAgIHJldHVybiBTZXF1ZW50aWFsU3RyYXRlZ3k7XG59KCkpO1xuLyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyB2YXIgc2VxdWVudGlhbF9zdHJhdGVneSA9IChzZXF1ZW50aWFsX3N0cmF0ZWd5X1NlcXVlbnRpYWxTdHJhdGVneSk7XG5cbi8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL2NvcmUvc3RyYXRlZ2llcy9iZXN0X2Nvbm5lY3RlZF9ldmVyX3N0cmF0ZWd5LnRzXG5cblxudmFyIGJlc3RfY29ubmVjdGVkX2V2ZXJfc3RyYXRlZ3lfQmVzdENvbm5lY3RlZEV2ZXJTdHJhdGVneSA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQmVzdENvbm5lY3RlZEV2ZXJTdHJhdGVneShzdHJhdGVnaWVzKSB7XG4gICAgICAgIHRoaXMuc3RyYXRlZ2llcyA9IHN0cmF0ZWdpZXM7XG4gICAgfVxuICAgIEJlc3RDb25uZWN0ZWRFdmVyU3RyYXRlZ3kucHJvdG90eXBlLmlzU3VwcG9ydGVkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gYW55KHRoaXMuc3RyYXRlZ2llcywgdXRpbC5tZXRob2QoJ2lzU3VwcG9ydGVkJykpO1xuICAgIH07XG4gICAgQmVzdENvbm5lY3RlZEV2ZXJTdHJhdGVneS5wcm90b3R5cGUuY29ubmVjdCA9IGZ1bmN0aW9uIChtaW5Qcmlvcml0eSwgY2FsbGJhY2spIHtcbiAgICAgICAgcmV0dXJuIGNvbm5lY3QodGhpcy5zdHJhdGVnaWVzLCBtaW5Qcmlvcml0eSwgZnVuY3Rpb24gKGksIHJ1bm5lcnMpIHtcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoZXJyb3IsIGhhbmRzaGFrZSkge1xuICAgICAgICAgICAgICAgIHJ1bm5lcnNbaV0uZXJyb3IgPSBlcnJvcjtcbiAgICAgICAgICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFsbFJ1bm5lcnNGYWlsZWQocnVubmVycykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKHRydWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYXBwbHkocnVubmVycywgZnVuY3Rpb24gKHJ1bm5lcikge1xuICAgICAgICAgICAgICAgICAgICBydW5uZXIuZm9yY2VNaW5Qcmlvcml0eShoYW5kc2hha2UudHJhbnNwb3J0LnByaW9yaXR5KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBjYWxsYmFjayhudWxsLCBoYW5kc2hha2UpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICByZXR1cm4gQmVzdENvbm5lY3RlZEV2ZXJTdHJhdGVneTtcbn0oKSk7XG4vKiBoYXJtb255IGRlZmF1bHQgZXhwb3J0ICovIHZhciBiZXN0X2Nvbm5lY3RlZF9ldmVyX3N0cmF0ZWd5ID0gKGJlc3RfY29ubmVjdGVkX2V2ZXJfc3RyYXRlZ3lfQmVzdENvbm5lY3RlZEV2ZXJTdHJhdGVneSk7XG5mdW5jdGlvbiBjb25uZWN0KHN0cmF0ZWdpZXMsIG1pblByaW9yaXR5LCBjYWxsYmFja0J1aWxkZXIpIHtcbiAgICB2YXIgcnVubmVycyA9IG1hcChzdHJhdGVnaWVzLCBmdW5jdGlvbiAoc3RyYXRlZ3ksIGksIF8sIHJzKSB7XG4gICAgICAgIHJldHVybiBzdHJhdGVneS5jb25uZWN0KG1pblByaW9yaXR5LCBjYWxsYmFja0J1aWxkZXIoaSwgcnMpKTtcbiAgICB9KTtcbiAgICByZXR1cm4ge1xuICAgICAgICBhYm9ydDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgYXBwbHkocnVubmVycywgYWJvcnRSdW5uZXIpO1xuICAgICAgICB9LFxuICAgICAgICBmb3JjZU1pblByaW9yaXR5OiBmdW5jdGlvbiAocCkge1xuICAgICAgICAgICAgYXBwbHkocnVubmVycywgZnVuY3Rpb24gKHJ1bm5lcikge1xuICAgICAgICAgICAgICAgIHJ1bm5lci5mb3JjZU1pblByaW9yaXR5KHApO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9O1xufVxuZnVuY3Rpb24gYWxsUnVubmVyc0ZhaWxlZChydW5uZXJzKSB7XG4gICAgcmV0dXJuIGNvbGxlY3Rpb25zX2FsbChydW5uZXJzLCBmdW5jdGlvbiAocnVubmVyKSB7XG4gICAgICAgIHJldHVybiBCb29sZWFuKHJ1bm5lci5lcnJvcik7XG4gICAgfSk7XG59XG5mdW5jdGlvbiBhYm9ydFJ1bm5lcihydW5uZXIpIHtcbiAgICBpZiAoIXJ1bm5lci5lcnJvciAmJiAhcnVubmVyLmFib3J0ZWQpIHtcbiAgICAgICAgcnVubmVyLmFib3J0KCk7XG4gICAgICAgIHJ1bm5lci5hYm9ydGVkID0gdHJ1ZTtcbiAgICB9XG59XG5cbi8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL2NvcmUvc3RyYXRlZ2llcy9jYWNoZWRfc3RyYXRlZ3kudHNcblxuXG5cblxudmFyIGNhY2hlZF9zdHJhdGVneV9DYWNoZWRTdHJhdGVneSA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQ2FjaGVkU3RyYXRlZ3koc3RyYXRlZ3ksIHRyYW5zcG9ydHMsIG9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5zdHJhdGVneSA9IHN0cmF0ZWd5O1xuICAgICAgICB0aGlzLnRyYW5zcG9ydHMgPSB0cmFuc3BvcnRzO1xuICAgICAgICB0aGlzLnR0bCA9IG9wdGlvbnMudHRsIHx8IDE4MDAgKiAxMDAwO1xuICAgICAgICB0aGlzLnVzaW5nVExTID0gb3B0aW9ucy51c2VUTFM7XG4gICAgICAgIHRoaXMudGltZWxpbmUgPSBvcHRpb25zLnRpbWVsaW5lO1xuICAgIH1cbiAgICBDYWNoZWRTdHJhdGVneS5wcm90b3R5cGUuaXNTdXBwb3J0ZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnN0cmF0ZWd5LmlzU3VwcG9ydGVkKCk7XG4gICAgfTtcbiAgICBDYWNoZWRTdHJhdGVneS5wcm90b3R5cGUuY29ubmVjdCA9IGZ1bmN0aW9uIChtaW5Qcmlvcml0eSwgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIHVzaW5nVExTID0gdGhpcy51c2luZ1RMUztcbiAgICAgICAgdmFyIGluZm8gPSBmZXRjaFRyYW5zcG9ydENhY2hlKHVzaW5nVExTKTtcbiAgICAgICAgdmFyIHN0cmF0ZWdpZXMgPSBbdGhpcy5zdHJhdGVneV07XG4gICAgICAgIGlmIChpbmZvICYmIGluZm8udGltZXN0YW1wICsgdGhpcy50dGwgPj0gdXRpbC5ub3coKSkge1xuICAgICAgICAgICAgdmFyIHRyYW5zcG9ydCA9IHRoaXMudHJhbnNwb3J0c1tpbmZvLnRyYW5zcG9ydF07XG4gICAgICAgICAgICBpZiAodHJhbnNwb3J0KSB7XG4gICAgICAgICAgICAgICAgdGhpcy50aW1lbGluZS5pbmZvKHtcbiAgICAgICAgICAgICAgICAgICAgY2FjaGVkOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICB0cmFuc3BvcnQ6IGluZm8udHJhbnNwb3J0LFxuICAgICAgICAgICAgICAgICAgICBsYXRlbmN5OiBpbmZvLmxhdGVuY3lcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBzdHJhdGVnaWVzLnB1c2gobmV3IHNlcXVlbnRpYWxfc3RyYXRlZ3koW3RyYW5zcG9ydF0sIHtcbiAgICAgICAgICAgICAgICAgICAgdGltZW91dDogaW5mby5sYXRlbmN5ICogMiArIDEwMDAsXG4gICAgICAgICAgICAgICAgICAgIGZhaWxGYXN0OiB0cnVlXG4gICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHZhciBzdGFydFRpbWVzdGFtcCA9IHV0aWwubm93KCk7XG4gICAgICAgIHZhciBydW5uZXIgPSBzdHJhdGVnaWVzXG4gICAgICAgICAgICAucG9wKClcbiAgICAgICAgICAgIC5jb25uZWN0KG1pblByaW9yaXR5LCBmdW5jdGlvbiBjYihlcnJvciwgaGFuZHNoYWtlKSB7XG4gICAgICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBmbHVzaFRyYW5zcG9ydENhY2hlKHVzaW5nVExTKTtcbiAgICAgICAgICAgICAgICBpZiAoc3RyYXRlZ2llcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0VGltZXN0YW1wID0gdXRpbC5ub3coKTtcbiAgICAgICAgICAgICAgICAgICAgcnVubmVyID0gc3RyYXRlZ2llcy5wb3AoKS5jb25uZWN0KG1pblByaW9yaXR5LCBjYik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhlcnJvcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgc3RvcmVUcmFuc3BvcnRDYWNoZSh1c2luZ1RMUywgaGFuZHNoYWtlLnRyYW5zcG9ydC5uYW1lLCB1dGlsLm5vdygpIC0gc3RhcnRUaW1lc3RhbXApO1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKG51bGwsIGhhbmRzaGFrZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgYWJvcnQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBydW5uZXIuYWJvcnQoKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBmb3JjZU1pblByaW9yaXR5OiBmdW5jdGlvbiAocCkge1xuICAgICAgICAgICAgICAgIG1pblByaW9yaXR5ID0gcDtcbiAgICAgICAgICAgICAgICBpZiAocnVubmVyKSB7XG4gICAgICAgICAgICAgICAgICAgIHJ1bm5lci5mb3JjZU1pblByaW9yaXR5KHApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9O1xuICAgIHJldHVybiBDYWNoZWRTdHJhdGVneTtcbn0oKSk7XG4vKiBoYXJtb255IGRlZmF1bHQgZXhwb3J0ICovIHZhciBjYWNoZWRfc3RyYXRlZ3kgPSAoY2FjaGVkX3N0cmF0ZWd5X0NhY2hlZFN0cmF0ZWd5KTtcbmZ1bmN0aW9uIGdldFRyYW5zcG9ydENhY2hlS2V5KHVzaW5nVExTKSB7XG4gICAgcmV0dXJuICdwdXNoZXJUcmFuc3BvcnQnICsgKHVzaW5nVExTID8gJ1RMUycgOiAnTm9uVExTJyk7XG59XG5mdW5jdGlvbiBmZXRjaFRyYW5zcG9ydENhY2hlKHVzaW5nVExTKSB7XG4gICAgdmFyIHN0b3JhZ2UgPSBydW50aW1lLmdldExvY2FsU3RvcmFnZSgpO1xuICAgIGlmIChzdG9yYWdlKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB2YXIgc2VyaWFsaXplZENhY2hlID0gc3RvcmFnZVtnZXRUcmFuc3BvcnRDYWNoZUtleSh1c2luZ1RMUyldO1xuICAgICAgICAgICAgaWYgKHNlcmlhbGl6ZWRDYWNoZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBKU09OLnBhcnNlKHNlcmlhbGl6ZWRDYWNoZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGZsdXNoVHJhbnNwb3J0Q2FjaGUodXNpbmdUTFMpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xufVxuZnVuY3Rpb24gc3RvcmVUcmFuc3BvcnRDYWNoZSh1c2luZ1RMUywgdHJhbnNwb3J0LCBsYXRlbmN5KSB7XG4gICAgdmFyIHN0b3JhZ2UgPSBydW50aW1lLmdldExvY2FsU3RvcmFnZSgpO1xuICAgIGlmIChzdG9yYWdlKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBzdG9yYWdlW2dldFRyYW5zcG9ydENhY2hlS2V5KHVzaW5nVExTKV0gPSBzYWZlSlNPTlN0cmluZ2lmeSh7XG4gICAgICAgICAgICAgICAgdGltZXN0YW1wOiB1dGlsLm5vdygpLFxuICAgICAgICAgICAgICAgIHRyYW5zcG9ydDogdHJhbnNwb3J0LFxuICAgICAgICAgICAgICAgIGxhdGVuY3k6IGxhdGVuY3lcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgIH1cbiAgICB9XG59XG5mdW5jdGlvbiBmbHVzaFRyYW5zcG9ydENhY2hlKHVzaW5nVExTKSB7XG4gICAgdmFyIHN0b3JhZ2UgPSBydW50aW1lLmdldExvY2FsU3RvcmFnZSgpO1xuICAgIGlmIChzdG9yYWdlKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBkZWxldGUgc3RvcmFnZVtnZXRUcmFuc3BvcnRDYWNoZUtleSh1c2luZ1RMUyldO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbi8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL2NvcmUvc3RyYXRlZ2llcy9kZWxheWVkX3N0cmF0ZWd5LnRzXG5cbnZhciBkZWxheWVkX3N0cmF0ZWd5X0RlbGF5ZWRTdHJhdGVneSA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gRGVsYXllZFN0cmF0ZWd5KHN0cmF0ZWd5LCBfYSkge1xuICAgICAgICB2YXIgbnVtYmVyID0gX2EuZGVsYXk7XG4gICAgICAgIHRoaXMuc3RyYXRlZ3kgPSBzdHJhdGVneTtcbiAgICAgICAgdGhpcy5vcHRpb25zID0geyBkZWxheTogbnVtYmVyIH07XG4gICAgfVxuICAgIERlbGF5ZWRTdHJhdGVneS5wcm90b3R5cGUuaXNTdXBwb3J0ZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnN0cmF0ZWd5LmlzU3VwcG9ydGVkKCk7XG4gICAgfTtcbiAgICBEZWxheWVkU3RyYXRlZ3kucHJvdG90eXBlLmNvbm5lY3QgPSBmdW5jdGlvbiAobWluUHJpb3JpdHksIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBzdHJhdGVneSA9IHRoaXMuc3RyYXRlZ3k7XG4gICAgICAgIHZhciBydW5uZXI7XG4gICAgICAgIHZhciB0aW1lciA9IG5ldyBPbmVPZmZUaW1lcih0aGlzLm9wdGlvbnMuZGVsYXksIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJ1bm5lciA9IHN0cmF0ZWd5LmNvbm5lY3QobWluUHJpb3JpdHksIGNhbGxiYWNrKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBhYm9ydDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHRpbWVyLmVuc3VyZUFib3J0ZWQoKTtcbiAgICAgICAgICAgICAgICBpZiAocnVubmVyKSB7XG4gICAgICAgICAgICAgICAgICAgIHJ1bm5lci5hYm9ydCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBmb3JjZU1pblByaW9yaXR5OiBmdW5jdGlvbiAocCkge1xuICAgICAgICAgICAgICAgIG1pblByaW9yaXR5ID0gcDtcbiAgICAgICAgICAgICAgICBpZiAocnVubmVyKSB7XG4gICAgICAgICAgICAgICAgICAgIHJ1bm5lci5mb3JjZU1pblByaW9yaXR5KHApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9O1xuICAgIHJldHVybiBEZWxheWVkU3RyYXRlZ3k7XG59KCkpO1xuLyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyB2YXIgZGVsYXllZF9zdHJhdGVneSA9IChkZWxheWVkX3N0cmF0ZWd5X0RlbGF5ZWRTdHJhdGVneSk7XG5cbi8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL2NvcmUvc3RyYXRlZ2llcy9pZl9zdHJhdGVneS50c1xudmFyIElmU3RyYXRlZ3kgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIElmU3RyYXRlZ3kodGVzdCwgdHJ1ZUJyYW5jaCwgZmFsc2VCcmFuY2gpIHtcbiAgICAgICAgdGhpcy50ZXN0ID0gdGVzdDtcbiAgICAgICAgdGhpcy50cnVlQnJhbmNoID0gdHJ1ZUJyYW5jaDtcbiAgICAgICAgdGhpcy5mYWxzZUJyYW5jaCA9IGZhbHNlQnJhbmNoO1xuICAgIH1cbiAgICBJZlN0cmF0ZWd5LnByb3RvdHlwZS5pc1N1cHBvcnRlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGJyYW5jaCA9IHRoaXMudGVzdCgpID8gdGhpcy50cnVlQnJhbmNoIDogdGhpcy5mYWxzZUJyYW5jaDtcbiAgICAgICAgcmV0dXJuIGJyYW5jaC5pc1N1cHBvcnRlZCgpO1xuICAgIH07XG4gICAgSWZTdHJhdGVneS5wcm90b3R5cGUuY29ubmVjdCA9IGZ1bmN0aW9uIChtaW5Qcmlvcml0eSwgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIGJyYW5jaCA9IHRoaXMudGVzdCgpID8gdGhpcy50cnVlQnJhbmNoIDogdGhpcy5mYWxzZUJyYW5jaDtcbiAgICAgICAgcmV0dXJuIGJyYW5jaC5jb25uZWN0KG1pblByaW9yaXR5LCBjYWxsYmFjayk7XG4gICAgfTtcbiAgICByZXR1cm4gSWZTdHJhdGVneTtcbn0oKSk7XG4vKiBoYXJtb255IGRlZmF1bHQgZXhwb3J0ICovIHZhciBpZl9zdHJhdGVneSA9IChJZlN0cmF0ZWd5KTtcblxuLy8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvY29yZS9zdHJhdGVnaWVzL2ZpcnN0X2Nvbm5lY3RlZF9zdHJhdGVneS50c1xudmFyIEZpcnN0Q29ubmVjdGVkU3RyYXRlZ3kgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEZpcnN0Q29ubmVjdGVkU3RyYXRlZ3koc3RyYXRlZ3kpIHtcbiAgICAgICAgdGhpcy5zdHJhdGVneSA9IHN0cmF0ZWd5O1xuICAgIH1cbiAgICBGaXJzdENvbm5lY3RlZFN0cmF0ZWd5LnByb3RvdHlwZS5pc1N1cHBvcnRlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RyYXRlZ3kuaXNTdXBwb3J0ZWQoKTtcbiAgICB9O1xuICAgIEZpcnN0Q29ubmVjdGVkU3RyYXRlZ3kucHJvdG90eXBlLmNvbm5lY3QgPSBmdW5jdGlvbiAobWluUHJpb3JpdHksIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBydW5uZXIgPSB0aGlzLnN0cmF0ZWd5LmNvbm5lY3QobWluUHJpb3JpdHksIGZ1bmN0aW9uIChlcnJvciwgaGFuZHNoYWtlKSB7XG4gICAgICAgICAgICBpZiAoaGFuZHNoYWtlKSB7XG4gICAgICAgICAgICAgICAgcnVubmVyLmFib3J0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYWxsYmFjayhlcnJvciwgaGFuZHNoYWtlKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBydW5uZXI7XG4gICAgfTtcbiAgICByZXR1cm4gRmlyc3RDb25uZWN0ZWRTdHJhdGVneTtcbn0oKSk7XG4vKiBoYXJtb255IGRlZmF1bHQgZXhwb3J0ICovIHZhciBmaXJzdF9jb25uZWN0ZWRfc3RyYXRlZ3kgPSAoRmlyc3RDb25uZWN0ZWRTdHJhdGVneSk7XG5cbi8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL3J1bnRpbWVzL3dlYi9kZWZhdWx0X3N0cmF0ZWd5LnRzXG5cblxuXG5cblxuXG5cbmZ1bmN0aW9uIHRlc3RTdXBwb3J0c1N0cmF0ZWd5KHN0cmF0ZWd5KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHN0cmF0ZWd5LmlzU3VwcG9ydGVkKCk7XG4gICAgfTtcbn1cbnZhciBnZXREZWZhdWx0U3RyYXRlZ3kgPSBmdW5jdGlvbiAoY29uZmlnLCBiYXNlT3B0aW9ucywgZGVmaW5lVHJhbnNwb3J0KSB7XG4gICAgdmFyIGRlZmluZWRUcmFuc3BvcnRzID0ge307XG4gICAgZnVuY3Rpb24gZGVmaW5lVHJhbnNwb3J0U3RyYXRlZ3kobmFtZSwgdHlwZSwgcHJpb3JpdHksIG9wdGlvbnMsIG1hbmFnZXIpIHtcbiAgICAgICAgdmFyIHRyYW5zcG9ydCA9IGRlZmluZVRyYW5zcG9ydChjb25maWcsIG5hbWUsIHR5cGUsIHByaW9yaXR5LCBvcHRpb25zLCBtYW5hZ2VyKTtcbiAgICAgICAgZGVmaW5lZFRyYW5zcG9ydHNbbmFtZV0gPSB0cmFuc3BvcnQ7XG4gICAgICAgIHJldHVybiB0cmFuc3BvcnQ7XG4gICAgfVxuICAgIHZhciB3c19vcHRpb25zID0gT2JqZWN0LmFzc2lnbih7fSwgYmFzZU9wdGlvbnMsIHtcbiAgICAgICAgaG9zdE5vblRMUzogY29uZmlnLndzSG9zdCArICc6JyArIGNvbmZpZy53c1BvcnQsXG4gICAgICAgIGhvc3RUTFM6IGNvbmZpZy53c0hvc3QgKyAnOicgKyBjb25maWcud3NzUG9ydCxcbiAgICAgICAgaHR0cFBhdGg6IGNvbmZpZy53c1BhdGhcbiAgICB9KTtcbiAgICB2YXIgd3NzX29wdGlvbnMgPSBPYmplY3QuYXNzaWduKHt9LCB3c19vcHRpb25zLCB7XG4gICAgICAgIHVzZVRMUzogdHJ1ZVxuICAgIH0pO1xuICAgIHZhciBzb2NranNfb3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oe30sIGJhc2VPcHRpb25zLCB7XG4gICAgICAgIGhvc3ROb25UTFM6IGNvbmZpZy5odHRwSG9zdCArICc6JyArIGNvbmZpZy5odHRwUG9ydCxcbiAgICAgICAgaG9zdFRMUzogY29uZmlnLmh0dHBIb3N0ICsgJzonICsgY29uZmlnLmh0dHBzUG9ydCxcbiAgICAgICAgaHR0cFBhdGg6IGNvbmZpZy5odHRwUGF0aFxuICAgIH0pO1xuICAgIHZhciB0aW1lb3V0cyA9IHtcbiAgICAgICAgbG9vcDogdHJ1ZSxcbiAgICAgICAgdGltZW91dDogMTUwMDAsXG4gICAgICAgIHRpbWVvdXRMaW1pdDogNjAwMDBcbiAgICB9O1xuICAgIHZhciB3c19tYW5hZ2VyID0gbmV3IHRyYW5zcG9ydF9tYW5hZ2VyKHtcbiAgICAgICAgbGl2ZXM6IDIsXG4gICAgICAgIG1pblBpbmdEZWxheTogMTAwMDAsXG4gICAgICAgIG1heFBpbmdEZWxheTogY29uZmlnLmFjdGl2aXR5VGltZW91dFxuICAgIH0pO1xuICAgIHZhciBzdHJlYW1pbmdfbWFuYWdlciA9IG5ldyB0cmFuc3BvcnRfbWFuYWdlcih7XG4gICAgICAgIGxpdmVzOiAyLFxuICAgICAgICBtaW5QaW5nRGVsYXk6IDEwMDAwLFxuICAgICAgICBtYXhQaW5nRGVsYXk6IGNvbmZpZy5hY3Rpdml0eVRpbWVvdXRcbiAgICB9KTtcbiAgICB2YXIgd3NfdHJhbnNwb3J0ID0gZGVmaW5lVHJhbnNwb3J0U3RyYXRlZ3koJ3dzJywgJ3dzJywgMywgd3Nfb3B0aW9ucywgd3NfbWFuYWdlcik7XG4gICAgdmFyIHdzc190cmFuc3BvcnQgPSBkZWZpbmVUcmFuc3BvcnRTdHJhdGVneSgnd3NzJywgJ3dzJywgMywgd3NzX29wdGlvbnMsIHdzX21hbmFnZXIpO1xuICAgIHZhciBzb2NranNfdHJhbnNwb3J0ID0gZGVmaW5lVHJhbnNwb3J0U3RyYXRlZ3koJ3NvY2tqcycsICdzb2NranMnLCAxLCBzb2NranNfb3B0aW9ucyk7XG4gICAgdmFyIHhocl9zdHJlYW1pbmdfdHJhbnNwb3J0ID0gZGVmaW5lVHJhbnNwb3J0U3RyYXRlZ3koJ3hocl9zdHJlYW1pbmcnLCAneGhyX3N0cmVhbWluZycsIDEsIHNvY2tqc19vcHRpb25zLCBzdHJlYW1pbmdfbWFuYWdlcik7XG4gICAgdmFyIHhkcl9zdHJlYW1pbmdfdHJhbnNwb3J0ID0gZGVmaW5lVHJhbnNwb3J0U3RyYXRlZ3koJ3hkcl9zdHJlYW1pbmcnLCAneGRyX3N0cmVhbWluZycsIDEsIHNvY2tqc19vcHRpb25zLCBzdHJlYW1pbmdfbWFuYWdlcik7XG4gICAgdmFyIHhocl9wb2xsaW5nX3RyYW5zcG9ydCA9IGRlZmluZVRyYW5zcG9ydFN0cmF0ZWd5KCd4aHJfcG9sbGluZycsICd4aHJfcG9sbGluZycsIDEsIHNvY2tqc19vcHRpb25zKTtcbiAgICB2YXIgeGRyX3BvbGxpbmdfdHJhbnNwb3J0ID0gZGVmaW5lVHJhbnNwb3J0U3RyYXRlZ3koJ3hkcl9wb2xsaW5nJywgJ3hkcl9wb2xsaW5nJywgMSwgc29ja2pzX29wdGlvbnMpO1xuICAgIHZhciB3c19sb29wID0gbmV3IHNlcXVlbnRpYWxfc3RyYXRlZ3koW3dzX3RyYW5zcG9ydF0sIHRpbWVvdXRzKTtcbiAgICB2YXIgd3NzX2xvb3AgPSBuZXcgc2VxdWVudGlhbF9zdHJhdGVneShbd3NzX3RyYW5zcG9ydF0sIHRpbWVvdXRzKTtcbiAgICB2YXIgc29ja2pzX2xvb3AgPSBuZXcgc2VxdWVudGlhbF9zdHJhdGVneShbc29ja2pzX3RyYW5zcG9ydF0sIHRpbWVvdXRzKTtcbiAgICB2YXIgc3RyZWFtaW5nX2xvb3AgPSBuZXcgc2VxdWVudGlhbF9zdHJhdGVneShbXG4gICAgICAgIG5ldyBpZl9zdHJhdGVneSh0ZXN0U3VwcG9ydHNTdHJhdGVneSh4aHJfc3RyZWFtaW5nX3RyYW5zcG9ydCksIHhocl9zdHJlYW1pbmdfdHJhbnNwb3J0LCB4ZHJfc3RyZWFtaW5nX3RyYW5zcG9ydClcbiAgICBdLCB0aW1lb3V0cyk7XG4gICAgdmFyIHBvbGxpbmdfbG9vcCA9IG5ldyBzZXF1ZW50aWFsX3N0cmF0ZWd5KFtcbiAgICAgICAgbmV3IGlmX3N0cmF0ZWd5KHRlc3RTdXBwb3J0c1N0cmF0ZWd5KHhocl9wb2xsaW5nX3RyYW5zcG9ydCksIHhocl9wb2xsaW5nX3RyYW5zcG9ydCwgeGRyX3BvbGxpbmdfdHJhbnNwb3J0KVxuICAgIF0sIHRpbWVvdXRzKTtcbiAgICB2YXIgaHR0cF9sb29wID0gbmV3IHNlcXVlbnRpYWxfc3RyYXRlZ3koW1xuICAgICAgICBuZXcgaWZfc3RyYXRlZ3kodGVzdFN1cHBvcnRzU3RyYXRlZ3koc3RyZWFtaW5nX2xvb3ApLCBuZXcgYmVzdF9jb25uZWN0ZWRfZXZlcl9zdHJhdGVneShbXG4gICAgICAgICAgICBzdHJlYW1pbmdfbG9vcCxcbiAgICAgICAgICAgIG5ldyBkZWxheWVkX3N0cmF0ZWd5KHBvbGxpbmdfbG9vcCwgeyBkZWxheTogNDAwMCB9KVxuICAgICAgICBdKSwgcG9sbGluZ19sb29wKVxuICAgIF0sIHRpbWVvdXRzKTtcbiAgICB2YXIgaHR0cF9mYWxsYmFja19sb29wID0gbmV3IGlmX3N0cmF0ZWd5KHRlc3RTdXBwb3J0c1N0cmF0ZWd5KGh0dHBfbG9vcCksIGh0dHBfbG9vcCwgc29ja2pzX2xvb3ApO1xuICAgIHZhciB3c1N0cmF0ZWd5O1xuICAgIGlmIChiYXNlT3B0aW9ucy51c2VUTFMpIHtcbiAgICAgICAgd3NTdHJhdGVneSA9IG5ldyBiZXN0X2Nvbm5lY3RlZF9ldmVyX3N0cmF0ZWd5KFtcbiAgICAgICAgICAgIHdzX2xvb3AsXG4gICAgICAgICAgICBuZXcgZGVsYXllZF9zdHJhdGVneShodHRwX2ZhbGxiYWNrX2xvb3AsIHsgZGVsYXk6IDIwMDAgfSlcbiAgICAgICAgXSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB3c1N0cmF0ZWd5ID0gbmV3IGJlc3RfY29ubmVjdGVkX2V2ZXJfc3RyYXRlZ3koW1xuICAgICAgICAgICAgd3NfbG9vcCxcbiAgICAgICAgICAgIG5ldyBkZWxheWVkX3N0cmF0ZWd5KHdzc19sb29wLCB7IGRlbGF5OiAyMDAwIH0pLFxuICAgICAgICAgICAgbmV3IGRlbGF5ZWRfc3RyYXRlZ3koaHR0cF9mYWxsYmFja19sb29wLCB7IGRlbGF5OiA1MDAwIH0pXG4gICAgICAgIF0pO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IGNhY2hlZF9zdHJhdGVneShuZXcgZmlyc3RfY29ubmVjdGVkX3N0cmF0ZWd5KG5ldyBpZl9zdHJhdGVneSh0ZXN0U3VwcG9ydHNTdHJhdGVneSh3c190cmFuc3BvcnQpLCB3c1N0cmF0ZWd5LCBodHRwX2ZhbGxiYWNrX2xvb3ApKSwgZGVmaW5lZFRyYW5zcG9ydHMsIHtcbiAgICAgICAgdHRsOiAxODAwMDAwLFxuICAgICAgICB0aW1lbGluZTogYmFzZU9wdGlvbnMudGltZWxpbmUsXG4gICAgICAgIHVzZVRMUzogYmFzZU9wdGlvbnMudXNlVExTXG4gICAgfSk7XG59O1xuLyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyB2YXIgZGVmYXVsdF9zdHJhdGVneSA9IChnZXREZWZhdWx0U3RyYXRlZ3kpO1xuXG4vLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy9ydW50aW1lcy93ZWIvdHJhbnNwb3J0cy90cmFuc3BvcnRfY29ubmVjdGlvbl9pbml0aWFsaXplci50c1xuXG4vKiBoYXJtb255IGRlZmF1bHQgZXhwb3J0ICovIHZhciB0cmFuc3BvcnRfY29ubmVjdGlvbl9pbml0aWFsaXplciA9IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHNlbGYudGltZWxpbmUuaW5mbyhzZWxmLmJ1aWxkVGltZWxpbmVNZXNzYWdlKHtcbiAgICAgICAgdHJhbnNwb3J0OiBzZWxmLm5hbWUgKyAoc2VsZi5vcHRpb25zLnVzZVRMUyA/ICdzJyA6ICcnKVxuICAgIH0pKTtcbiAgICBpZiAoc2VsZi5ob29rcy5pc0luaXRpYWxpemVkKCkpIHtcbiAgICAgICAgc2VsZi5jaGFuZ2VTdGF0ZSgnaW5pdGlhbGl6ZWQnKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoc2VsZi5ob29rcy5maWxlKSB7XG4gICAgICAgIHNlbGYuY2hhbmdlU3RhdGUoJ2luaXRpYWxpemluZycpO1xuICAgICAgICBEZXBlbmRlbmNpZXMubG9hZChzZWxmLmhvb2tzLmZpbGUsIHsgdXNlVExTOiBzZWxmLm9wdGlvbnMudXNlVExTIH0sIGZ1bmN0aW9uIChlcnJvciwgY2FsbGJhY2spIHtcbiAgICAgICAgICAgIGlmIChzZWxmLmhvb2tzLmlzSW5pdGlhbGl6ZWQoKSkge1xuICAgICAgICAgICAgICAgIHNlbGYuY2hhbmdlU3RhdGUoJ2luaXRpYWxpemVkJyk7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2sodHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5vbkVycm9yKGVycm9yKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgc2VsZi5vbkNsb3NlKCk7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2soZmFsc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHNlbGYub25DbG9zZSgpO1xuICAgIH1cbn0pO1xuXG4vLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy9ydW50aW1lcy93ZWIvaHR0cC9odHRwX3hkb21haW5fcmVxdWVzdC50c1xuXG52YXIgaHR0cF94ZG9tYWluX3JlcXVlc3RfaG9va3MgPSB7XG4gICAgZ2V0UmVxdWVzdDogZnVuY3Rpb24gKHNvY2tldCkge1xuICAgICAgICB2YXIgeGRyID0gbmV3IHdpbmRvdy5YRG9tYWluUmVxdWVzdCgpO1xuICAgICAgICB4ZHIub250aW1lb3V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgc29ja2V0LmVtaXQoJ2Vycm9yJywgbmV3IFJlcXVlc3RUaW1lZE91dCgpKTtcbiAgICAgICAgICAgIHNvY2tldC5jbG9zZSgpO1xuICAgICAgICB9O1xuICAgICAgICB4ZHIub25lcnJvciA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICBzb2NrZXQuZW1pdCgnZXJyb3InLCBlKTtcbiAgICAgICAgICAgIHNvY2tldC5jbG9zZSgpO1xuICAgICAgICB9O1xuICAgICAgICB4ZHIub25wcm9ncmVzcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICh4ZHIucmVzcG9uc2VUZXh0ICYmIHhkci5yZXNwb25zZVRleHQubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIHNvY2tldC5vbkNodW5rKDIwMCwgeGRyLnJlc3BvbnNlVGV4dCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHhkci5vbmxvYWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoeGRyLnJlc3BvbnNlVGV4dCAmJiB4ZHIucmVzcG9uc2VUZXh0Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBzb2NrZXQub25DaHVuaygyMDAsIHhkci5yZXNwb25zZVRleHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc29ja2V0LmVtaXQoJ2ZpbmlzaGVkJywgMjAwKTtcbiAgICAgICAgICAgIHNvY2tldC5jbG9zZSgpO1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4geGRyO1xuICAgIH0sXG4gICAgYWJvcnRSZXF1ZXN0OiBmdW5jdGlvbiAoeGRyKSB7XG4gICAgICAgIHhkci5vbnRpbWVvdXQgPSB4ZHIub25lcnJvciA9IHhkci5vbnByb2dyZXNzID0geGRyLm9ubG9hZCA9IG51bGw7XG4gICAgICAgIHhkci5hYm9ydCgpO1xuICAgIH1cbn07XG4vKiBoYXJtb255IGRlZmF1bHQgZXhwb3J0ICovIHZhciBodHRwX3hkb21haW5fcmVxdWVzdCA9IChodHRwX3hkb21haW5fcmVxdWVzdF9ob29rcyk7XG5cbi8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL2NvcmUvaHR0cC9odHRwX3JlcXVlc3QudHNcbnZhciBodHRwX3JlcXVlc3RfZXh0ZW5kcyA9ICh1bmRlZmluZWQgJiYgdW5kZWZpbmVkLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcbiAgICAgICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcbiAgICAgICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgICAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICB9O1xuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xuXG5cbnZhciBNQVhfQlVGRkVSX0xFTkdUSCA9IDI1NiAqIDEwMjQ7XG52YXIgaHR0cF9yZXF1ZXN0X0hUVFBSZXF1ZXN0ID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBodHRwX3JlcXVlc3RfZXh0ZW5kcyhIVFRQUmVxdWVzdCwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBIVFRQUmVxdWVzdChob29rcywgbWV0aG9kLCB1cmwpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuaG9va3MgPSBob29rcztcbiAgICAgICAgX3RoaXMubWV0aG9kID0gbWV0aG9kO1xuICAgICAgICBfdGhpcy51cmwgPSB1cmw7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgSFRUUFJlcXVlc3QucHJvdG90eXBlLnN0YXJ0ID0gZnVuY3Rpb24gKHBheWxvYWQpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdGhpcy5wb3NpdGlvbiA9IDA7XG4gICAgICAgIHRoaXMueGhyID0gdGhpcy5ob29rcy5nZXRSZXF1ZXN0KHRoaXMpO1xuICAgICAgICB0aGlzLnVubG9hZGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgX3RoaXMuY2xvc2UoKTtcbiAgICAgICAgfTtcbiAgICAgICAgcnVudGltZS5hZGRVbmxvYWRMaXN0ZW5lcih0aGlzLnVubG9hZGVyKTtcbiAgICAgICAgdGhpcy54aHIub3Blbih0aGlzLm1ldGhvZCwgdGhpcy51cmwsIHRydWUpO1xuICAgICAgICBpZiAodGhpcy54aHIuc2V0UmVxdWVzdEhlYWRlcikge1xuICAgICAgICAgICAgdGhpcy54aHIuc2V0UmVxdWVzdEhlYWRlcignQ29udGVudC1UeXBlJywgJ2FwcGxpY2F0aW9uL2pzb24nKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnhoci5zZW5kKHBheWxvYWQpO1xuICAgIH07XG4gICAgSFRUUFJlcXVlc3QucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy51bmxvYWRlcikge1xuICAgICAgICAgICAgcnVudGltZS5yZW1vdmVVbmxvYWRMaXN0ZW5lcih0aGlzLnVubG9hZGVyKTtcbiAgICAgICAgICAgIHRoaXMudW5sb2FkZXIgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLnhocikge1xuICAgICAgICAgICAgdGhpcy5ob29rcy5hYm9ydFJlcXVlc3QodGhpcy54aHIpO1xuICAgICAgICAgICAgdGhpcy54aHIgPSBudWxsO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBIVFRQUmVxdWVzdC5wcm90b3R5cGUub25DaHVuayA9IGZ1bmN0aW9uIChzdGF0dXMsIGRhdGEpIHtcbiAgICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgICAgIHZhciBjaHVuayA9IHRoaXMuYWR2YW5jZUJ1ZmZlcihkYXRhKTtcbiAgICAgICAgICAgIGlmIChjaHVuaykge1xuICAgICAgICAgICAgICAgIHRoaXMuZW1pdCgnY2h1bmsnLCB7IHN0YXR1czogc3RhdHVzLCBkYXRhOiBjaHVuayB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmlzQnVmZmVyVG9vTG9uZyhkYXRhKSkge1xuICAgICAgICAgICAgdGhpcy5lbWl0KCdidWZmZXJfdG9vX2xvbmcnKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgSFRUUFJlcXVlc3QucHJvdG90eXBlLmFkdmFuY2VCdWZmZXIgPSBmdW5jdGlvbiAoYnVmZmVyKSB7XG4gICAgICAgIHZhciB1bnJlYWREYXRhID0gYnVmZmVyLnNsaWNlKHRoaXMucG9zaXRpb24pO1xuICAgICAgICB2YXIgZW5kT2ZMaW5lUG9zaXRpb24gPSB1bnJlYWREYXRhLmluZGV4T2YoJ1xcbicpO1xuICAgICAgICBpZiAoZW5kT2ZMaW5lUG9zaXRpb24gIT09IC0xKSB7XG4gICAgICAgICAgICB0aGlzLnBvc2l0aW9uICs9IGVuZE9mTGluZVBvc2l0aW9uICsgMTtcbiAgICAgICAgICAgIHJldHVybiB1bnJlYWREYXRhLnNsaWNlKDAsIGVuZE9mTGluZVBvc2l0aW9uKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBIVFRQUmVxdWVzdC5wcm90b3R5cGUuaXNCdWZmZXJUb29Mb25nID0gZnVuY3Rpb24gKGJ1ZmZlcikge1xuICAgICAgICByZXR1cm4gdGhpcy5wb3NpdGlvbiA9PT0gYnVmZmVyLmxlbmd0aCAmJiBidWZmZXIubGVuZ3RoID4gTUFYX0JVRkZFUl9MRU5HVEg7XG4gICAgfTtcbiAgICByZXR1cm4gSFRUUFJlcXVlc3Q7XG59KGRpc3BhdGNoZXIpKTtcbi8qIGhhcm1vbnkgZGVmYXVsdCBleHBvcnQgKi8gdmFyIGh0dHBfcmVxdWVzdCA9IChodHRwX3JlcXVlc3RfSFRUUFJlcXVlc3QpO1xuXG4vLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy9jb3JlL2h0dHAvc3RhdGUudHNcbnZhciBTdGF0ZTtcbihmdW5jdGlvbiAoU3RhdGUpIHtcbiAgICBTdGF0ZVtTdGF0ZVtcIkNPTk5FQ1RJTkdcIl0gPSAwXSA9IFwiQ09OTkVDVElOR1wiO1xuICAgIFN0YXRlW1N0YXRlW1wiT1BFTlwiXSA9IDFdID0gXCJPUEVOXCI7XG4gICAgU3RhdGVbU3RhdGVbXCJDTE9TRURcIl0gPSAzXSA9IFwiQ0xPU0VEXCI7XG59KShTdGF0ZSB8fCAoU3RhdGUgPSB7fSkpO1xuLyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyB2YXIgc3RhdGUgPSAoU3RhdGUpO1xuXG4vLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy9jb3JlL2h0dHAvaHR0cF9zb2NrZXQudHNcblxuXG5cbnZhciBhdXRvSW5jcmVtZW50ID0gMTtcbnZhciBodHRwX3NvY2tldF9IVFRQU29ja2V0ID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBIVFRQU29ja2V0KGhvb2tzLCB1cmwpIHtcbiAgICAgICAgdGhpcy5ob29rcyA9IGhvb2tzO1xuICAgICAgICB0aGlzLnNlc3Npb24gPSByYW5kb21OdW1iZXIoMTAwMCkgKyAnLycgKyByYW5kb21TdHJpbmcoOCk7XG4gICAgICAgIHRoaXMubG9jYXRpb24gPSBnZXRMb2NhdGlvbih1cmwpO1xuICAgICAgICB0aGlzLnJlYWR5U3RhdGUgPSBzdGF0ZS5DT05ORUNUSU5HO1xuICAgICAgICB0aGlzLm9wZW5TdHJlYW0oKTtcbiAgICB9XG4gICAgSFRUUFNvY2tldC5wcm90b3R5cGUuc2VuZCA9IGZ1bmN0aW9uIChwYXlsb2FkKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNlbmRSYXcoSlNPTi5zdHJpbmdpZnkoW3BheWxvYWRdKSk7XG4gICAgfTtcbiAgICBIVFRQU29ja2V0LnByb3RvdHlwZS5waW5nID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmhvb2tzLnNlbmRIZWFydGJlYXQodGhpcyk7XG4gICAgfTtcbiAgICBIVFRQU29ja2V0LnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uIChjb2RlLCByZWFzb24pIHtcbiAgICAgICAgdGhpcy5vbkNsb3NlKGNvZGUsIHJlYXNvbiwgdHJ1ZSk7XG4gICAgfTtcbiAgICBIVFRQU29ja2V0LnByb3RvdHlwZS5zZW5kUmF3ID0gZnVuY3Rpb24gKHBheWxvYWQpIHtcbiAgICAgICAgaWYgKHRoaXMucmVhZHlTdGF0ZSA9PT0gc3RhdGUuT1BFTikge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBydW50aW1lLmNyZWF0ZVNvY2tldFJlcXVlc3QoJ1BPU1QnLCBnZXRVbmlxdWVVUkwoZ2V0U2VuZFVSTCh0aGlzLmxvY2F0aW9uLCB0aGlzLnNlc3Npb24pKSkuc3RhcnQocGF5bG9hZCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgSFRUUFNvY2tldC5wcm90b3R5cGUucmVjb25uZWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmNsb3NlU3RyZWFtKCk7XG4gICAgICAgIHRoaXMub3BlblN0cmVhbSgpO1xuICAgIH07XG4gICAgSFRUUFNvY2tldC5wcm90b3R5cGUub25DbG9zZSA9IGZ1bmN0aW9uIChjb2RlLCByZWFzb24sIHdhc0NsZWFuKSB7XG4gICAgICAgIHRoaXMuY2xvc2VTdHJlYW0oKTtcbiAgICAgICAgdGhpcy5yZWFkeVN0YXRlID0gc3RhdGUuQ0xPU0VEO1xuICAgICAgICBpZiAodGhpcy5vbmNsb3NlKSB7XG4gICAgICAgICAgICB0aGlzLm9uY2xvc2Uoe1xuICAgICAgICAgICAgICAgIGNvZGU6IGNvZGUsXG4gICAgICAgICAgICAgICAgcmVhc29uOiByZWFzb24sXG4gICAgICAgICAgICAgICAgd2FzQ2xlYW46IHdhc0NsZWFuXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgSFRUUFNvY2tldC5wcm90b3R5cGUub25DaHVuayA9IGZ1bmN0aW9uIChjaHVuaykge1xuICAgICAgICBpZiAoY2h1bmsuc3RhdHVzICE9PSAyMDApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5yZWFkeVN0YXRlID09PSBzdGF0ZS5PUEVOKSB7XG4gICAgICAgICAgICB0aGlzLm9uQWN0aXZpdHkoKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgcGF5bG9hZDtcbiAgICAgICAgdmFyIHR5cGUgPSBjaHVuay5kYXRhLnNsaWNlKDAsIDEpO1xuICAgICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgJ28nOlxuICAgICAgICAgICAgICAgIHBheWxvYWQgPSBKU09OLnBhcnNlKGNodW5rLmRhdGEuc2xpY2UoMSkgfHwgJ3t9Jyk7XG4gICAgICAgICAgICAgICAgdGhpcy5vbk9wZW4ocGF5bG9hZCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdhJzpcbiAgICAgICAgICAgICAgICBwYXlsb2FkID0gSlNPTi5wYXJzZShjaHVuay5kYXRhLnNsaWNlKDEpIHx8ICdbXScpO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcGF5bG9hZC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm9uRXZlbnQocGF5bG9hZFtpXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnbSc6XG4gICAgICAgICAgICAgICAgcGF5bG9hZCA9IEpTT04ucGFyc2UoY2h1bmsuZGF0YS5zbGljZSgxKSB8fCAnbnVsbCcpO1xuICAgICAgICAgICAgICAgIHRoaXMub25FdmVudChwYXlsb2FkKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2gnOlxuICAgICAgICAgICAgICAgIHRoaXMuaG9va3Mub25IZWFydGJlYXQodGhpcyk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdjJzpcbiAgICAgICAgICAgICAgICBwYXlsb2FkID0gSlNPTi5wYXJzZShjaHVuay5kYXRhLnNsaWNlKDEpIHx8ICdbXScpO1xuICAgICAgICAgICAgICAgIHRoaXMub25DbG9zZShwYXlsb2FkWzBdLCBwYXlsb2FkWzFdLCB0cnVlKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH07XG4gICAgSFRUUFNvY2tldC5wcm90b3R5cGUub25PcGVuID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKHRoaXMucmVhZHlTdGF0ZSA9PT0gc3RhdGUuQ09OTkVDVElORykge1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5ob3N0bmFtZSkge1xuICAgICAgICAgICAgICAgIHRoaXMubG9jYXRpb24uYmFzZSA9IHJlcGxhY2VIb3N0KHRoaXMubG9jYXRpb24uYmFzZSwgb3B0aW9ucy5ob3N0bmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnJlYWR5U3RhdGUgPSBzdGF0ZS5PUEVOO1xuICAgICAgICAgICAgaWYgKHRoaXMub25vcGVuKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5vbm9wZW4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMub25DbG9zZSgxMDA2LCAnU2VydmVyIGxvc3Qgc2Vzc2lvbicsIHRydWUpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBIVFRQU29ja2V0LnByb3RvdHlwZS5vbkV2ZW50ID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIGlmICh0aGlzLnJlYWR5U3RhdGUgPT09IHN0YXRlLk9QRU4gJiYgdGhpcy5vbm1lc3NhZ2UpIHtcbiAgICAgICAgICAgIHRoaXMub25tZXNzYWdlKHsgZGF0YTogZXZlbnQgfSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEhUVFBTb2NrZXQucHJvdG90eXBlLm9uQWN0aXZpdHkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLm9uYWN0aXZpdHkpIHtcbiAgICAgICAgICAgIHRoaXMub25hY3Rpdml0eSgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBIVFRQU29ja2V0LnByb3RvdHlwZS5vbkVycm9yID0gZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgIGlmICh0aGlzLm9uZXJyb3IpIHtcbiAgICAgICAgICAgIHRoaXMub25lcnJvcihlcnJvcik7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEhUVFBTb2NrZXQucHJvdG90eXBlLm9wZW5TdHJlYW0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHRoaXMuc3RyZWFtID0gcnVudGltZS5jcmVhdGVTb2NrZXRSZXF1ZXN0KCdQT1NUJywgZ2V0VW5pcXVlVVJMKHRoaXMuaG9va3MuZ2V0UmVjZWl2ZVVSTCh0aGlzLmxvY2F0aW9uLCB0aGlzLnNlc3Npb24pKSk7XG4gICAgICAgIHRoaXMuc3RyZWFtLmJpbmQoJ2NodW5rJywgZnVuY3Rpb24gKGNodW5rKSB7XG4gICAgICAgICAgICBfdGhpcy5vbkNodW5rKGNodW5rKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuc3RyZWFtLmJpbmQoJ2ZpbmlzaGVkJywgZnVuY3Rpb24gKHN0YXR1cykge1xuICAgICAgICAgICAgX3RoaXMuaG9va3Mub25GaW5pc2hlZChfdGhpcywgc3RhdHVzKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuc3RyZWFtLmJpbmQoJ2J1ZmZlcl90b29fbG9uZycsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIF90aGlzLnJlY29ubmVjdCgpO1xuICAgICAgICB9KTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHRoaXMuc3RyZWFtLnN0YXJ0KCk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICB1dGlsLmRlZmVyKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5vbkVycm9yKGVycm9yKTtcbiAgICAgICAgICAgICAgICBfdGhpcy5vbkNsb3NlKDEwMDYsICdDb3VsZCBub3Qgc3RhcnQgc3RyZWFtaW5nJywgZmFsc2UpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEhUVFBTb2NrZXQucHJvdG90eXBlLmNsb3NlU3RyZWFtID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5zdHJlYW0pIHtcbiAgICAgICAgICAgIHRoaXMuc3RyZWFtLnVuYmluZF9hbGwoKTtcbiAgICAgICAgICAgIHRoaXMuc3RyZWFtLmNsb3NlKCk7XG4gICAgICAgICAgICB0aGlzLnN0cmVhbSA9IG51bGw7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBIVFRQU29ja2V0O1xufSgpKTtcbmZ1bmN0aW9uIGdldExvY2F0aW9uKHVybCkge1xuICAgIHZhciBwYXJ0cyA9IC8oW15cXD9dKilcXC8qKFxcPz8uKikvLmV4ZWModXJsKTtcbiAgICByZXR1cm4ge1xuICAgICAgICBiYXNlOiBwYXJ0c1sxXSxcbiAgICAgICAgcXVlcnlTdHJpbmc6IHBhcnRzWzJdXG4gICAgfTtcbn1cbmZ1bmN0aW9uIGdldFNlbmRVUkwodXJsLCBzZXNzaW9uKSB7XG4gICAgcmV0dXJuIHVybC5iYXNlICsgJy8nICsgc2Vzc2lvbiArICcveGhyX3NlbmQnO1xufVxuZnVuY3Rpb24gZ2V0VW5pcXVlVVJMKHVybCkge1xuICAgIHZhciBzZXBhcmF0b3IgPSB1cmwuaW5kZXhPZignPycpID09PSAtMSA/ICc/JyA6ICcmJztcbiAgICByZXR1cm4gdXJsICsgc2VwYXJhdG9yICsgJ3Q9JyArICtuZXcgRGF0ZSgpICsgJyZuPScgKyBhdXRvSW5jcmVtZW50Kys7XG59XG5mdW5jdGlvbiByZXBsYWNlSG9zdCh1cmwsIGhvc3RuYW1lKSB7XG4gICAgdmFyIHVybFBhcnRzID0gLyhodHRwcz86XFwvXFwvKShbXlxcLzpdKykoKFxcL3w6KT8uKikvLmV4ZWModXJsKTtcbiAgICByZXR1cm4gdXJsUGFydHNbMV0gKyBob3N0bmFtZSArIHVybFBhcnRzWzNdO1xufVxuZnVuY3Rpb24gcmFuZG9tTnVtYmVyKG1heCkge1xuICAgIHJldHVybiBydW50aW1lLnJhbmRvbUludChtYXgpO1xufVxuZnVuY3Rpb24gcmFuZG9tU3RyaW5nKGxlbmd0aCkge1xuICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHJlc3VsdC5wdXNoKHJhbmRvbU51bWJlcigzMikudG9TdHJpbmcoMzIpKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdC5qb2luKCcnKTtcbn1cbi8qIGhhcm1vbnkgZGVmYXVsdCBleHBvcnQgKi8gdmFyIGh0dHBfc29ja2V0ID0gKGh0dHBfc29ja2V0X0hUVFBTb2NrZXQpO1xuXG4vLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy9jb3JlL2h0dHAvaHR0cF9zdHJlYW1pbmdfc29ja2V0LnRzXG52YXIgaHR0cF9zdHJlYW1pbmdfc29ja2V0X2hvb2tzID0ge1xuICAgIGdldFJlY2VpdmVVUkw6IGZ1bmN0aW9uICh1cmwsIHNlc3Npb24pIHtcbiAgICAgICAgcmV0dXJuIHVybC5iYXNlICsgJy8nICsgc2Vzc2lvbiArICcveGhyX3N0cmVhbWluZycgKyB1cmwucXVlcnlTdHJpbmc7XG4gICAgfSxcbiAgICBvbkhlYXJ0YmVhdDogZnVuY3Rpb24gKHNvY2tldCkge1xuICAgICAgICBzb2NrZXQuc2VuZFJhdygnW10nKTtcbiAgICB9LFxuICAgIHNlbmRIZWFydGJlYXQ6IGZ1bmN0aW9uIChzb2NrZXQpIHtcbiAgICAgICAgc29ja2V0LnNlbmRSYXcoJ1tdJyk7XG4gICAgfSxcbiAgICBvbkZpbmlzaGVkOiBmdW5jdGlvbiAoc29ja2V0LCBzdGF0dXMpIHtcbiAgICAgICAgc29ja2V0Lm9uQ2xvc2UoMTAwNiwgJ0Nvbm5lY3Rpb24gaW50ZXJydXB0ZWQgKCcgKyBzdGF0dXMgKyAnKScsIGZhbHNlKTtcbiAgICB9XG59O1xuLyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyB2YXIgaHR0cF9zdHJlYW1pbmdfc29ja2V0ID0gKGh0dHBfc3RyZWFtaW5nX3NvY2tldF9ob29rcyk7XG5cbi8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL2NvcmUvaHR0cC9odHRwX3BvbGxpbmdfc29ja2V0LnRzXG52YXIgaHR0cF9wb2xsaW5nX3NvY2tldF9ob29rcyA9IHtcbiAgICBnZXRSZWNlaXZlVVJMOiBmdW5jdGlvbiAodXJsLCBzZXNzaW9uKSB7XG4gICAgICAgIHJldHVybiB1cmwuYmFzZSArICcvJyArIHNlc3Npb24gKyAnL3hocicgKyB1cmwucXVlcnlTdHJpbmc7XG4gICAgfSxcbiAgICBvbkhlYXJ0YmVhdDogZnVuY3Rpb24gKCkge1xuICAgIH0sXG4gICAgc2VuZEhlYXJ0YmVhdDogZnVuY3Rpb24gKHNvY2tldCkge1xuICAgICAgICBzb2NrZXQuc2VuZFJhdygnW10nKTtcbiAgICB9LFxuICAgIG9uRmluaXNoZWQ6IGZ1bmN0aW9uIChzb2NrZXQsIHN0YXR1cykge1xuICAgICAgICBpZiAoc3RhdHVzID09PSAyMDApIHtcbiAgICAgICAgICAgIHNvY2tldC5yZWNvbm5lY3QoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHNvY2tldC5vbkNsb3NlKDEwMDYsICdDb25uZWN0aW9uIGludGVycnVwdGVkICgnICsgc3RhdHVzICsgJyknLCBmYWxzZSk7XG4gICAgICAgIH1cbiAgICB9XG59O1xuLyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyB2YXIgaHR0cF9wb2xsaW5nX3NvY2tldCA9IChodHRwX3BvbGxpbmdfc29ja2V0X2hvb2tzKTtcblxuLy8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvcnVudGltZXMvaXNvbW9ycGhpYy9odHRwL2h0dHBfeGhyX3JlcXVlc3QudHNcblxudmFyIGh0dHBfeGhyX3JlcXVlc3RfaG9va3MgPSB7XG4gICAgZ2V0UmVxdWVzdDogZnVuY3Rpb24gKHNvY2tldCkge1xuICAgICAgICB2YXIgQ29uc3RydWN0b3IgPSBydW50aW1lLmdldFhIUkFQSSgpO1xuICAgICAgICB2YXIgeGhyID0gbmV3IENvbnN0cnVjdG9yKCk7XG4gICAgICAgIHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSB4aHIub25wcm9ncmVzcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHN3aXRjaCAoeGhyLnJlYWR5U3RhdGUpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgIGlmICh4aHIucmVzcG9uc2VUZXh0ICYmIHhoci5yZXNwb25zZVRleHQubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc29ja2V0Lm9uQ2h1bmsoeGhyLnN0YXR1cywgeGhyLnJlc3BvbnNlVGV4dCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICBpZiAoeGhyLnJlc3BvbnNlVGV4dCAmJiB4aHIucmVzcG9uc2VUZXh0Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNvY2tldC5vbkNodW5rKHhoci5zdGF0dXMsIHhoci5yZXNwb25zZVRleHQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHNvY2tldC5lbWl0KCdmaW5pc2hlZCcsIHhoci5zdGF0dXMpO1xuICAgICAgICAgICAgICAgICAgICBzb2NrZXQuY2xvc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiB4aHI7XG4gICAgfSxcbiAgICBhYm9ydFJlcXVlc3Q6IGZ1bmN0aW9uICh4aHIpIHtcbiAgICAgICAgeGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IG51bGw7XG4gICAgICAgIHhoci5hYm9ydCgpO1xuICAgIH1cbn07XG4vKiBoYXJtb255IGRlZmF1bHQgZXhwb3J0ICovIHZhciBodHRwX3hocl9yZXF1ZXN0ID0gKGh0dHBfeGhyX3JlcXVlc3RfaG9va3MpO1xuXG4vLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy9ydW50aW1lcy9pc29tb3JwaGljL2h0dHAvaHR0cC50c1xuXG5cblxuXG5cbnZhciBIVFRQID0ge1xuICAgIGNyZWF0ZVN0cmVhbWluZ1NvY2tldDogZnVuY3Rpb24gKHVybCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGVTb2NrZXQoaHR0cF9zdHJlYW1pbmdfc29ja2V0LCB1cmwpO1xuICAgIH0sXG4gICAgY3JlYXRlUG9sbGluZ1NvY2tldDogZnVuY3Rpb24gKHVybCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGVTb2NrZXQoaHR0cF9wb2xsaW5nX3NvY2tldCwgdXJsKTtcbiAgICB9LFxuICAgIGNyZWF0ZVNvY2tldDogZnVuY3Rpb24gKGhvb2tzLCB1cmwpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBodHRwX3NvY2tldChob29rcywgdXJsKTtcbiAgICB9LFxuICAgIGNyZWF0ZVhIUjogZnVuY3Rpb24gKG1ldGhvZCwgdXJsKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNyZWF0ZVJlcXVlc3QoaHR0cF94aHJfcmVxdWVzdCwgbWV0aG9kLCB1cmwpO1xuICAgIH0sXG4gICAgY3JlYXRlUmVxdWVzdDogZnVuY3Rpb24gKGhvb2tzLCBtZXRob2QsIHVybCkge1xuICAgICAgICByZXR1cm4gbmV3IGh0dHBfcmVxdWVzdChob29rcywgbWV0aG9kLCB1cmwpO1xuICAgIH1cbn07XG4vKiBoYXJtb255IGRlZmF1bHQgZXhwb3J0ICovIHZhciBodHRwX2h0dHAgPSAoSFRUUCk7XG5cbi8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL3J1bnRpbWVzL3dlYi9odHRwL2h0dHAudHNcblxuXG5odHRwX2h0dHAuY3JlYXRlWERSID0gZnVuY3Rpb24gKG1ldGhvZCwgdXJsKSB7XG4gICAgcmV0dXJuIHRoaXMuY3JlYXRlUmVxdWVzdChodHRwX3hkb21haW5fcmVxdWVzdCwgbWV0aG9kLCB1cmwpO1xufTtcbi8qIGhhcm1vbnkgZGVmYXVsdCBleHBvcnQgKi8gdmFyIHdlYl9odHRwX2h0dHAgPSAoaHR0cF9odHRwKTtcblxuLy8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvcnVudGltZXMvd2ViL3J1bnRpbWUudHNcblxuXG5cblxuXG5cblxuXG5cblxuXG5cbnZhciBSdW50aW1lID0ge1xuICAgIG5leHRBdXRoQ2FsbGJhY2tJRDogMSxcbiAgICBhdXRoX2NhbGxiYWNrczoge30sXG4gICAgU2NyaXB0UmVjZWl2ZXJzOiBTY3JpcHRSZWNlaXZlcnMsXG4gICAgRGVwZW5kZW5jaWVzUmVjZWl2ZXJzOiBEZXBlbmRlbmNpZXNSZWNlaXZlcnMsXG4gICAgZ2V0RGVmYXVsdFN0cmF0ZWd5OiBkZWZhdWx0X3N0cmF0ZWd5LFxuICAgIFRyYW5zcG9ydHM6IHRyYW5zcG9ydHNfdHJhbnNwb3J0cyxcbiAgICB0cmFuc3BvcnRDb25uZWN0aW9uSW5pdGlhbGl6ZXI6IHRyYW5zcG9ydF9jb25uZWN0aW9uX2luaXRpYWxpemVyLFxuICAgIEhUVFBGYWN0b3J5OiB3ZWJfaHR0cF9odHRwLFxuICAgIFRpbWVsaW5lVHJhbnNwb3J0OiBqc29ucF90aW1lbGluZSxcbiAgICBnZXRYSFJBUEk6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHdpbmRvdy5YTUxIdHRwUmVxdWVzdDtcbiAgICB9LFxuICAgIGdldFdlYlNvY2tldEFQSTogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gd2luZG93LldlYlNvY2tldCB8fCB3aW5kb3cuTW96V2ViU29ja2V0O1xuICAgIH0sXG4gICAgc2V0dXA6IGZ1bmN0aW9uIChQdXNoZXJDbGFzcykge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB3aW5kb3cuUHVzaGVyID0gUHVzaGVyQ2xhc3M7XG4gICAgICAgIHZhciBpbml0aWFsaXplT25Eb2N1bWVudEJvZHkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBfdGhpcy5vbkRvY3VtZW50Qm9keShQdXNoZXJDbGFzcy5yZWFkeSk7XG4gICAgICAgIH07XG4gICAgICAgIGlmICghd2luZG93LkpTT04pIHtcbiAgICAgICAgICAgIERlcGVuZGVuY2llcy5sb2FkKCdqc29uMicsIHt9LCBpbml0aWFsaXplT25Eb2N1bWVudEJvZHkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaW5pdGlhbGl6ZU9uRG9jdW1lbnRCb2R5KCk7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIGdldERvY3VtZW50OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBkb2N1bWVudDtcbiAgICB9LFxuICAgIGdldFByb3RvY29sOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldERvY3VtZW50KCkubG9jYXRpb24ucHJvdG9jb2w7XG4gICAgfSxcbiAgICBnZXRBdXRob3JpemVyczogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4geyBhamF4OiB4aHJfYXV0aCwganNvbnA6IGpzb25wX2F1dGggfTtcbiAgICB9LFxuICAgIG9uRG9jdW1lbnRCb2R5OiBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgaWYgKGRvY3VtZW50LmJvZHkpIHtcbiAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5vbkRvY3VtZW50Qm9keShjYWxsYmFjayk7XG4gICAgICAgICAgICB9LCAwKTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgY3JlYXRlSlNPTlBSZXF1ZXN0OiBmdW5jdGlvbiAodXJsLCBkYXRhKSB7XG4gICAgICAgIHJldHVybiBuZXcganNvbnBfcmVxdWVzdCh1cmwsIGRhdGEpO1xuICAgIH0sXG4gICAgY3JlYXRlU2NyaXB0UmVxdWVzdDogZnVuY3Rpb24gKHNyYykge1xuICAgICAgICByZXR1cm4gbmV3IHNjcmlwdF9yZXF1ZXN0KHNyYyk7XG4gICAgfSxcbiAgICBnZXRMb2NhbFN0b3JhZ2U6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiB3aW5kb3cubG9jYWxTdG9yYWdlO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgfSxcbiAgICBjcmVhdGVYSFI6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuZ2V0WEhSQVBJKCkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNyZWF0ZVhNTEh0dHBSZXF1ZXN0KCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGVNaWNyb3NvZnRYSFIoKTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgY3JlYXRlWE1MSHR0cFJlcXVlc3Q6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIENvbnN0cnVjdG9yID0gdGhpcy5nZXRYSFJBUEkoKTtcbiAgICAgICAgcmV0dXJuIG5ldyBDb25zdHJ1Y3RvcigpO1xuICAgIH0sXG4gICAgY3JlYXRlTWljcm9zb2Z0WEhSOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBuZXcgQWN0aXZlWE9iamVjdCgnTWljcm9zb2Z0LlhNTEhUVFAnKTtcbiAgICB9LFxuICAgIGdldE5ldHdvcms6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIG5ldF9pbmZvX05ldHdvcms7XG4gICAgfSxcbiAgICBjcmVhdGVXZWJTb2NrZXQ6IGZ1bmN0aW9uICh1cmwpIHtcbiAgICAgICAgdmFyIENvbnN0cnVjdG9yID0gdGhpcy5nZXRXZWJTb2NrZXRBUEkoKTtcbiAgICAgICAgcmV0dXJuIG5ldyBDb25zdHJ1Y3Rvcih1cmwpO1xuICAgIH0sXG4gICAgY3JlYXRlU29ja2V0UmVxdWVzdDogZnVuY3Rpb24gKG1ldGhvZCwgdXJsKSB7XG4gICAgICAgIGlmICh0aGlzLmlzWEhSU3VwcG9ydGVkKCkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLkhUVFBGYWN0b3J5LmNyZWF0ZVhIUihtZXRob2QsIHVybCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy5pc1hEUlN1cHBvcnRlZCh1cmwuaW5kZXhPZignaHR0cHM6JykgPT09IDApKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5IVFRQRmFjdG9yeS5jcmVhdGVYRFIobWV0aG9kLCB1cmwpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgJ0Nyb3NzLW9yaWdpbiBIVFRQIHJlcXVlc3RzIGFyZSBub3Qgc3VwcG9ydGVkJztcbiAgICAgICAgfVxuICAgIH0sXG4gICAgaXNYSFJTdXBwb3J0ZWQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIENvbnN0cnVjdG9yID0gdGhpcy5nZXRYSFJBUEkoKTtcbiAgICAgICAgcmV0dXJuIChCb29sZWFuKENvbnN0cnVjdG9yKSAmJiBuZXcgQ29uc3RydWN0b3IoKS53aXRoQ3JlZGVudGlhbHMgIT09IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBpc1hEUlN1cHBvcnRlZDogZnVuY3Rpb24gKHVzZVRMUykge1xuICAgICAgICB2YXIgcHJvdG9jb2wgPSB1c2VUTFMgPyAnaHR0cHM6JyA6ICdodHRwOic7XG4gICAgICAgIHZhciBkb2N1bWVudFByb3RvY29sID0gdGhpcy5nZXRQcm90b2NvbCgpO1xuICAgICAgICByZXR1cm4gKEJvb2xlYW4od2luZG93WydYRG9tYWluUmVxdWVzdCddKSAmJiBkb2N1bWVudFByb3RvY29sID09PSBwcm90b2NvbCk7XG4gICAgfSxcbiAgICBhZGRVbmxvYWRMaXN0ZW5lcjogZnVuY3Rpb24gKGxpc3RlbmVyKSB7XG4gICAgICAgIGlmICh3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigndW5sb2FkJywgbGlzdGVuZXIsIGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh3aW5kb3cuYXR0YWNoRXZlbnQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgd2luZG93LmF0dGFjaEV2ZW50KCdvbnVubG9hZCcsIGxpc3RlbmVyKTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgcmVtb3ZlVW5sb2FkTGlzdGVuZXI6IGZ1bmN0aW9uIChsaXN0ZW5lcikge1xuICAgICAgICBpZiAod2luZG93LmFkZEV2ZW50TGlzdGVuZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3VubG9hZCcsIGxpc3RlbmVyLCBmYWxzZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAod2luZG93LmRldGFjaEV2ZW50ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHdpbmRvdy5kZXRhY2hFdmVudCgnb251bmxvYWQnLCBsaXN0ZW5lcik7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIHJhbmRvbUludDogZnVuY3Rpb24gKG1heCkge1xuICAgICAgICB2YXIgcmFuZG9tID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGNyeXB0byA9IHdpbmRvdy5jcnlwdG8gfHwgd2luZG93Wydtc0NyeXB0byddO1xuICAgICAgICAgICAgdmFyIHJhbmRvbSA9IGNyeXB0by5nZXRSYW5kb21WYWx1ZXMobmV3IFVpbnQzMkFycmF5KDEpKVswXTtcbiAgICAgICAgICAgIHJldHVybiByYW5kb20gLyBNYXRoLnBvdygyLCAzMik7XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBNYXRoLmZsb29yKHJhbmRvbSgpICogbWF4KTtcbiAgICB9XG59O1xuLyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyB2YXIgcnVudGltZSA9IChSdW50aW1lKTtcblxuLy8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvY29yZS90aW1lbGluZS9sZXZlbC50c1xudmFyIFRpbWVsaW5lTGV2ZWw7XG4oZnVuY3Rpb24gKFRpbWVsaW5lTGV2ZWwpIHtcbiAgICBUaW1lbGluZUxldmVsW1RpbWVsaW5lTGV2ZWxbXCJFUlJPUlwiXSA9IDNdID0gXCJFUlJPUlwiO1xuICAgIFRpbWVsaW5lTGV2ZWxbVGltZWxpbmVMZXZlbFtcIklORk9cIl0gPSA2XSA9IFwiSU5GT1wiO1xuICAgIFRpbWVsaW5lTGV2ZWxbVGltZWxpbmVMZXZlbFtcIkRFQlVHXCJdID0gN10gPSBcIkRFQlVHXCI7XG59KShUaW1lbGluZUxldmVsIHx8IChUaW1lbGluZUxldmVsID0ge30pKTtcbi8qIGhhcm1vbnkgZGVmYXVsdCBleHBvcnQgKi8gdmFyIHRpbWVsaW5lX2xldmVsID0gKFRpbWVsaW5lTGV2ZWwpO1xuXG4vLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy9jb3JlL3RpbWVsaW5lL3RpbWVsaW5lLnRzXG5cblxuXG52YXIgdGltZWxpbmVfVGltZWxpbmUgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFRpbWVsaW5lKGtleSwgc2Vzc2lvbiwgb3B0aW9ucykge1xuICAgICAgICB0aGlzLmtleSA9IGtleTtcbiAgICAgICAgdGhpcy5zZXNzaW9uID0gc2Vzc2lvbjtcbiAgICAgICAgdGhpcy5ldmVudHMgPSBbXTtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICAgICAgdGhpcy5zZW50ID0gMDtcbiAgICAgICAgdGhpcy51bmlxdWVJRCA9IDA7XG4gICAgfVxuICAgIFRpbWVsaW5lLnByb3RvdHlwZS5sb2cgPSBmdW5jdGlvbiAobGV2ZWwsIGV2ZW50KSB7XG4gICAgICAgIGlmIChsZXZlbCA8PSB0aGlzLm9wdGlvbnMubGV2ZWwpIHtcbiAgICAgICAgICAgIHRoaXMuZXZlbnRzLnB1c2goZXh0ZW5kKHt9LCBldmVudCwgeyB0aW1lc3RhbXA6IHV0aWwubm93KCkgfSkpO1xuICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5saW1pdCAmJiB0aGlzLmV2ZW50cy5sZW5ndGggPiB0aGlzLm9wdGlvbnMubGltaXQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmV2ZW50cy5zaGlmdCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBUaW1lbGluZS5wcm90b3R5cGUuZXJyb3IgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgdGhpcy5sb2codGltZWxpbmVfbGV2ZWwuRVJST1IsIGV2ZW50KTtcbiAgICB9O1xuICAgIFRpbWVsaW5lLnByb3RvdHlwZS5pbmZvID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIHRoaXMubG9nKHRpbWVsaW5lX2xldmVsLklORk8sIGV2ZW50KTtcbiAgICB9O1xuICAgIFRpbWVsaW5lLnByb3RvdHlwZS5kZWJ1ZyA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICB0aGlzLmxvZyh0aW1lbGluZV9sZXZlbC5ERUJVRywgZXZlbnQpO1xuICAgIH07XG4gICAgVGltZWxpbmUucHJvdG90eXBlLmlzRW1wdHkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmV2ZW50cy5sZW5ndGggPT09IDA7XG4gICAgfTtcbiAgICBUaW1lbGluZS5wcm90b3R5cGUuc2VuZCA9IGZ1bmN0aW9uIChzZW5kZm4sIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciBkYXRhID0gZXh0ZW5kKHtcbiAgICAgICAgICAgIHNlc3Npb246IHRoaXMuc2Vzc2lvbixcbiAgICAgICAgICAgIGJ1bmRsZTogdGhpcy5zZW50ICsgMSxcbiAgICAgICAgICAgIGtleTogdGhpcy5rZXksXG4gICAgICAgICAgICBsaWI6ICdqcycsXG4gICAgICAgICAgICB2ZXJzaW9uOiB0aGlzLm9wdGlvbnMudmVyc2lvbixcbiAgICAgICAgICAgIGNsdXN0ZXI6IHRoaXMub3B0aW9ucy5jbHVzdGVyLFxuICAgICAgICAgICAgZmVhdHVyZXM6IHRoaXMub3B0aW9ucy5mZWF0dXJlcyxcbiAgICAgICAgICAgIHRpbWVsaW5lOiB0aGlzLmV2ZW50c1xuICAgICAgICB9LCB0aGlzLm9wdGlvbnMucGFyYW1zKTtcbiAgICAgICAgdGhpcy5ldmVudHMgPSBbXTtcbiAgICAgICAgc2VuZGZuKGRhdGEsIGZ1bmN0aW9uIChlcnJvciwgcmVzdWx0KSB7XG4gICAgICAgICAgICBpZiAoIWVycm9yKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuc2VudCsrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2soZXJyb3IsIHJlc3VsdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9O1xuICAgIFRpbWVsaW5lLnByb3RvdHlwZS5nZW5lcmF0ZVVuaXF1ZUlEID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLnVuaXF1ZUlEKys7XG4gICAgICAgIHJldHVybiB0aGlzLnVuaXF1ZUlEO1xuICAgIH07XG4gICAgcmV0dXJuIFRpbWVsaW5lO1xufSgpKTtcbi8qIGhhcm1vbnkgZGVmYXVsdCBleHBvcnQgKi8gdmFyIHRpbWVsaW5lX3RpbWVsaW5lID0gKHRpbWVsaW5lX1RpbWVsaW5lKTtcblxuLy8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvY29yZS9zdHJhdGVnaWVzL3RyYW5zcG9ydF9zdHJhdGVneS50c1xuXG5cblxuXG52YXIgdHJhbnNwb3J0X3N0cmF0ZWd5X1RyYW5zcG9ydFN0cmF0ZWd5ID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBUcmFuc3BvcnRTdHJhdGVneShuYW1lLCBwcmlvcml0eSwgdHJhbnNwb3J0LCBvcHRpb25zKSB7XG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgICAgIHRoaXMucHJpb3JpdHkgPSBwcmlvcml0eTtcbiAgICAgICAgdGhpcy50cmFuc3BvcnQgPSB0cmFuc3BvcnQ7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgfVxuICAgIFRyYW5zcG9ydFN0cmF0ZWd5LnByb3RvdHlwZS5pc1N1cHBvcnRlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudHJhbnNwb3J0LmlzU3VwcG9ydGVkKHtcbiAgICAgICAgICAgIHVzZVRMUzogdGhpcy5vcHRpb25zLnVzZVRMU1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIFRyYW5zcG9ydFN0cmF0ZWd5LnByb3RvdHlwZS5jb25uZWN0ID0gZnVuY3Rpb24gKG1pblByaW9yaXR5LCBjYWxsYmFjaykge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBpZiAoIXRoaXMuaXNTdXBwb3J0ZWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhaWxBdHRlbXB0KG5ldyBVbnN1cHBvcnRlZFN0cmF0ZWd5KCksIGNhbGxiYWNrKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLnByaW9yaXR5IDwgbWluUHJpb3JpdHkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWlsQXR0ZW1wdChuZXcgVHJhbnNwb3J0UHJpb3JpdHlUb29Mb3coKSwgY2FsbGJhY2spO1xuICAgICAgICB9XG4gICAgICAgIHZhciBjb25uZWN0ZWQgPSBmYWxzZTtcbiAgICAgICAgdmFyIHRyYW5zcG9ydCA9IHRoaXMudHJhbnNwb3J0LmNyZWF0ZUNvbm5lY3Rpb24odGhpcy5uYW1lLCB0aGlzLnByaW9yaXR5LCB0aGlzLm9wdGlvbnMua2V5LCB0aGlzLm9wdGlvbnMpO1xuICAgICAgICB2YXIgaGFuZHNoYWtlID0gbnVsbDtcbiAgICAgICAgdmFyIG9uSW5pdGlhbGl6ZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0cmFuc3BvcnQudW5iaW5kKCdpbml0aWFsaXplZCcsIG9uSW5pdGlhbGl6ZWQpO1xuICAgICAgICAgICAgdHJhbnNwb3J0LmNvbm5lY3QoKTtcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIG9uT3BlbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGhhbmRzaGFrZSA9IGZhY3RvcnkuY3JlYXRlSGFuZHNoYWtlKHRyYW5zcG9ydCwgZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgIGNvbm5lY3RlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgdW5iaW5kTGlzdGVuZXJzKCk7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2sobnVsbCwgcmVzdWx0KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgICB2YXIgb25FcnJvciA9IGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgICAgdW5iaW5kTGlzdGVuZXJzKCk7XG4gICAgICAgICAgICBjYWxsYmFjayhlcnJvcik7XG4gICAgICAgIH07XG4gICAgICAgIHZhciBvbkNsb3NlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHVuYmluZExpc3RlbmVycygpO1xuICAgICAgICAgICAgdmFyIHNlcmlhbGl6ZWRUcmFuc3BvcnQ7XG4gICAgICAgICAgICBzZXJpYWxpemVkVHJhbnNwb3J0ID0gc2FmZUpTT05TdHJpbmdpZnkodHJhbnNwb3J0KTtcbiAgICAgICAgICAgIGNhbGxiYWNrKG5ldyBUcmFuc3BvcnRDbG9zZWQoc2VyaWFsaXplZFRyYW5zcG9ydCkpO1xuICAgICAgICB9O1xuICAgICAgICB2YXIgdW5iaW5kTGlzdGVuZXJzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdHJhbnNwb3J0LnVuYmluZCgnaW5pdGlhbGl6ZWQnLCBvbkluaXRpYWxpemVkKTtcbiAgICAgICAgICAgIHRyYW5zcG9ydC51bmJpbmQoJ29wZW4nLCBvbk9wZW4pO1xuICAgICAgICAgICAgdHJhbnNwb3J0LnVuYmluZCgnZXJyb3InLCBvbkVycm9yKTtcbiAgICAgICAgICAgIHRyYW5zcG9ydC51bmJpbmQoJ2Nsb3NlZCcsIG9uQ2xvc2VkKTtcbiAgICAgICAgfTtcbiAgICAgICAgdHJhbnNwb3J0LmJpbmQoJ2luaXRpYWxpemVkJywgb25Jbml0aWFsaXplZCk7XG4gICAgICAgIHRyYW5zcG9ydC5iaW5kKCdvcGVuJywgb25PcGVuKTtcbiAgICAgICAgdHJhbnNwb3J0LmJpbmQoJ2Vycm9yJywgb25FcnJvcik7XG4gICAgICAgIHRyYW5zcG9ydC5iaW5kKCdjbG9zZWQnLCBvbkNsb3NlZCk7XG4gICAgICAgIHRyYW5zcG9ydC5pbml0aWFsaXplKCk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBhYm9ydDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGlmIChjb25uZWN0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB1bmJpbmRMaXN0ZW5lcnMoKTtcbiAgICAgICAgICAgICAgICBpZiAoaGFuZHNoYWtlKSB7XG4gICAgICAgICAgICAgICAgICAgIGhhbmRzaGFrZS5jbG9zZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdHJhbnNwb3J0LmNsb3NlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGZvcmNlTWluUHJpb3JpdHk6IGZ1bmN0aW9uIChwKSB7XG4gICAgICAgICAgICAgICAgaWYgKGNvbm5lY3RlZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChfdGhpcy5wcmlvcml0eSA8IHApIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGhhbmRzaGFrZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaGFuZHNoYWtlLmNsb3NlKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFuc3BvcnQuY2xvc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9O1xuICAgIHJldHVybiBUcmFuc3BvcnRTdHJhdGVneTtcbn0oKSk7XG4vKiBoYXJtb255IGRlZmF1bHQgZXhwb3J0ICovIHZhciB0cmFuc3BvcnRfc3RyYXRlZ3kgPSAodHJhbnNwb3J0X3N0cmF0ZWd5X1RyYW5zcG9ydFN0cmF0ZWd5KTtcbmZ1bmN0aW9uIGZhaWxBdHRlbXB0KGVycm9yLCBjYWxsYmFjaykge1xuICAgIHV0aWwuZGVmZXIoZnVuY3Rpb24gKCkge1xuICAgICAgICBjYWxsYmFjayhlcnJvcik7XG4gICAgfSk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgYWJvcnQ6IGZ1bmN0aW9uICgpIHsgfSxcbiAgICAgICAgZm9yY2VNaW5Qcmlvcml0eTogZnVuY3Rpb24gKCkgeyB9XG4gICAgfTtcbn1cblxuLy8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvY29yZS9zdHJhdGVnaWVzL3N0cmF0ZWd5X2J1aWxkZXIudHNcblxuXG5cblxuXG52YXIgc3RyYXRlZ3lfYnVpbGRlcl9UcmFuc3BvcnRzID0gcnVudGltZS5UcmFuc3BvcnRzO1xudmFyIHN0cmF0ZWd5X2J1aWxkZXJfZGVmaW5lVHJhbnNwb3J0ID0gZnVuY3Rpb24gKGNvbmZpZywgbmFtZSwgdHlwZSwgcHJpb3JpdHksIG9wdGlvbnMsIG1hbmFnZXIpIHtcbiAgICB2YXIgdHJhbnNwb3J0Q2xhc3MgPSBzdHJhdGVneV9idWlsZGVyX1RyYW5zcG9ydHNbdHlwZV07XG4gICAgaWYgKCF0cmFuc3BvcnRDbGFzcykge1xuICAgICAgICB0aHJvdyBuZXcgVW5zdXBwb3J0ZWRUcmFuc3BvcnQodHlwZSk7XG4gICAgfVxuICAgIHZhciBlbmFibGVkID0gKCFjb25maWcuZW5hYmxlZFRyYW5zcG9ydHMgfHxcbiAgICAgICAgYXJyYXlJbmRleE9mKGNvbmZpZy5lbmFibGVkVHJhbnNwb3J0cywgbmFtZSkgIT09IC0xKSAmJlxuICAgICAgICAoIWNvbmZpZy5kaXNhYmxlZFRyYW5zcG9ydHMgfHxcbiAgICAgICAgICAgIGFycmF5SW5kZXhPZihjb25maWcuZGlzYWJsZWRUcmFuc3BvcnRzLCBuYW1lKSA9PT0gLTEpO1xuICAgIHZhciB0cmFuc3BvcnQ7XG4gICAgaWYgKGVuYWJsZWQpIHtcbiAgICAgICAgb3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oeyBpZ25vcmVOdWxsT3JpZ2luOiBjb25maWcuaWdub3JlTnVsbE9yaWdpbiB9LCBvcHRpb25zKTtcbiAgICAgICAgdHJhbnNwb3J0ID0gbmV3IHRyYW5zcG9ydF9zdHJhdGVneShuYW1lLCBwcmlvcml0eSwgbWFuYWdlciA/IG1hbmFnZXIuZ2V0QXNzaXN0YW50KHRyYW5zcG9ydENsYXNzKSA6IHRyYW5zcG9ydENsYXNzLCBvcHRpb25zKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHRyYW5zcG9ydCA9IHN0cmF0ZWd5X2J1aWxkZXJfVW5zdXBwb3J0ZWRTdHJhdGVneTtcbiAgICB9XG4gICAgcmV0dXJuIHRyYW5zcG9ydDtcbn07XG52YXIgc3RyYXRlZ3lfYnVpbGRlcl9VbnN1cHBvcnRlZFN0cmF0ZWd5ID0ge1xuICAgIGlzU3VwcG9ydGVkOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9LFxuICAgIGNvbm5lY3Q6IGZ1bmN0aW9uIChfLCBjYWxsYmFjaykge1xuICAgICAgICB2YXIgZGVmZXJyZWQgPSB1dGlsLmRlZmVyKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGNhbGxiYWNrKG5ldyBVbnN1cHBvcnRlZFN0cmF0ZWd5KCkpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGFib3J0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgZGVmZXJyZWQuZW5zdXJlQWJvcnRlZCgpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGZvcmNlTWluUHJpb3JpdHk6IGZ1bmN0aW9uICgpIHsgfVxuICAgICAgICB9O1xuICAgIH1cbn07XG5cbi8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL2NvcmUvYXV0aC91c2VyX2F1dGhlbnRpY2F0b3IudHNcblxuXG52YXIgY29tcG9zZUNoYW5uZWxRdWVyeSA9IGZ1bmN0aW9uIChwYXJhbXMsIGF1dGhPcHRpb25zKSB7XG4gICAgdmFyIHF1ZXJ5ID0gJ3NvY2tldF9pZD0nICsgZW5jb2RlVVJJQ29tcG9uZW50KHBhcmFtcy5zb2NrZXRJZCk7XG4gICAgZm9yICh2YXIga2V5IGluIGF1dGhPcHRpb25zLnBhcmFtcykge1xuICAgICAgICBxdWVyeSArPVxuICAgICAgICAgICAgJyYnICtcbiAgICAgICAgICAgICAgICBlbmNvZGVVUklDb21wb25lbnQoa2V5KSArXG4gICAgICAgICAgICAgICAgJz0nICtcbiAgICAgICAgICAgICAgICBlbmNvZGVVUklDb21wb25lbnQoYXV0aE9wdGlvbnMucGFyYW1zW2tleV0pO1xuICAgIH1cbiAgICBpZiAoYXV0aE9wdGlvbnMucGFyYW1zUHJvdmlkZXIgIT0gbnVsbCkge1xuICAgICAgICB2YXIgZHluYW1pY1BhcmFtcyA9IGF1dGhPcHRpb25zLnBhcmFtc1Byb3ZpZGVyKCk7XG4gICAgICAgIGZvciAodmFyIGtleSBpbiBkeW5hbWljUGFyYW1zKSB7XG4gICAgICAgICAgICBxdWVyeSArPVxuICAgICAgICAgICAgICAgICcmJyArXG4gICAgICAgICAgICAgICAgICAgIGVuY29kZVVSSUNvbXBvbmVudChrZXkpICtcbiAgICAgICAgICAgICAgICAgICAgJz0nICtcbiAgICAgICAgICAgICAgICAgICAgZW5jb2RlVVJJQ29tcG9uZW50KGR5bmFtaWNQYXJhbXNba2V5XSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHF1ZXJ5O1xufTtcbnZhciBVc2VyQXV0aGVudGljYXRvciA9IGZ1bmN0aW9uIChhdXRoT3B0aW9ucykge1xuICAgIGlmICh0eXBlb2YgcnVudGltZS5nZXRBdXRob3JpemVycygpW2F1dGhPcHRpb25zLnRyYW5zcG9ydF0gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHRocm93IFwiJ1wiICsgYXV0aE9wdGlvbnMudHJhbnNwb3J0ICsgXCInIGlzIG5vdCBhIHJlY29nbml6ZWQgYXV0aCB0cmFuc3BvcnRcIjtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChwYXJhbXMsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBxdWVyeSA9IGNvbXBvc2VDaGFubmVsUXVlcnkocGFyYW1zLCBhdXRoT3B0aW9ucyk7XG4gICAgICAgIHJ1bnRpbWUuZ2V0QXV0aG9yaXplcnMoKVthdXRoT3B0aW9ucy50cmFuc3BvcnRdKHJ1bnRpbWUsIHF1ZXJ5LCBhdXRoT3B0aW9ucywgQXV0aFJlcXVlc3RUeXBlLlVzZXJBdXRoZW50aWNhdGlvbiwgY2FsbGJhY2spO1xuICAgIH07XG59O1xuLyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyB2YXIgdXNlcl9hdXRoZW50aWNhdG9yID0gKFVzZXJBdXRoZW50aWNhdG9yKTtcblxuLy8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvY29yZS9hdXRoL2NoYW5uZWxfYXV0aG9yaXplci50c1xuXG5cbnZhciBjaGFubmVsX2F1dGhvcml6ZXJfY29tcG9zZUNoYW5uZWxRdWVyeSA9IGZ1bmN0aW9uIChwYXJhbXMsIGF1dGhPcHRpb25zKSB7XG4gICAgdmFyIHF1ZXJ5ID0gJ3NvY2tldF9pZD0nICsgZW5jb2RlVVJJQ29tcG9uZW50KHBhcmFtcy5zb2NrZXRJZCk7XG4gICAgcXVlcnkgKz0gJyZjaGFubmVsX25hbWU9JyArIGVuY29kZVVSSUNvbXBvbmVudChwYXJhbXMuY2hhbm5lbE5hbWUpO1xuICAgIGZvciAodmFyIGtleSBpbiBhdXRoT3B0aW9ucy5wYXJhbXMpIHtcbiAgICAgICAgcXVlcnkgKz1cbiAgICAgICAgICAgICcmJyArXG4gICAgICAgICAgICAgICAgZW5jb2RlVVJJQ29tcG9uZW50KGtleSkgK1xuICAgICAgICAgICAgICAgICc9JyArXG4gICAgICAgICAgICAgICAgZW5jb2RlVVJJQ29tcG9uZW50KGF1dGhPcHRpb25zLnBhcmFtc1trZXldKTtcbiAgICB9XG4gICAgaWYgKGF1dGhPcHRpb25zLnBhcmFtc1Byb3ZpZGVyICE9IG51bGwpIHtcbiAgICAgICAgdmFyIGR5bmFtaWNQYXJhbXMgPSBhdXRoT3B0aW9ucy5wYXJhbXNQcm92aWRlcigpO1xuICAgICAgICBmb3IgKHZhciBrZXkgaW4gZHluYW1pY1BhcmFtcykge1xuICAgICAgICAgICAgcXVlcnkgKz1cbiAgICAgICAgICAgICAgICAnJicgK1xuICAgICAgICAgICAgICAgICAgICBlbmNvZGVVUklDb21wb25lbnQoa2V5KSArXG4gICAgICAgICAgICAgICAgICAgICc9JyArXG4gICAgICAgICAgICAgICAgICAgIGVuY29kZVVSSUNvbXBvbmVudChkeW5hbWljUGFyYW1zW2tleV0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBxdWVyeTtcbn07XG52YXIgQ2hhbm5lbEF1dGhvcml6ZXIgPSBmdW5jdGlvbiAoYXV0aE9wdGlvbnMpIHtcbiAgICBpZiAodHlwZW9mIHJ1bnRpbWUuZ2V0QXV0aG9yaXplcnMoKVthdXRoT3B0aW9ucy50cmFuc3BvcnRdID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICB0aHJvdyBcIidcIiArIGF1dGhPcHRpb25zLnRyYW5zcG9ydCArIFwiJyBpcyBub3QgYSByZWNvZ25pemVkIGF1dGggdHJhbnNwb3J0XCI7XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiAocGFyYW1zLCBjYWxsYmFjaykge1xuICAgICAgICB2YXIgcXVlcnkgPSBjaGFubmVsX2F1dGhvcml6ZXJfY29tcG9zZUNoYW5uZWxRdWVyeShwYXJhbXMsIGF1dGhPcHRpb25zKTtcbiAgICAgICAgcnVudGltZS5nZXRBdXRob3JpemVycygpW2F1dGhPcHRpb25zLnRyYW5zcG9ydF0ocnVudGltZSwgcXVlcnksIGF1dGhPcHRpb25zLCBBdXRoUmVxdWVzdFR5cGUuQ2hhbm5lbEF1dGhvcml6YXRpb24sIGNhbGxiYWNrKTtcbiAgICB9O1xufTtcbi8qIGhhcm1vbnkgZGVmYXVsdCBleHBvcnQgKi8gdmFyIGNoYW5uZWxfYXV0aG9yaXplciA9IChDaGFubmVsQXV0aG9yaXplcik7XG5cbi8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL2NvcmUvYXV0aC9kZXByZWNhdGVkX2NoYW5uZWxfYXV0aG9yaXplci50c1xudmFyIENoYW5uZWxBdXRob3JpemVyUHJveHkgPSBmdW5jdGlvbiAocHVzaGVyLCBhdXRoT3B0aW9ucywgY2hhbm5lbEF1dGhvcml6ZXJHZW5lcmF0b3IpIHtcbiAgICB2YXIgZGVwcmVjYXRlZEF1dGhvcml6ZXJPcHRpb25zID0ge1xuICAgICAgICBhdXRoVHJhbnNwb3J0OiBhdXRoT3B0aW9ucy50cmFuc3BvcnQsXG4gICAgICAgIGF1dGhFbmRwb2ludDogYXV0aE9wdGlvbnMuZW5kcG9pbnQsXG4gICAgICAgIGF1dGg6IHtcbiAgICAgICAgICAgIHBhcmFtczogYXV0aE9wdGlvbnMucGFyYW1zLFxuICAgICAgICAgICAgaGVhZGVyczogYXV0aE9wdGlvbnMuaGVhZGVyc1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHBhcmFtcywgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIGNoYW5uZWwgPSBwdXNoZXIuY2hhbm5lbChwYXJhbXMuY2hhbm5lbE5hbWUpO1xuICAgICAgICB2YXIgY2hhbm5lbEF1dGhvcml6ZXIgPSBjaGFubmVsQXV0aG9yaXplckdlbmVyYXRvcihjaGFubmVsLCBkZXByZWNhdGVkQXV0aG9yaXplck9wdGlvbnMpO1xuICAgICAgICBjaGFubmVsQXV0aG9yaXplci5hdXRob3JpemUocGFyYW1zLnNvY2tldElkLCBjYWxsYmFjayk7XG4gICAgfTtcbn07XG5cbi8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL2NvcmUvY29uZmlnLnRzXG52YXIgX19hc3NpZ24gPSAodW5kZWZpbmVkICYmIHVuZGVmaW5lZC5fX2Fzc2lnbikgfHwgZnVuY3Rpb24gKCkge1xuICAgIF9fYXNzaWduID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbih0KSB7XG4gICAgICAgIGZvciAodmFyIHMsIGkgPSAxLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IG47IGkrKykge1xuICAgICAgICAgICAgcyA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSlcbiAgICAgICAgICAgICAgICB0W3BdID0gc1twXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdDtcbiAgICB9O1xuICAgIHJldHVybiBfX2Fzc2lnbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufTtcblxuXG5cblxuXG5mdW5jdGlvbiBnZXRDb25maWcob3B0cywgcHVzaGVyKSB7XG4gICAgdmFyIGNvbmZpZyA9IHtcbiAgICAgICAgYWN0aXZpdHlUaW1lb3V0OiBvcHRzLmFjdGl2aXR5VGltZW91dCB8fCBkZWZhdWx0cy5hY3Rpdml0eVRpbWVvdXQsXG4gICAgICAgIGNsdXN0ZXI6IG9wdHMuY2x1c3RlciB8fCBkZWZhdWx0cy5jbHVzdGVyLFxuICAgICAgICBodHRwUGF0aDogb3B0cy5odHRwUGF0aCB8fCBkZWZhdWx0cy5odHRwUGF0aCxcbiAgICAgICAgaHR0cFBvcnQ6IG9wdHMuaHR0cFBvcnQgfHwgZGVmYXVsdHMuaHR0cFBvcnQsXG4gICAgICAgIGh0dHBzUG9ydDogb3B0cy5odHRwc1BvcnQgfHwgZGVmYXVsdHMuaHR0cHNQb3J0LFxuICAgICAgICBwb25nVGltZW91dDogb3B0cy5wb25nVGltZW91dCB8fCBkZWZhdWx0cy5wb25nVGltZW91dCxcbiAgICAgICAgc3RhdHNIb3N0OiBvcHRzLnN0YXRzSG9zdCB8fCBkZWZhdWx0cy5zdGF0c19ob3N0LFxuICAgICAgICB1bmF2YWlsYWJsZVRpbWVvdXQ6IG9wdHMudW5hdmFpbGFibGVUaW1lb3V0IHx8IGRlZmF1bHRzLnVuYXZhaWxhYmxlVGltZW91dCxcbiAgICAgICAgd3NQYXRoOiBvcHRzLndzUGF0aCB8fCBkZWZhdWx0cy53c1BhdGgsXG4gICAgICAgIHdzUG9ydDogb3B0cy53c1BvcnQgfHwgZGVmYXVsdHMud3NQb3J0LFxuICAgICAgICB3c3NQb3J0OiBvcHRzLndzc1BvcnQgfHwgZGVmYXVsdHMud3NzUG9ydCxcbiAgICAgICAgZW5hYmxlU3RhdHM6IGdldEVuYWJsZVN0YXRzQ29uZmlnKG9wdHMpLFxuICAgICAgICBodHRwSG9zdDogZ2V0SHR0cEhvc3Qob3B0cyksXG4gICAgICAgIHVzZVRMUzogc2hvdWxkVXNlVExTKG9wdHMpLFxuICAgICAgICB3c0hvc3Q6IGdldFdlYnNvY2tldEhvc3Qob3B0cyksXG4gICAgICAgIHVzZXJBdXRoZW50aWNhdG9yOiBidWlsZFVzZXJBdXRoZW50aWNhdG9yKG9wdHMpLFxuICAgICAgICBjaGFubmVsQXV0aG9yaXplcjogYnVpbGRDaGFubmVsQXV0aG9yaXplcihvcHRzLCBwdXNoZXIpXG4gICAgfTtcbiAgICBpZiAoJ2Rpc2FibGVkVHJhbnNwb3J0cycgaW4gb3B0cylcbiAgICAgICAgY29uZmlnLmRpc2FibGVkVHJhbnNwb3J0cyA9IG9wdHMuZGlzYWJsZWRUcmFuc3BvcnRzO1xuICAgIGlmICgnZW5hYmxlZFRyYW5zcG9ydHMnIGluIG9wdHMpXG4gICAgICAgIGNvbmZpZy5lbmFibGVkVHJhbnNwb3J0cyA9IG9wdHMuZW5hYmxlZFRyYW5zcG9ydHM7XG4gICAgaWYgKCdpZ25vcmVOdWxsT3JpZ2luJyBpbiBvcHRzKVxuICAgICAgICBjb25maWcuaWdub3JlTnVsbE9yaWdpbiA9IG9wdHMuaWdub3JlTnVsbE9yaWdpbjtcbiAgICBpZiAoJ3RpbWVsaW5lUGFyYW1zJyBpbiBvcHRzKVxuICAgICAgICBjb25maWcudGltZWxpbmVQYXJhbXMgPSBvcHRzLnRpbWVsaW5lUGFyYW1zO1xuICAgIGlmICgnbmFjbCcgaW4gb3B0cykge1xuICAgICAgICBjb25maWcubmFjbCA9IG9wdHMubmFjbDtcbiAgICB9XG4gICAgcmV0dXJuIGNvbmZpZztcbn1cbmZ1bmN0aW9uIGdldEh0dHBIb3N0KG9wdHMpIHtcbiAgICBpZiAob3B0cy5odHRwSG9zdCkge1xuICAgICAgICByZXR1cm4gb3B0cy5odHRwSG9zdDtcbiAgICB9XG4gICAgaWYgKG9wdHMuY2x1c3Rlcikge1xuICAgICAgICByZXR1cm4gXCJzb2NranMtXCIgKyBvcHRzLmNsdXN0ZXIgKyBcIi5wdXNoZXIuY29tXCI7XG4gICAgfVxuICAgIHJldHVybiBkZWZhdWx0cy5odHRwSG9zdDtcbn1cbmZ1bmN0aW9uIGdldFdlYnNvY2tldEhvc3Qob3B0cykge1xuICAgIGlmIChvcHRzLndzSG9zdCkge1xuICAgICAgICByZXR1cm4gb3B0cy53c0hvc3Q7XG4gICAgfVxuICAgIGlmIChvcHRzLmNsdXN0ZXIpIHtcbiAgICAgICAgcmV0dXJuIGdldFdlYnNvY2tldEhvc3RGcm9tQ2x1c3RlcihvcHRzLmNsdXN0ZXIpO1xuICAgIH1cbiAgICByZXR1cm4gZ2V0V2Vic29ja2V0SG9zdEZyb21DbHVzdGVyKGRlZmF1bHRzLmNsdXN0ZXIpO1xufVxuZnVuY3Rpb24gZ2V0V2Vic29ja2V0SG9zdEZyb21DbHVzdGVyKGNsdXN0ZXIpIHtcbiAgICByZXR1cm4gXCJ3cy1cIiArIGNsdXN0ZXIgKyBcIi5wdXNoZXIuY29tXCI7XG59XG5mdW5jdGlvbiBzaG91bGRVc2VUTFMob3B0cykge1xuICAgIGlmIChydW50aW1lLmdldFByb3RvY29sKCkgPT09ICdodHRwczonKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBlbHNlIGlmIChvcHRzLmZvcmNlVExTID09PSBmYWxzZSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufVxuZnVuY3Rpb24gZ2V0RW5hYmxlU3RhdHNDb25maWcob3B0cykge1xuICAgIGlmICgnZW5hYmxlU3RhdHMnIGluIG9wdHMpIHtcbiAgICAgICAgcmV0dXJuIG9wdHMuZW5hYmxlU3RhdHM7XG4gICAgfVxuICAgIGlmICgnZGlzYWJsZVN0YXRzJyBpbiBvcHRzKSB7XG4gICAgICAgIHJldHVybiAhb3B0cy5kaXNhYmxlU3RhdHM7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cbmZ1bmN0aW9uIGJ1aWxkVXNlckF1dGhlbnRpY2F0b3Iob3B0cykge1xuICAgIHZhciB1c2VyQXV0aGVudGljYXRpb24gPSBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgZGVmYXVsdHMudXNlckF1dGhlbnRpY2F0aW9uKSwgb3B0cy51c2VyQXV0aGVudGljYXRpb24pO1xuICAgIGlmICgnY3VzdG9tSGFuZGxlcicgaW4gdXNlckF1dGhlbnRpY2F0aW9uICYmXG4gICAgICAgIHVzZXJBdXRoZW50aWNhdGlvblsnY3VzdG9tSGFuZGxlciddICE9IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHVzZXJBdXRoZW50aWNhdGlvblsnY3VzdG9tSGFuZGxlciddO1xuICAgIH1cbiAgICByZXR1cm4gdXNlcl9hdXRoZW50aWNhdG9yKHVzZXJBdXRoZW50aWNhdGlvbik7XG59XG5mdW5jdGlvbiBidWlsZENoYW5uZWxBdXRoKG9wdHMsIHB1c2hlcikge1xuICAgIHZhciBjaGFubmVsQXV0aG9yaXphdGlvbjtcbiAgICBpZiAoJ2NoYW5uZWxBdXRob3JpemF0aW9uJyBpbiBvcHRzKSB7XG4gICAgICAgIGNoYW5uZWxBdXRob3JpemF0aW9uID0gX19hc3NpZ24oX19hc3NpZ24oe30sIGRlZmF1bHRzLmNoYW5uZWxBdXRob3JpemF0aW9uKSwgb3B0cy5jaGFubmVsQXV0aG9yaXphdGlvbik7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBjaGFubmVsQXV0aG9yaXphdGlvbiA9IHtcbiAgICAgICAgICAgIHRyYW5zcG9ydDogb3B0cy5hdXRoVHJhbnNwb3J0IHx8IGRlZmF1bHRzLmF1dGhUcmFuc3BvcnQsXG4gICAgICAgICAgICBlbmRwb2ludDogb3B0cy5hdXRoRW5kcG9pbnQgfHwgZGVmYXVsdHMuYXV0aEVuZHBvaW50XG4gICAgICAgIH07XG4gICAgICAgIGlmICgnYXV0aCcgaW4gb3B0cykge1xuICAgICAgICAgICAgaWYgKCdwYXJhbXMnIGluIG9wdHMuYXV0aClcbiAgICAgICAgICAgICAgICBjaGFubmVsQXV0aG9yaXphdGlvbi5wYXJhbXMgPSBvcHRzLmF1dGgucGFyYW1zO1xuICAgICAgICAgICAgaWYgKCdoZWFkZXJzJyBpbiBvcHRzLmF1dGgpXG4gICAgICAgICAgICAgICAgY2hhbm5lbEF1dGhvcml6YXRpb24uaGVhZGVycyA9IG9wdHMuYXV0aC5oZWFkZXJzO1xuICAgICAgICB9XG4gICAgICAgIGlmICgnYXV0aG9yaXplcicgaW4gb3B0cylcbiAgICAgICAgICAgIGNoYW5uZWxBdXRob3JpemF0aW9uLmN1c3RvbUhhbmRsZXIgPSBDaGFubmVsQXV0aG9yaXplclByb3h5KHB1c2hlciwgY2hhbm5lbEF1dGhvcml6YXRpb24sIG9wdHMuYXV0aG9yaXplcik7XG4gICAgfVxuICAgIHJldHVybiBjaGFubmVsQXV0aG9yaXphdGlvbjtcbn1cbmZ1bmN0aW9uIGJ1aWxkQ2hhbm5lbEF1dGhvcml6ZXIob3B0cywgcHVzaGVyKSB7XG4gICAgdmFyIGNoYW5uZWxBdXRob3JpemF0aW9uID0gYnVpbGRDaGFubmVsQXV0aChvcHRzLCBwdXNoZXIpO1xuICAgIGlmICgnY3VzdG9tSGFuZGxlcicgaW4gY2hhbm5lbEF1dGhvcml6YXRpb24gJiZcbiAgICAgICAgY2hhbm5lbEF1dGhvcml6YXRpb25bJ2N1c3RvbUhhbmRsZXInXSAhPSBudWxsKSB7XG4gICAgICAgIHJldHVybiBjaGFubmVsQXV0aG9yaXphdGlvblsnY3VzdG9tSGFuZGxlciddO1xuICAgIH1cbiAgICByZXR1cm4gY2hhbm5lbF9hdXRob3JpemVyKGNoYW5uZWxBdXRob3JpemF0aW9uKTtcbn1cblxuLy8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvY29yZS93YXRjaGxpc3QudHNcbnZhciB3YXRjaGxpc3RfZXh0ZW5kcyA9ICh1bmRlZmluZWQgJiYgdW5kZWZpbmVkLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcbiAgICAgICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcbiAgICAgICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgICAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICB9O1xuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xuXG5cbnZhciB3YXRjaGxpc3RfV2F0Y2hsaXN0RmFjYWRlID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB3YXRjaGxpc3RfZXh0ZW5kcyhXYXRjaGxpc3RGYWNhZGUsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gV2F0Y2hsaXN0RmFjYWRlKHB1c2hlcikge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBmdW5jdGlvbiAoZXZlbnROYW1lLCBkYXRhKSB7XG4gICAgICAgICAgICBsb2dnZXIuZGVidWcoXCJObyBjYWxsYmFja3Mgb24gd2F0Y2hsaXN0IGV2ZW50cyBmb3IgXCIgKyBldmVudE5hbWUpO1xuICAgICAgICB9KSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5wdXNoZXIgPSBwdXNoZXI7XG4gICAgICAgIF90aGlzLmJpbmRXYXRjaGxpc3RJbnRlcm5hbEV2ZW50KCk7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgV2F0Y2hsaXN0RmFjYWRlLnByb3RvdHlwZS5oYW5kbGVFdmVudCA9IGZ1bmN0aW9uIChwdXNoZXJFdmVudCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBwdXNoZXJFdmVudC5kYXRhLmV2ZW50cy5mb3JFYWNoKGZ1bmN0aW9uICh3YXRjaGxpc3RFdmVudCkge1xuICAgICAgICAgICAgX3RoaXMuZW1pdCh3YXRjaGxpc3RFdmVudC5uYW1lLCB3YXRjaGxpc3RFdmVudCk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgV2F0Y2hsaXN0RmFjYWRlLnByb3RvdHlwZS5iaW5kV2F0Y2hsaXN0SW50ZXJuYWxFdmVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdGhpcy5wdXNoZXIuY29ubmVjdGlvbi5iaW5kKCdtZXNzYWdlJywgZnVuY3Rpb24gKHB1c2hlckV2ZW50KSB7XG4gICAgICAgICAgICB2YXIgZXZlbnROYW1lID0gcHVzaGVyRXZlbnQuZXZlbnQ7XG4gICAgICAgICAgICBpZiAoZXZlbnROYW1lID09PSAncHVzaGVyX2ludGVybmFsOndhdGNobGlzdF9ldmVudHMnKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuaGFuZGxlRXZlbnQocHVzaGVyRXZlbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIHJldHVybiBXYXRjaGxpc3RGYWNhZGU7XG59KGRpc3BhdGNoZXIpKTtcbi8qIGhhcm1vbnkgZGVmYXVsdCBleHBvcnQgKi8gdmFyIHdhdGNobGlzdCA9ICh3YXRjaGxpc3RfV2F0Y2hsaXN0RmFjYWRlKTtcblxuLy8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvY29yZS91dGlscy9mbGF0X3Byb21pc2UudHNcbmZ1bmN0aW9uIGZsYXRQcm9taXNlKCkge1xuICAgIHZhciByZXNvbHZlLCByZWplY3Q7XG4gICAgdmFyIHByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzLCByZWopIHtcbiAgICAgICAgcmVzb2x2ZSA9IHJlcztcbiAgICAgICAgcmVqZWN0ID0gcmVqO1xuICAgIH0pO1xuICAgIHJldHVybiB7IHByb21pc2U6IHByb21pc2UsIHJlc29sdmU6IHJlc29sdmUsIHJlamVjdDogcmVqZWN0IH07XG59XG4vKiBoYXJtb255IGRlZmF1bHQgZXhwb3J0ICovIHZhciBmbGF0X3Byb21pc2UgPSAoZmxhdFByb21pc2UpO1xuXG4vLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy9jb3JlL3VzZXIudHNcbnZhciB1c2VyX2V4dGVuZHMgPSAodW5kZWZpbmVkICYmIHVuZGVmaW5lZC5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcbiAgICAgICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgfTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcblxuXG5cblxuXG52YXIgdXNlcl9Vc2VyRmFjYWRlID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB1c2VyX2V4dGVuZHMoVXNlckZhY2FkZSwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBVc2VyRmFjYWRlKHB1c2hlcikge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBmdW5jdGlvbiAoZXZlbnROYW1lLCBkYXRhKSB7XG4gICAgICAgICAgICBsb2dnZXIuZGVidWcoJ05vIGNhbGxiYWNrcyBvbiB1c2VyIGZvciAnICsgZXZlbnROYW1lKTtcbiAgICAgICAgfSkgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuc2lnbmluX3JlcXVlc3RlZCA9IGZhbHNlO1xuICAgICAgICBfdGhpcy51c2VyX2RhdGEgPSBudWxsO1xuICAgICAgICBfdGhpcy5zZXJ2ZXJUb1VzZXJDaGFubmVsID0gbnVsbDtcbiAgICAgICAgX3RoaXMuc2lnbmluRG9uZVByb21pc2UgPSBudWxsO1xuICAgICAgICBfdGhpcy5fc2lnbmluRG9uZVJlc29sdmUgPSBudWxsO1xuICAgICAgICBfdGhpcy5fb25BdXRob3JpemUgPSBmdW5jdGlvbiAoZXJyLCBhdXRoRGF0YSkge1xuICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICAgIGxvZ2dlci53YXJuKFwiRXJyb3IgZHVyaW5nIHNpZ25pbjogXCIgKyBlcnIpO1xuICAgICAgICAgICAgICAgIF90aGlzLl9jbGVhbnVwKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgX3RoaXMucHVzaGVyLnNlbmRfZXZlbnQoJ3B1c2hlcjpzaWduaW4nLCB7XG4gICAgICAgICAgICAgICAgYXV0aDogYXV0aERhdGEuYXV0aCxcbiAgICAgICAgICAgICAgICB1c2VyX2RhdGE6IGF1dGhEYXRhLnVzZXJfZGF0YVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICAgIF90aGlzLnB1c2hlciA9IHB1c2hlcjtcbiAgICAgICAgX3RoaXMucHVzaGVyLmNvbm5lY3Rpb24uYmluZCgnc3RhdGVfY2hhbmdlJywgZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICB2YXIgcHJldmlvdXMgPSBfYS5wcmV2aW91cywgY3VycmVudCA9IF9hLmN1cnJlbnQ7XG4gICAgICAgICAgICBpZiAocHJldmlvdXMgIT09ICdjb25uZWN0ZWQnICYmIGN1cnJlbnQgPT09ICdjb25uZWN0ZWQnKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuX3NpZ25pbigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHByZXZpb3VzID09PSAnY29ubmVjdGVkJyAmJiBjdXJyZW50ICE9PSAnY29ubmVjdGVkJykge1xuICAgICAgICAgICAgICAgIF90aGlzLl9jbGVhbnVwKCk7XG4gICAgICAgICAgICAgICAgX3RoaXMuX25ld1NpZ25pblByb21pc2VJZk5lZWRlZCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgX3RoaXMud2F0Y2hsaXN0ID0gbmV3IHdhdGNobGlzdChwdXNoZXIpO1xuICAgICAgICBfdGhpcy5wdXNoZXIuY29ubmVjdGlvbi5iaW5kKCdtZXNzYWdlJywgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICB2YXIgZXZlbnROYW1lID0gZXZlbnQuZXZlbnQ7XG4gICAgICAgICAgICBpZiAoZXZlbnROYW1lID09PSAncHVzaGVyOnNpZ25pbl9zdWNjZXNzJykge1xuICAgICAgICAgICAgICAgIF90aGlzLl9vblNpZ25pblN1Y2Nlc3MoZXZlbnQuZGF0YSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoX3RoaXMuc2VydmVyVG9Vc2VyQ2hhbm5lbCAmJlxuICAgICAgICAgICAgICAgIF90aGlzLnNlcnZlclRvVXNlckNoYW5uZWwubmFtZSA9PT0gZXZlbnQuY2hhbm5lbCkge1xuICAgICAgICAgICAgICAgIF90aGlzLnNlcnZlclRvVXNlckNoYW5uZWwuaGFuZGxlRXZlbnQoZXZlbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBVc2VyRmFjYWRlLnByb3RvdHlwZS5zaWduaW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLnNpZ25pbl9yZXF1ZXN0ZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNpZ25pbl9yZXF1ZXN0ZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLl9zaWduaW4oKTtcbiAgICB9O1xuICAgIFVzZXJGYWNhZGUucHJvdG90eXBlLl9zaWduaW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghdGhpcy5zaWduaW5fcmVxdWVzdGVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fbmV3U2lnbmluUHJvbWlzZUlmTmVlZGVkKCk7XG4gICAgICAgIGlmICh0aGlzLnB1c2hlci5jb25uZWN0aW9uLnN0YXRlICE9PSAnY29ubmVjdGVkJykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucHVzaGVyLmNvbmZpZy51c2VyQXV0aGVudGljYXRvcih7XG4gICAgICAgICAgICBzb2NrZXRJZDogdGhpcy5wdXNoZXIuY29ubmVjdGlvbi5zb2NrZXRfaWRcbiAgICAgICAgfSwgdGhpcy5fb25BdXRob3JpemUpO1xuICAgIH07XG4gICAgVXNlckZhY2FkZS5wcm90b3R5cGUuX29uU2lnbmluU3VjY2VzcyA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0aGlzLnVzZXJfZGF0YSA9IEpTT04ucGFyc2UoZGF0YS51c2VyX2RhdGEpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICBsb2dnZXIuZXJyb3IoXCJGYWlsZWQgcGFyc2luZyB1c2VyIGRhdGEgYWZ0ZXIgc2lnbmluOiBcIiArIGRhdGEudXNlcl9kYXRhKTtcbiAgICAgICAgICAgIHRoaXMuX2NsZWFudXAoKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIHRoaXMudXNlcl9kYXRhLmlkICE9PSAnc3RyaW5nJyB8fCB0aGlzLnVzZXJfZGF0YS5pZCA9PT0gJycpIHtcbiAgICAgICAgICAgIGxvZ2dlci5lcnJvcihcInVzZXJfZGF0YSBkb2Vzbid0IGNvbnRhaW4gYW4gaWQuIHVzZXJfZGF0YTogXCIgKyB0aGlzLnVzZXJfZGF0YSk7XG4gICAgICAgICAgICB0aGlzLl9jbGVhbnVwKCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fc2lnbmluRG9uZVJlc29sdmUoKTtcbiAgICAgICAgdGhpcy5fc3Vic2NyaWJlQ2hhbm5lbHMoKTtcbiAgICB9O1xuICAgIFVzZXJGYWNhZGUucHJvdG90eXBlLl9zdWJzY3JpYmVDaGFubmVscyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIGVuc3VyZV9zdWJzY3JpYmVkID0gZnVuY3Rpb24gKGNoYW5uZWwpIHtcbiAgICAgICAgICAgIGlmIChjaGFubmVsLnN1YnNjcmlwdGlvblBlbmRpbmcgJiYgY2hhbm5lbC5zdWJzY3JpcHRpb25DYW5jZWxsZWQpIHtcbiAgICAgICAgICAgICAgICBjaGFubmVsLnJlaW5zdGF0ZVN1YnNjcmlwdGlvbigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoIWNoYW5uZWwuc3Vic2NyaXB0aW9uUGVuZGluZyAmJlxuICAgICAgICAgICAgICAgIF90aGlzLnB1c2hlci5jb25uZWN0aW9uLnN0YXRlID09PSAnY29ubmVjdGVkJykge1xuICAgICAgICAgICAgICAgIGNoYW5uZWwuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuc2VydmVyVG9Vc2VyQ2hhbm5lbCA9IG5ldyBjaGFubmVsc19jaGFubmVsKFwiI3NlcnZlci10by11c2VyLVwiICsgdGhpcy51c2VyX2RhdGEuaWQsIHRoaXMucHVzaGVyKTtcbiAgICAgICAgdGhpcy5zZXJ2ZXJUb1VzZXJDaGFubmVsLmJpbmRfZ2xvYmFsKGZ1bmN0aW9uIChldmVudE5hbWUsIGRhdGEpIHtcbiAgICAgICAgICAgIGlmIChldmVudE5hbWUuaW5kZXhPZigncHVzaGVyX2ludGVybmFsOicpID09PSAwIHx8XG4gICAgICAgICAgICAgICAgZXZlbnROYW1lLmluZGV4T2YoJ3B1c2hlcjonKSA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF90aGlzLmVtaXQoZXZlbnROYW1lLCBkYXRhKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGVuc3VyZV9zdWJzY3JpYmVkKHRoaXMuc2VydmVyVG9Vc2VyQ2hhbm5lbCk7XG4gICAgfTtcbiAgICBVc2VyRmFjYWRlLnByb3RvdHlwZS5fY2xlYW51cCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy51c2VyX2RhdGEgPSBudWxsO1xuICAgICAgICBpZiAodGhpcy5zZXJ2ZXJUb1VzZXJDaGFubmVsKSB7XG4gICAgICAgICAgICB0aGlzLnNlcnZlclRvVXNlckNoYW5uZWwudW5iaW5kX2FsbCgpO1xuICAgICAgICAgICAgdGhpcy5zZXJ2ZXJUb1VzZXJDaGFubmVsLmRpc2Nvbm5lY3QoKTtcbiAgICAgICAgICAgIHRoaXMuc2VydmVyVG9Vc2VyQ2hhbm5lbCA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuc2lnbmluX3JlcXVlc3RlZCkge1xuICAgICAgICAgICAgdGhpcy5fc2lnbmluRG9uZVJlc29sdmUoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgVXNlckZhY2FkZS5wcm90b3R5cGUuX25ld1NpZ25pblByb21pc2VJZk5lZWRlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCF0aGlzLnNpZ25pbl9yZXF1ZXN0ZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5zaWduaW5Eb25lUHJvbWlzZSAmJiAhdGhpcy5zaWduaW5Eb25lUHJvbWlzZS5kb25lKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIF9hID0gZmxhdF9wcm9taXNlKCksIHByb21pc2UgPSBfYS5wcm9taXNlLCByZXNvbHZlID0gX2EucmVzb2x2ZSwgXyA9IF9hLnJlamVjdDtcbiAgICAgICAgcHJvbWlzZS5kb25lID0gZmFsc2U7XG4gICAgICAgIHZhciBzZXREb25lID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcHJvbWlzZS5kb25lID0gdHJ1ZTtcbiAgICAgICAgfTtcbiAgICAgICAgcHJvbWlzZS50aGVuKHNldERvbmUpW1wiY2F0Y2hcIl0oc2V0RG9uZSk7XG4gICAgICAgIHRoaXMuc2lnbmluRG9uZVByb21pc2UgPSBwcm9taXNlO1xuICAgICAgICB0aGlzLl9zaWduaW5Eb25lUmVzb2x2ZSA9IHJlc29sdmU7XG4gICAgfTtcbiAgICByZXR1cm4gVXNlckZhY2FkZTtcbn0oZGlzcGF0Y2hlcikpO1xuLyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyB2YXIgdXNlciA9ICh1c2VyX1VzZXJGYWNhZGUpO1xuXG4vLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy9jb3JlL3B1c2hlci50c1xuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG52YXIgcHVzaGVyX1B1c2hlciA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gUHVzaGVyKGFwcF9rZXksIG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgY2hlY2tBcHBLZXkoYXBwX2tleSk7XG4gICAgICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgICAgICBpZiAoIW9wdGlvbnMuY2x1c3RlciAmJiAhKG9wdGlvbnMud3NIb3N0IHx8IG9wdGlvbnMuaHR0cEhvc3QpKSB7XG4gICAgICAgICAgICB2YXIgc3VmZml4ID0gdXJsX3N0b3JlLmJ1aWxkTG9nU3VmZml4KCdqYXZhc2NyaXB0UXVpY2tTdGFydCcpO1xuICAgICAgICAgICAgbG9nZ2VyLndhcm4oXCJZb3Ugc2hvdWxkIGFsd2F5cyBzcGVjaWZ5IGEgY2x1c3RlciB3aGVuIGNvbm5lY3RpbmcuIFwiICsgc3VmZml4KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoJ2Rpc2FibGVTdGF0cycgaW4gb3B0aW9ucykge1xuICAgICAgICAgICAgbG9nZ2VyLndhcm4oJ1RoZSBkaXNhYmxlU3RhdHMgb3B0aW9uIGlzIGRlcHJlY2F0ZWQgaW4gZmF2b3Igb2YgZW5hYmxlU3RhdHMnKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmtleSA9IGFwcF9rZXk7XG4gICAgICAgIHRoaXMuY29uZmlnID0gZ2V0Q29uZmlnKG9wdGlvbnMsIHRoaXMpO1xuICAgICAgICB0aGlzLmNoYW5uZWxzID0gZmFjdG9yeS5jcmVhdGVDaGFubmVscygpO1xuICAgICAgICB0aGlzLmdsb2JhbF9lbWl0dGVyID0gbmV3IGRpc3BhdGNoZXIoKTtcbiAgICAgICAgdGhpcy5zZXNzaW9uSUQgPSBydW50aW1lLnJhbmRvbUludCgxMDAwMDAwMDAwKTtcbiAgICAgICAgdGhpcy50aW1lbGluZSA9IG5ldyB0aW1lbGluZV90aW1lbGluZSh0aGlzLmtleSwgdGhpcy5zZXNzaW9uSUQsIHtcbiAgICAgICAgICAgIGNsdXN0ZXI6IHRoaXMuY29uZmlnLmNsdXN0ZXIsXG4gICAgICAgICAgICBmZWF0dXJlczogUHVzaGVyLmdldENsaWVudEZlYXR1cmVzKCksXG4gICAgICAgICAgICBwYXJhbXM6IHRoaXMuY29uZmlnLnRpbWVsaW5lUGFyYW1zIHx8IHt9LFxuICAgICAgICAgICAgbGltaXQ6IDUwLFxuICAgICAgICAgICAgbGV2ZWw6IHRpbWVsaW5lX2xldmVsLklORk8sXG4gICAgICAgICAgICB2ZXJzaW9uOiBkZWZhdWx0cy5WRVJTSU9OXG4gICAgICAgIH0pO1xuICAgICAgICBpZiAodGhpcy5jb25maWcuZW5hYmxlU3RhdHMpIHtcbiAgICAgICAgICAgIHRoaXMudGltZWxpbmVTZW5kZXIgPSBmYWN0b3J5LmNyZWF0ZVRpbWVsaW5lU2VuZGVyKHRoaXMudGltZWxpbmUsIHtcbiAgICAgICAgICAgICAgICBob3N0OiB0aGlzLmNvbmZpZy5zdGF0c0hvc3QsXG4gICAgICAgICAgICAgICAgcGF0aDogJy90aW1lbGluZS92Mi8nICsgcnVudGltZS5UaW1lbGluZVRyYW5zcG9ydC5uYW1lXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZ2V0U3RyYXRlZ3kgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgICAgICAgICAgcmV0dXJuIHJ1bnRpbWUuZ2V0RGVmYXVsdFN0cmF0ZWd5KF90aGlzLmNvbmZpZywgb3B0aW9ucywgc3RyYXRlZ3lfYnVpbGRlcl9kZWZpbmVUcmFuc3BvcnQpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLmNvbm5lY3Rpb24gPSBmYWN0b3J5LmNyZWF0ZUNvbm5lY3Rpb25NYW5hZ2VyKHRoaXMua2V5LCB7XG4gICAgICAgICAgICBnZXRTdHJhdGVneTogZ2V0U3RyYXRlZ3ksXG4gICAgICAgICAgICB0aW1lbGluZTogdGhpcy50aW1lbGluZSxcbiAgICAgICAgICAgIGFjdGl2aXR5VGltZW91dDogdGhpcy5jb25maWcuYWN0aXZpdHlUaW1lb3V0LFxuICAgICAgICAgICAgcG9uZ1RpbWVvdXQ6IHRoaXMuY29uZmlnLnBvbmdUaW1lb3V0LFxuICAgICAgICAgICAgdW5hdmFpbGFibGVUaW1lb3V0OiB0aGlzLmNvbmZpZy51bmF2YWlsYWJsZVRpbWVvdXQsXG4gICAgICAgICAgICB1c2VUTFM6IEJvb2xlYW4odGhpcy5jb25maWcudXNlVExTKVxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5jb25uZWN0aW9uLmJpbmQoJ2Nvbm5lY3RlZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIF90aGlzLnN1YnNjcmliZUFsbCgpO1xuICAgICAgICAgICAgaWYgKF90aGlzLnRpbWVsaW5lU2VuZGVyKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMudGltZWxpbmVTZW5kZXIuc2VuZChfdGhpcy5jb25uZWN0aW9uLmlzVXNpbmdUTFMoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmNvbm5lY3Rpb24uYmluZCgnbWVzc2FnZScsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgdmFyIGV2ZW50TmFtZSA9IGV2ZW50LmV2ZW50O1xuICAgICAgICAgICAgdmFyIGludGVybmFsID0gZXZlbnROYW1lLmluZGV4T2YoJ3B1c2hlcl9pbnRlcm5hbDonKSA9PT0gMDtcbiAgICAgICAgICAgIGlmIChldmVudC5jaGFubmVsKSB7XG4gICAgICAgICAgICAgICAgdmFyIGNoYW5uZWwgPSBfdGhpcy5jaGFubmVsKGV2ZW50LmNoYW5uZWwpO1xuICAgICAgICAgICAgICAgIGlmIChjaGFubmVsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNoYW5uZWwuaGFuZGxlRXZlbnQoZXZlbnQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghaW50ZXJuYWwpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5nbG9iYWxfZW1pdHRlci5lbWl0KGV2ZW50LmV2ZW50LCBldmVudC5kYXRhKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuY29ubmVjdGlvbi5iaW5kKCdjb25uZWN0aW5nJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgX3RoaXMuY2hhbm5lbHMuZGlzY29ubmVjdCgpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5jb25uZWN0aW9uLmJpbmQoJ2Rpc2Nvbm5lY3RlZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIF90aGlzLmNoYW5uZWxzLmRpc2Nvbm5lY3QoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuY29ubmVjdGlvbi5iaW5kKCdlcnJvcicsIGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgIGxvZ2dlci53YXJuKGVycik7XG4gICAgICAgIH0pO1xuICAgICAgICBQdXNoZXIuaW5zdGFuY2VzLnB1c2godGhpcyk7XG4gICAgICAgIHRoaXMudGltZWxpbmUuaW5mbyh7IGluc3RhbmNlczogUHVzaGVyLmluc3RhbmNlcy5sZW5ndGggfSk7XG4gICAgICAgIHRoaXMudXNlciA9IG5ldyB1c2VyKHRoaXMpO1xuICAgICAgICBpZiAoUHVzaGVyLmlzUmVhZHkpIHtcbiAgICAgICAgICAgIHRoaXMuY29ubmVjdCgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIFB1c2hlci5yZWFkeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgUHVzaGVyLmlzUmVhZHkgPSB0cnVlO1xuICAgICAgICBmb3IgKHZhciBpID0gMCwgbCA9IFB1c2hlci5pbnN0YW5jZXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgICBQdXNoZXIuaW5zdGFuY2VzW2ldLmNvbm5lY3QoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgUHVzaGVyLmdldENsaWVudEZlYXR1cmVzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4ga2V5cyhmaWx0ZXJPYmplY3QoeyB3czogcnVudGltZS5UcmFuc3BvcnRzLndzIH0sIGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICByZXR1cm4gdC5pc1N1cHBvcnRlZCh7fSk7XG4gICAgICAgIH0pKTtcbiAgICB9O1xuICAgIFB1c2hlci5wcm90b3R5cGUuY2hhbm5lbCA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNoYW5uZWxzLmZpbmQobmFtZSk7XG4gICAgfTtcbiAgICBQdXNoZXIucHJvdG90eXBlLmFsbENoYW5uZWxzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jaGFubmVscy5hbGwoKTtcbiAgICB9O1xuICAgIFB1c2hlci5wcm90b3R5cGUuY29ubmVjdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5jb25uZWN0aW9uLmNvbm5lY3QoKTtcbiAgICAgICAgaWYgKHRoaXMudGltZWxpbmVTZW5kZXIpIHtcbiAgICAgICAgICAgIGlmICghdGhpcy50aW1lbGluZVNlbmRlclRpbWVyKSB7XG4gICAgICAgICAgICAgICAgdmFyIHVzaW5nVExTID0gdGhpcy5jb25uZWN0aW9uLmlzVXNpbmdUTFMoKTtcbiAgICAgICAgICAgICAgICB2YXIgdGltZWxpbmVTZW5kZXIgPSB0aGlzLnRpbWVsaW5lU2VuZGVyO1xuICAgICAgICAgICAgICAgIHRoaXMudGltZWxpbmVTZW5kZXJUaW1lciA9IG5ldyBQZXJpb2RpY1RpbWVyKDYwMDAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHRpbWVsaW5lU2VuZGVyLnNlbmQodXNpbmdUTFMpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBQdXNoZXIucHJvdG90eXBlLmRpc2Nvbm5lY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuY29ubmVjdGlvbi5kaXNjb25uZWN0KCk7XG4gICAgICAgIGlmICh0aGlzLnRpbWVsaW5lU2VuZGVyVGltZXIpIHtcbiAgICAgICAgICAgIHRoaXMudGltZWxpbmVTZW5kZXJUaW1lci5lbnN1cmVBYm9ydGVkKCk7XG4gICAgICAgICAgICB0aGlzLnRpbWVsaW5lU2VuZGVyVGltZXIgPSBudWxsO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBQdXNoZXIucHJvdG90eXBlLmJpbmQgPSBmdW5jdGlvbiAoZXZlbnRfbmFtZSwgY2FsbGJhY2ssIGNvbnRleHQpIHtcbiAgICAgICAgdGhpcy5nbG9iYWxfZW1pdHRlci5iaW5kKGV2ZW50X25hbWUsIGNhbGxiYWNrLCBjb250ZXh0KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICBQdXNoZXIucHJvdG90eXBlLnVuYmluZCA9IGZ1bmN0aW9uIChldmVudF9uYW1lLCBjYWxsYmFjaywgY29udGV4dCkge1xuICAgICAgICB0aGlzLmdsb2JhbF9lbWl0dGVyLnVuYmluZChldmVudF9uYW1lLCBjYWxsYmFjaywgY29udGV4dCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgUHVzaGVyLnByb3RvdHlwZS5iaW5kX2dsb2JhbCA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgICAgICB0aGlzLmdsb2JhbF9lbWl0dGVyLmJpbmRfZ2xvYmFsKGNhbGxiYWNrKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICBQdXNoZXIucHJvdG90eXBlLnVuYmluZF9nbG9iYWwgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICAgICAgdGhpcy5nbG9iYWxfZW1pdHRlci51bmJpbmRfZ2xvYmFsKGNhbGxiYWNrKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICBQdXNoZXIucHJvdG90eXBlLnVuYmluZF9hbGwgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICAgICAgdGhpcy5nbG9iYWxfZW1pdHRlci51bmJpbmRfYWxsKCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgUHVzaGVyLnByb3RvdHlwZS5zdWJzY3JpYmVBbGwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBjaGFubmVsTmFtZTtcbiAgICAgICAgZm9yIChjaGFubmVsTmFtZSBpbiB0aGlzLmNoYW5uZWxzLmNoYW5uZWxzKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5jaGFubmVscy5jaGFubmVscy5oYXNPd25Qcm9wZXJ0eShjaGFubmVsTmFtZSkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnN1YnNjcmliZShjaGFubmVsTmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFB1c2hlci5wcm90b3R5cGUuc3Vic2NyaWJlID0gZnVuY3Rpb24gKGNoYW5uZWxfbmFtZSkge1xuICAgICAgICB2YXIgY2hhbm5lbCA9IHRoaXMuY2hhbm5lbHMuYWRkKGNoYW5uZWxfbmFtZSwgdGhpcyk7XG4gICAgICAgIGlmIChjaGFubmVsLnN1YnNjcmlwdGlvblBlbmRpbmcgJiYgY2hhbm5lbC5zdWJzY3JpcHRpb25DYW5jZWxsZWQpIHtcbiAgICAgICAgICAgIGNoYW5uZWwucmVpbnN0YXRlU3Vic2NyaXB0aW9uKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoIWNoYW5uZWwuc3Vic2NyaXB0aW9uUGVuZGluZyAmJlxuICAgICAgICAgICAgdGhpcy5jb25uZWN0aW9uLnN0YXRlID09PSAnY29ubmVjdGVkJykge1xuICAgICAgICAgICAgY2hhbm5lbC5zdWJzY3JpYmUoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY2hhbm5lbDtcbiAgICB9O1xuICAgIFB1c2hlci5wcm90b3R5cGUudW5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoY2hhbm5lbF9uYW1lKSB7XG4gICAgICAgIHZhciBjaGFubmVsID0gdGhpcy5jaGFubmVscy5maW5kKGNoYW5uZWxfbmFtZSk7XG4gICAgICAgIGlmIChjaGFubmVsICYmIGNoYW5uZWwuc3Vic2NyaXB0aW9uUGVuZGluZykge1xuICAgICAgICAgICAgY2hhbm5lbC5jYW5jZWxTdWJzY3JpcHRpb24oKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNoYW5uZWwgPSB0aGlzLmNoYW5uZWxzLnJlbW92ZShjaGFubmVsX25hbWUpO1xuICAgICAgICAgICAgaWYgKGNoYW5uZWwgJiYgY2hhbm5lbC5zdWJzY3JpYmVkKSB7XG4gICAgICAgICAgICAgICAgY2hhbm5lbC51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBQdXNoZXIucHJvdG90eXBlLnNlbmRfZXZlbnQgPSBmdW5jdGlvbiAoZXZlbnRfbmFtZSwgZGF0YSwgY2hhbm5lbCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb25uZWN0aW9uLnNlbmRfZXZlbnQoZXZlbnRfbmFtZSwgZGF0YSwgY2hhbm5lbCk7XG4gICAgfTtcbiAgICBQdXNoZXIucHJvdG90eXBlLnNob3VsZFVzZVRMUyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29uZmlnLnVzZVRMUztcbiAgICB9O1xuICAgIFB1c2hlci5wcm90b3R5cGUuc2lnbmluID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLnVzZXIuc2lnbmluKCk7XG4gICAgfTtcbiAgICBQdXNoZXIuaW5zdGFuY2VzID0gW107XG4gICAgUHVzaGVyLmlzUmVhZHkgPSBmYWxzZTtcbiAgICBQdXNoZXIubG9nVG9Db25zb2xlID0gZmFsc2U7XG4gICAgUHVzaGVyLlJ1bnRpbWUgPSBydW50aW1lO1xuICAgIFB1c2hlci5TY3JpcHRSZWNlaXZlcnMgPSBydW50aW1lLlNjcmlwdFJlY2VpdmVycztcbiAgICBQdXNoZXIuRGVwZW5kZW5jaWVzUmVjZWl2ZXJzID0gcnVudGltZS5EZXBlbmRlbmNpZXNSZWNlaXZlcnM7XG4gICAgUHVzaGVyLmF1dGhfY2FsbGJhY2tzID0gcnVudGltZS5hdXRoX2NhbGxiYWNrcztcbiAgICByZXR1cm4gUHVzaGVyO1xufSgpKTtcbi8qIGhhcm1vbnkgZGVmYXVsdCBleHBvcnQgKi8gdmFyIGNvcmVfcHVzaGVyID0gX193ZWJwYWNrX2V4cG9ydHNfX1tcImRlZmF1bHRcIl0gPSAocHVzaGVyX1B1c2hlcik7XG5mdW5jdGlvbiBjaGVja0FwcEtleShrZXkpIHtcbiAgICBpZiAoa2V5ID09PSBudWxsIHx8IGtleSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRocm93ICdZb3UgbXVzdCBwYXNzIHlvdXIgYXBwIGtleSB3aGVuIHlvdSBpbnN0YW50aWF0ZSBQdXNoZXIuJztcbiAgICB9XG59XG5ydW50aW1lLnNldHVwKHB1c2hlcl9QdXNoZXIpO1xuXG5cbi8qKiovIH0pXG4vKioqKioqLyBdKTtcbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cHVzaGVyLmpzLm1hcCIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0Ly8gbm8gbW9kdWxlLmlkIG5lZWRlZFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCJmdW5jdGlvbiBfdHlwZW9mKG9iaikge1xuICBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7XG5cbiAgcmV0dXJuIF90eXBlb2YgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBcInN5bWJvbFwiID09IHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPyBmdW5jdGlvbiAob2JqKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBvYmo7XG4gIH0gOiBmdW5jdGlvbiAob2JqKSB7XG4gICAgcmV0dXJuIG9iaiAmJiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajtcbiAgfSwgX3R5cGVvZihvYmopO1xufVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7XG4gIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO1xuICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTtcbiAgICBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7XG4gICAgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7XG4gIH1cbn1cblxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykge1xuICBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTtcbiAgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQ29uc3RydWN0b3IsIFwicHJvdG90eXBlXCIsIHtcbiAgICB3cml0YWJsZTogZmFsc2VcbiAgfSk7XG4gIHJldHVybiBDb25zdHJ1Y3Rvcjtcbn1cblxuZnVuY3Rpb24gX2V4dGVuZHMoKSB7XG4gIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG5cbiAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfTtcblxuICByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7XG4gIGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7XG4gIH1cblxuICBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHtcbiAgICBjb25zdHJ1Y3Rvcjoge1xuICAgICAgdmFsdWU6IHN1YkNsYXNzLFxuICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9XG4gIH0pO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoc3ViQ2xhc3MsIFwicHJvdG90eXBlXCIsIHtcbiAgICB3cml0YWJsZTogZmFsc2VcbiAgfSk7XG4gIGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpO1xufVxuXG5mdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2Yobykge1xuICBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2Yobykge1xuICAgIHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7XG4gIH07XG4gIHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7XG59XG5cbmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7XG4gIF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkge1xuICAgIG8uX19wcm90b19fID0gcDtcbiAgICByZXR1cm4gbztcbiAgfTtcblxuICByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApO1xufVxuXG5mdW5jdGlvbiBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkge1xuICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwidW5kZWZpbmVkXCIgfHwgIVJlZmxlY3QuY29uc3RydWN0KSByZXR1cm4gZmFsc2U7XG4gIGlmIChSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKSByZXR1cm4gZmFsc2U7XG4gIGlmICh0eXBlb2YgUHJveHkgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIHRydWU7XG5cbiAgdHJ5IHtcbiAgICBCb29sZWFuLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoQm9vbGVhbiwgW10sIGZ1bmN0aW9uICgpIHt9KSk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxuZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7XG4gIGlmIChzZWxmID09PSB2b2lkIDApIHtcbiAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7XG4gIH1cblxuICByZXR1cm4gc2VsZjtcbn1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkge1xuICBpZiAoY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikpIHtcbiAgICByZXR1cm4gY2FsbDtcbiAgfSBlbHNlIGlmIChjYWxsICE9PSB2b2lkIDApIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiRGVyaXZlZCBjb25zdHJ1Y3RvcnMgbWF5IG9ubHkgcmV0dXJuIG9iamVjdCBvciB1bmRlZmluZWRcIik7XG4gIH1cblxuICByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTtcbn1cblxuZnVuY3Rpb24gX2NyZWF0ZVN1cGVyKERlcml2ZWQpIHtcbiAgdmFyIGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QgPSBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCk7XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIF9jcmVhdGVTdXBlckludGVybmFsKCkge1xuICAgIHZhciBTdXBlciA9IF9nZXRQcm90b3R5cGVPZihEZXJpdmVkKSxcbiAgICAgICAgcmVzdWx0O1xuXG4gICAgaWYgKGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QpIHtcbiAgICAgIHZhciBOZXdUYXJnZXQgPSBfZ2V0UHJvdG90eXBlT2YodGhpcykuY29uc3RydWN0b3I7XG5cbiAgICAgIHJlc3VsdCA9IFJlZmxlY3QuY29uc3RydWN0KFN1cGVyLCBhcmd1bWVudHMsIE5ld1RhcmdldCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdCA9IFN1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIHJlc3VsdCk7XG4gIH07XG59XG5cbi8qKlxyXG4gKiBUaGlzIGNsYXNzIHJlcHJlc2VudHMgYSBiYXNpYyBjaGFubmVsLlxyXG4gKi9cbnZhciBDaGFubmVsID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gQ2hhbm5lbCgpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQ2hhbm5lbCk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoQ2hhbm5lbCwgW3tcbiAgICBrZXk6IFwibGlzdGVuRm9yV2hpc3BlclwiLFxuICAgIHZhbHVlOlxuICAgIC8qKlxyXG4gICAgICogTGlzdGVuIGZvciBhIHdoaXNwZXIgZXZlbnQgb24gdGhlIGNoYW5uZWwgaW5zdGFuY2UuXHJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsaXN0ZW5Gb3JXaGlzcGVyKGV2ZW50LCBjYWxsYmFjaykge1xuICAgICAgcmV0dXJuIHRoaXMubGlzdGVuKCcuY2xpZW50LScgKyBldmVudCwgY2FsbGJhY2spO1xuICAgIH1cbiAgICAvKipcclxuICAgICAqIExpc3RlbiBmb3IgYW4gZXZlbnQgb24gdGhlIGNoYW5uZWwgaW5zdGFuY2UuXHJcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcIm5vdGlmaWNhdGlvblwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBub3RpZmljYXRpb24oY2FsbGJhY2spIHtcbiAgICAgIHJldHVybiB0aGlzLmxpc3RlbignLklsbHVtaW5hdGVcXFxcTm90aWZpY2F0aW9uc1xcXFxFdmVudHNcXFxcQnJvYWRjYXN0Tm90aWZpY2F0aW9uQ3JlYXRlZCcsIGNhbGxiYWNrKTtcbiAgICB9XG4gICAgLyoqXHJcbiAgICAgKiBTdG9wIGxpc3RlbmluZyBmb3IgYSB3aGlzcGVyIGV2ZW50IG9uIHRoZSBjaGFubmVsIGluc3RhbmNlLlxyXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJzdG9wTGlzdGVuaW5nRm9yV2hpc3BlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzdG9wTGlzdGVuaW5nRm9yV2hpc3BlcihldmVudCwgY2FsbGJhY2spIHtcbiAgICAgIHJldHVybiB0aGlzLnN0b3BMaXN0ZW5pbmcoJy5jbGllbnQtJyArIGV2ZW50LCBjYWxsYmFjayk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIENoYW5uZWw7XG59KCk7XG5cbi8qKlxyXG4gKiBFdmVudCBuYW1lIGZvcm1hdHRlclxyXG4gKi9cbnZhciBFdmVudEZvcm1hdHRlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIC8qKlxyXG4gICAqIENyZWF0ZSBhIG5ldyBjbGFzcyBpbnN0YW5jZS5cclxuICAgKi9cbiAgZnVuY3Rpb24gRXZlbnRGb3JtYXR0ZXIobmFtZXNwYWNlKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEV2ZW50Rm9ybWF0dGVyKTtcblxuICAgIHRoaXMubmFtZXNwYWNlID0gbmFtZXNwYWNlOyAvL1xuICB9XG4gIC8qKlxyXG4gICAqIEZvcm1hdCB0aGUgZ2l2ZW4gZXZlbnQgbmFtZS5cclxuICAgKi9cblxuXG4gIF9jcmVhdGVDbGFzcyhFdmVudEZvcm1hdHRlciwgW3tcbiAgICBrZXk6IFwiZm9ybWF0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGZvcm1hdChldmVudCkge1xuICAgICAgaWYgKGV2ZW50LmNoYXJBdCgwKSA9PT0gJy4nIHx8IGV2ZW50LmNoYXJBdCgwKSA9PT0gJ1xcXFwnKSB7XG4gICAgICAgIHJldHVybiBldmVudC5zdWJzdHIoMSk7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMubmFtZXNwYWNlKSB7XG4gICAgICAgIGV2ZW50ID0gdGhpcy5uYW1lc3BhY2UgKyAnLicgKyBldmVudDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGV2ZW50LnJlcGxhY2UoL1xcLi9nLCAnXFxcXCcpO1xuICAgIH1cbiAgICAvKipcclxuICAgICAqIFNldCB0aGUgZXZlbnQgbmFtZXNwYWNlLlxyXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJzZXROYW1lc3BhY2VcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0TmFtZXNwYWNlKHZhbHVlKSB7XG4gICAgICB0aGlzLm5hbWVzcGFjZSA9IHZhbHVlO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBFdmVudEZvcm1hdHRlcjtcbn0oKTtcblxuLyoqXHJcbiAqIFRoaXMgY2xhc3MgcmVwcmVzZW50cyBhIFB1c2hlciBjaGFubmVsLlxyXG4gKi9cblxudmFyIFB1c2hlckNoYW5uZWwgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9DaGFubmVsKSB7XG4gIF9pbmhlcml0cyhQdXNoZXJDaGFubmVsLCBfQ2hhbm5lbCk7XG5cbiAgdmFyIF9zdXBlciA9IF9jcmVhdGVTdXBlcihQdXNoZXJDaGFubmVsKTtcblxuICAvKipcclxuICAgKiBDcmVhdGUgYSBuZXcgY2xhc3MgaW5zdGFuY2UuXHJcbiAgICovXG4gIGZ1bmN0aW9uIFB1c2hlckNoYW5uZWwocHVzaGVyLCBuYW1lLCBvcHRpb25zKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFB1c2hlckNoYW5uZWwpO1xuXG4gICAgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKTtcbiAgICBfdGhpcy5uYW1lID0gbmFtZTtcbiAgICBfdGhpcy5wdXNoZXIgPSBwdXNoZXI7XG4gICAgX3RoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgX3RoaXMuZXZlbnRGb3JtYXR0ZXIgPSBuZXcgRXZlbnRGb3JtYXR0ZXIoX3RoaXMub3B0aW9ucy5uYW1lc3BhY2UpO1xuXG4gICAgX3RoaXMuc3Vic2NyaWJlKCk7XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cbiAgLyoqXHJcbiAgICogU3Vic2NyaWJlIHRvIGEgUHVzaGVyIGNoYW5uZWwuXHJcbiAgICovXG5cblxuICBfY3JlYXRlQ2xhc3MoUHVzaGVyQ2hhbm5lbCwgW3tcbiAgICBrZXk6IFwic3Vic2NyaWJlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHN1YnNjcmliZSgpIHtcbiAgICAgIHRoaXMuc3Vic2NyaXB0aW9uID0gdGhpcy5wdXNoZXIuc3Vic2NyaWJlKHRoaXMubmFtZSk7XG4gICAgfVxuICAgIC8qKlxyXG4gICAgICogVW5zdWJzY3JpYmUgZnJvbSBhIFB1c2hlciBjaGFubmVsLlxyXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJ1bnN1YnNjcmliZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB1bnN1YnNjcmliZSgpIHtcbiAgICAgIHRoaXMucHVzaGVyLnVuc3Vic2NyaWJlKHRoaXMubmFtZSk7XG4gICAgfVxuICAgIC8qKlxyXG4gICAgICogTGlzdGVuIGZvciBhbiBldmVudCBvbiB0aGUgY2hhbm5lbCBpbnN0YW5jZS5cclxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwibGlzdGVuXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGxpc3RlbihldmVudCwgY2FsbGJhY2spIHtcbiAgICAgIHRoaXMub24odGhpcy5ldmVudEZvcm1hdHRlci5mb3JtYXQoZXZlbnQpLCBjYWxsYmFjayk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXHJcbiAgICAgKiBMaXN0ZW4gZm9yIGFsbCBldmVudHMgb24gdGhlIGNoYW5uZWwgaW5zdGFuY2UuXHJcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImxpc3RlblRvQWxsXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGxpc3RlblRvQWxsKGNhbGxiYWNrKSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgdGhpcy5zdWJzY3JpcHRpb24uYmluZF9nbG9iYWwoZnVuY3Rpb24gKGV2ZW50LCBkYXRhKSB7XG4gICAgICAgIGlmIChldmVudC5zdGFydHNXaXRoKCdwdXNoZXI6JykpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgbmFtZXNwYWNlID0gX3RoaXMyLm9wdGlvbnMubmFtZXNwYWNlLnJlcGxhY2UoL1xcLi9nLCAnXFxcXCcpO1xuXG4gICAgICAgIHZhciBmb3JtYXR0ZWRFdmVudCA9IGV2ZW50LnN0YXJ0c1dpdGgobmFtZXNwYWNlKSA/IGV2ZW50LnN1YnN0cmluZyhuYW1lc3BhY2UubGVuZ3RoICsgMSkgOiAnLicgKyBldmVudDtcbiAgICAgICAgY2FsbGJhY2soZm9ybWF0dGVkRXZlbnQsIGRhdGEpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXHJcbiAgICAgKiBTdG9wIGxpc3RlbmluZyBmb3IgYW4gZXZlbnQgb24gdGhlIGNoYW5uZWwgaW5zdGFuY2UuXHJcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcInN0b3BMaXN0ZW5pbmdcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc3RvcExpc3RlbmluZyhldmVudCwgY2FsbGJhY2spIHtcbiAgICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgICB0aGlzLnN1YnNjcmlwdGlvbi51bmJpbmQodGhpcy5ldmVudEZvcm1hdHRlci5mb3JtYXQoZXZlbnQpLCBjYWxsYmFjayk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnN1YnNjcmlwdGlvbi51bmJpbmQodGhpcy5ldmVudEZvcm1hdHRlci5mb3JtYXQoZXZlbnQpKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxyXG4gICAgICogU3RvcCBsaXN0ZW5pbmcgZm9yIGFsbCBldmVudHMgb24gdGhlIGNoYW5uZWwgaW5zdGFuY2UuXHJcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcInN0b3BMaXN0ZW5pbmdUb0FsbFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzdG9wTGlzdGVuaW5nVG9BbGwoY2FsbGJhY2spIHtcbiAgICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgICB0aGlzLnN1YnNjcmlwdGlvbi51bmJpbmRfZ2xvYmFsKGNhbGxiYWNrKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuc3Vic2NyaXB0aW9uLnVuYmluZF9nbG9iYWwoKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxyXG4gICAgICogUmVnaXN0ZXIgYSBjYWxsYmFjayB0byBiZSBjYWxsZWQgYW55dGltZSBhIHN1YnNjcmlwdGlvbiBzdWNjZWVkcy5cclxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwic3Vic2NyaWJlZFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzdWJzY3JpYmVkKGNhbGxiYWNrKSB7XG4gICAgICB0aGlzLm9uKCdwdXNoZXI6c3Vic2NyaXB0aW9uX3N1Y2NlZWRlZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxyXG4gICAgICogUmVnaXN0ZXIgYSBjYWxsYmFjayB0byBiZSBjYWxsZWQgYW55dGltZSBhIHN1YnNjcmlwdGlvbiBlcnJvciBvY2N1cnMuXHJcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImVycm9yXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGVycm9yKGNhbGxiYWNrKSB7XG4gICAgICB0aGlzLm9uKCdwdXNoZXI6c3Vic2NyaXB0aW9uX2Vycm9yJywgZnVuY3Rpb24gKHN0YXR1cykge1xuICAgICAgICBjYWxsYmFjayhzdGF0dXMpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXHJcbiAgICAgKiBCaW5kIGEgY2hhbm5lbCB0byBhbiBldmVudC5cclxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwib25cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gb24oZXZlbnQsIGNhbGxiYWNrKSB7XG4gICAgICB0aGlzLnN1YnNjcmlwdGlvbi5iaW5kKGV2ZW50LCBjYWxsYmFjayk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gUHVzaGVyQ2hhbm5lbDtcbn0oQ2hhbm5lbCk7XG5cbi8qKlxyXG4gKiBUaGlzIGNsYXNzIHJlcHJlc2VudHMgYSBQdXNoZXIgcHJpdmF0ZSBjaGFubmVsLlxyXG4gKi9cblxudmFyIFB1c2hlclByaXZhdGVDaGFubmVsID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfUHVzaGVyQ2hhbm5lbCkge1xuICBfaW5oZXJpdHMoUHVzaGVyUHJpdmF0ZUNoYW5uZWwsIF9QdXNoZXJDaGFubmVsKTtcblxuICB2YXIgX3N1cGVyID0gX2NyZWF0ZVN1cGVyKFB1c2hlclByaXZhdGVDaGFubmVsKTtcblxuICBmdW5jdGlvbiBQdXNoZXJQcml2YXRlQ2hhbm5lbCgpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUHVzaGVyUHJpdmF0ZUNoYW5uZWwpO1xuXG4gICAgcmV0dXJuIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFB1c2hlclByaXZhdGVDaGFubmVsLCBbe1xuICAgIGtleTogXCJ3aGlzcGVyXCIsXG4gICAgdmFsdWU6XG4gICAgLyoqXHJcbiAgICAgKiBTZW5kIGEgd2hpc3BlciBldmVudCB0byBvdGhlciBjbGllbnRzIGluIHRoZSBjaGFubmVsLlxyXG4gICAgICovXG4gICAgZnVuY3Rpb24gd2hpc3BlcihldmVudE5hbWUsIGRhdGEpIHtcbiAgICAgIHRoaXMucHVzaGVyLmNoYW5uZWxzLmNoYW5uZWxzW3RoaXMubmFtZV0udHJpZ2dlcihcImNsaWVudC1cIi5jb25jYXQoZXZlbnROYW1lKSwgZGF0YSk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gUHVzaGVyUHJpdmF0ZUNoYW5uZWw7XG59KFB1c2hlckNoYW5uZWwpO1xuXG4vKipcclxuICogVGhpcyBjbGFzcyByZXByZXNlbnRzIGEgUHVzaGVyIHByaXZhdGUgY2hhbm5lbC5cclxuICovXG5cbnZhciBQdXNoZXJFbmNyeXB0ZWRQcml2YXRlQ2hhbm5lbCA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX1B1c2hlckNoYW5uZWwpIHtcbiAgX2luaGVyaXRzKFB1c2hlckVuY3J5cHRlZFByaXZhdGVDaGFubmVsLCBfUHVzaGVyQ2hhbm5lbCk7XG5cbiAgdmFyIF9zdXBlciA9IF9jcmVhdGVTdXBlcihQdXNoZXJFbmNyeXB0ZWRQcml2YXRlQ2hhbm5lbCk7XG5cbiAgZnVuY3Rpb24gUHVzaGVyRW5jcnlwdGVkUHJpdmF0ZUNoYW5uZWwoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFB1c2hlckVuY3J5cHRlZFByaXZhdGVDaGFubmVsKTtcblxuICAgIHJldHVybiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhQdXNoZXJFbmNyeXB0ZWRQcml2YXRlQ2hhbm5lbCwgW3tcbiAgICBrZXk6IFwid2hpc3BlclwiLFxuICAgIHZhbHVlOlxuICAgIC8qKlxyXG4gICAgICogU2VuZCBhIHdoaXNwZXIgZXZlbnQgdG8gb3RoZXIgY2xpZW50cyBpbiB0aGUgY2hhbm5lbC5cclxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHdoaXNwZXIoZXZlbnROYW1lLCBkYXRhKSB7XG4gICAgICB0aGlzLnB1c2hlci5jaGFubmVscy5jaGFubmVsc1t0aGlzLm5hbWVdLnRyaWdnZXIoXCJjbGllbnQtXCIuY29uY2F0KGV2ZW50TmFtZSksIGRhdGEpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFB1c2hlckVuY3J5cHRlZFByaXZhdGVDaGFubmVsO1xufShQdXNoZXJDaGFubmVsKTtcblxuLyoqXHJcbiAqIFRoaXMgY2xhc3MgcmVwcmVzZW50cyBhIFB1c2hlciBwcmVzZW5jZSBjaGFubmVsLlxyXG4gKi9cblxudmFyIFB1c2hlclByZXNlbmNlQ2hhbm5lbCA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX1B1c2hlckNoYW5uZWwpIHtcbiAgX2luaGVyaXRzKFB1c2hlclByZXNlbmNlQ2hhbm5lbCwgX1B1c2hlckNoYW5uZWwpO1xuXG4gIHZhciBfc3VwZXIgPSBfY3JlYXRlU3VwZXIoUHVzaGVyUHJlc2VuY2VDaGFubmVsKTtcblxuICBmdW5jdGlvbiBQdXNoZXJQcmVzZW5jZUNoYW5uZWwoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFB1c2hlclByZXNlbmNlQ2hhbm5lbCk7XG5cbiAgICByZXR1cm4gX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoUHVzaGVyUHJlc2VuY2VDaGFubmVsLCBbe1xuICAgIGtleTogXCJoZXJlXCIsXG4gICAgdmFsdWU6XG4gICAgLyoqXHJcbiAgICAgKiBSZWdpc3RlciBhIGNhbGxiYWNrIHRvIGJlIGNhbGxlZCBhbnl0aW1lIHRoZSBtZW1iZXIgbGlzdCBjaGFuZ2VzLlxyXG4gICAgICovXG4gICAgZnVuY3Rpb24gaGVyZShjYWxsYmFjaykge1xuICAgICAgdGhpcy5vbigncHVzaGVyOnN1YnNjcmlwdGlvbl9zdWNjZWVkZWQnLCBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICBjYWxsYmFjayhPYmplY3Qua2V5cyhkYXRhLm1lbWJlcnMpLm1hcChmdW5jdGlvbiAoaykge1xuICAgICAgICAgIHJldHVybiBkYXRhLm1lbWJlcnNba107XG4gICAgICAgIH0pKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxyXG4gICAgICogTGlzdGVuIGZvciBzb21lb25lIGpvaW5pbmcgdGhlIGNoYW5uZWwuXHJcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImpvaW5pbmdcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gam9pbmluZyhjYWxsYmFjaykge1xuICAgICAgdGhpcy5vbigncHVzaGVyOm1lbWJlcl9hZGRlZCcsIGZ1bmN0aW9uIChtZW1iZXIpIHtcbiAgICAgICAgY2FsbGJhY2sobWVtYmVyLmluZm8pO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXHJcbiAgICAgKiBTZW5kIGEgd2hpc3BlciBldmVudCB0byBvdGhlciBjbGllbnRzIGluIHRoZSBjaGFubmVsLlxyXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJ3aGlzcGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHdoaXNwZXIoZXZlbnROYW1lLCBkYXRhKSB7XG4gICAgICB0aGlzLnB1c2hlci5jaGFubmVscy5jaGFubmVsc1t0aGlzLm5hbWVdLnRyaWdnZXIoXCJjbGllbnQtXCIuY29uY2F0KGV2ZW50TmFtZSksIGRhdGEpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxyXG4gICAgICogTGlzdGVuIGZvciBzb21lb25lIGxlYXZpbmcgdGhlIGNoYW5uZWwuXHJcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImxlYXZpbmdcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gbGVhdmluZyhjYWxsYmFjaykge1xuICAgICAgdGhpcy5vbigncHVzaGVyOm1lbWJlcl9yZW1vdmVkJywgZnVuY3Rpb24gKG1lbWJlcikge1xuICAgICAgICBjYWxsYmFjayhtZW1iZXIuaW5mbyk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBQdXNoZXJQcmVzZW5jZUNoYW5uZWw7XG59KFB1c2hlckNoYW5uZWwpO1xuXG4vKipcclxuICogVGhpcyBjbGFzcyByZXByZXNlbnRzIGEgU29ja2V0LmlvIGNoYW5uZWwuXHJcbiAqL1xuXG52YXIgU29ja2V0SW9DaGFubmVsID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQ2hhbm5lbCkge1xuICBfaW5oZXJpdHMoU29ja2V0SW9DaGFubmVsLCBfQ2hhbm5lbCk7XG5cbiAgdmFyIF9zdXBlciA9IF9jcmVhdGVTdXBlcihTb2NrZXRJb0NoYW5uZWwpO1xuXG4gIC8qKlxyXG4gICAqIENyZWF0ZSBhIG5ldyBjbGFzcyBpbnN0YW5jZS5cclxuICAgKi9cbiAgZnVuY3Rpb24gU29ja2V0SW9DaGFubmVsKHNvY2tldCwgbmFtZSwgb3B0aW9ucykge1xuICAgIHZhciBfdGhpcztcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTb2NrZXRJb0NoYW5uZWwpO1xuXG4gICAgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKTtcbiAgICAvKipcclxuICAgICAqIFRoZSBldmVudCBjYWxsYmFja3MgYXBwbGllZCB0byB0aGUgc29ja2V0LlxyXG4gICAgICovXG5cbiAgICBfdGhpcy5ldmVudHMgPSB7fTtcbiAgICAvKipcclxuICAgICAqIFVzZXIgc3VwcGxpZWQgY2FsbGJhY2tzIGZvciBldmVudHMgb24gdGhpcyBjaGFubmVsLlxyXG4gICAgICovXG5cbiAgICBfdGhpcy5saXN0ZW5lcnMgPSB7fTtcbiAgICBfdGhpcy5uYW1lID0gbmFtZTtcbiAgICBfdGhpcy5zb2NrZXQgPSBzb2NrZXQ7XG4gICAgX3RoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgX3RoaXMuZXZlbnRGb3JtYXR0ZXIgPSBuZXcgRXZlbnRGb3JtYXR0ZXIoX3RoaXMub3B0aW9ucy5uYW1lc3BhY2UpO1xuXG4gICAgX3RoaXMuc3Vic2NyaWJlKCk7XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cbiAgLyoqXHJcbiAgICogU3Vic2NyaWJlIHRvIGEgU29ja2V0LmlvIGNoYW5uZWwuXHJcbiAgICovXG5cblxuICBfY3JlYXRlQ2xhc3MoU29ja2V0SW9DaGFubmVsLCBbe1xuICAgIGtleTogXCJzdWJzY3JpYmVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc3Vic2NyaWJlKCkge1xuICAgICAgdGhpcy5zb2NrZXQuZW1pdCgnc3Vic2NyaWJlJywge1xuICAgICAgICBjaGFubmVsOiB0aGlzLm5hbWUsXG4gICAgICAgIGF1dGg6IHRoaXMub3B0aW9ucy5hdXRoIHx8IHt9XG4gICAgICB9KTtcbiAgICB9XG4gICAgLyoqXHJcbiAgICAgKiBVbnN1YnNjcmliZSBmcm9tIGNoYW5uZWwgYW5kIHViaW5kIGV2ZW50IGNhbGxiYWNrcy5cclxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwidW5zdWJzY3JpYmVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gdW5zdWJzY3JpYmUoKSB7XG4gICAgICB0aGlzLnVuYmluZCgpO1xuICAgICAgdGhpcy5zb2NrZXQuZW1pdCgndW5zdWJzY3JpYmUnLCB7XG4gICAgICAgIGNoYW5uZWw6IHRoaXMubmFtZSxcbiAgICAgICAgYXV0aDogdGhpcy5vcHRpb25zLmF1dGggfHwge31cbiAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcclxuICAgICAqIExpc3RlbiBmb3IgYW4gZXZlbnQgb24gdGhlIGNoYW5uZWwgaW5zdGFuY2UuXHJcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImxpc3RlblwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBsaXN0ZW4oZXZlbnQsIGNhbGxiYWNrKSB7XG4gICAgICB0aGlzLm9uKHRoaXMuZXZlbnRGb3JtYXR0ZXIuZm9ybWF0KGV2ZW50KSwgY2FsbGJhY2spO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxyXG4gICAgICogU3RvcCBsaXN0ZW5pbmcgZm9yIGFuIGV2ZW50IG9uIHRoZSBjaGFubmVsIGluc3RhbmNlLlxyXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJzdG9wTGlzdGVuaW5nXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHN0b3BMaXN0ZW5pbmcoZXZlbnQsIGNhbGxiYWNrKSB7XG4gICAgICB0aGlzLnVuYmluZEV2ZW50KHRoaXMuZXZlbnRGb3JtYXR0ZXIuZm9ybWF0KGV2ZW50KSwgY2FsbGJhY2spO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxyXG4gICAgICogUmVnaXN0ZXIgYSBjYWxsYmFjayB0byBiZSBjYWxsZWQgYW55dGltZSBhIHN1YnNjcmlwdGlvbiBzdWNjZWVkcy5cclxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwic3Vic2NyaWJlZFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzdWJzY3JpYmVkKGNhbGxiYWNrKSB7XG4gICAgICB0aGlzLm9uKCdjb25uZWN0JywgZnVuY3Rpb24gKHNvY2tldCkge1xuICAgICAgICBjYWxsYmFjayhzb2NrZXQpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXHJcbiAgICAgKiBSZWdpc3RlciBhIGNhbGxiYWNrIHRvIGJlIGNhbGxlZCBhbnl0aW1lIGFuIGVycm9yIG9jY3Vycy5cclxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiZXJyb3JcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZXJyb3IoY2FsbGJhY2spIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcclxuICAgICAqIEJpbmQgdGhlIGNoYW5uZWwncyBzb2NrZXQgdG8gYW4gZXZlbnQgYW5kIHN0b3JlIHRoZSBjYWxsYmFjay5cclxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwib25cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gb24oZXZlbnQsIGNhbGxiYWNrKSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgdGhpcy5saXN0ZW5lcnNbZXZlbnRdID0gdGhpcy5saXN0ZW5lcnNbZXZlbnRdIHx8IFtdO1xuXG4gICAgICBpZiAoIXRoaXMuZXZlbnRzW2V2ZW50XSkge1xuICAgICAgICB0aGlzLmV2ZW50c1tldmVudF0gPSBmdW5jdGlvbiAoY2hhbm5lbCwgZGF0YSkge1xuICAgICAgICAgIGlmIChfdGhpczIubmFtZSA9PT0gY2hhbm5lbCAmJiBfdGhpczIubGlzdGVuZXJzW2V2ZW50XSkge1xuICAgICAgICAgICAgX3RoaXMyLmxpc3RlbmVyc1tldmVudF0uZm9yRWFjaChmdW5jdGlvbiAoY2IpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGNiKGRhdGEpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMuc29ja2V0Lm9uKGV2ZW50LCB0aGlzLmV2ZW50c1tldmVudF0pO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmxpc3RlbmVyc1tldmVudF0ucHVzaChjYWxsYmFjayk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXHJcbiAgICAgKiBVbmJpbmQgdGhlIGNoYW5uZWwncyBzb2NrZXQgZnJvbSBhbGwgc3RvcmVkIGV2ZW50IGNhbGxiYWNrcy5cclxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwidW5iaW5kXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHVuYmluZCgpIHtcbiAgICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgICBPYmplY3Qua2V5cyh0aGlzLmV2ZW50cykuZm9yRWFjaChmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgX3RoaXMzLnVuYmluZEV2ZW50KGV2ZW50KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcclxuICAgICAqIFVuYmluZCB0aGUgbGlzdGVuZXJzIGZvciB0aGUgZ2l2ZW4gZXZlbnQuXHJcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcInVuYmluZEV2ZW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHVuYmluZEV2ZW50KGV2ZW50LCBjYWxsYmFjaykge1xuICAgICAgdGhpcy5saXN0ZW5lcnNbZXZlbnRdID0gdGhpcy5saXN0ZW5lcnNbZXZlbnRdIHx8IFtdO1xuXG4gICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgdGhpcy5saXN0ZW5lcnNbZXZlbnRdID0gdGhpcy5saXN0ZW5lcnNbZXZlbnRdLmZpbHRlcihmdW5jdGlvbiAoY2IpIHtcbiAgICAgICAgICByZXR1cm4gY2IgIT09IGNhbGxiYWNrO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFjYWxsYmFjayB8fCB0aGlzLmxpc3RlbmVyc1tldmVudF0ubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIGlmICh0aGlzLmV2ZW50c1tldmVudF0pIHtcbiAgICAgICAgICB0aGlzLnNvY2tldC5yZW1vdmVMaXN0ZW5lcihldmVudCwgdGhpcy5ldmVudHNbZXZlbnRdKTtcbiAgICAgICAgICBkZWxldGUgdGhpcy5ldmVudHNbZXZlbnRdO1xuICAgICAgICB9XG5cbiAgICAgICAgZGVsZXRlIHRoaXMubGlzdGVuZXJzW2V2ZW50XTtcbiAgICAgIH1cbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gU29ja2V0SW9DaGFubmVsO1xufShDaGFubmVsKTtcblxuLyoqXHJcbiAqIFRoaXMgY2xhc3MgcmVwcmVzZW50cyBhIFNvY2tldC5pbyBwcml2YXRlIGNoYW5uZWwuXHJcbiAqL1xuXG52YXIgU29ja2V0SW9Qcml2YXRlQ2hhbm5lbCA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX1NvY2tldElvQ2hhbm5lbCkge1xuICBfaW5oZXJpdHMoU29ja2V0SW9Qcml2YXRlQ2hhbm5lbCwgX1NvY2tldElvQ2hhbm5lbCk7XG5cbiAgdmFyIF9zdXBlciA9IF9jcmVhdGVTdXBlcihTb2NrZXRJb1ByaXZhdGVDaGFubmVsKTtcblxuICBmdW5jdGlvbiBTb2NrZXRJb1ByaXZhdGVDaGFubmVsKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTb2NrZXRJb1ByaXZhdGVDaGFubmVsKTtcblxuICAgIHJldHVybiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhTb2NrZXRJb1ByaXZhdGVDaGFubmVsLCBbe1xuICAgIGtleTogXCJ3aGlzcGVyXCIsXG4gICAgdmFsdWU6XG4gICAgLyoqXHJcbiAgICAgKiBTZW5kIGEgd2hpc3BlciBldmVudCB0byBvdGhlciBjbGllbnRzIGluIHRoZSBjaGFubmVsLlxyXG4gICAgICovXG4gICAgZnVuY3Rpb24gd2hpc3BlcihldmVudE5hbWUsIGRhdGEpIHtcbiAgICAgIHRoaXMuc29ja2V0LmVtaXQoJ2NsaWVudCBldmVudCcsIHtcbiAgICAgICAgY2hhbm5lbDogdGhpcy5uYW1lLFxuICAgICAgICBldmVudDogXCJjbGllbnQtXCIuY29uY2F0KGV2ZW50TmFtZSksXG4gICAgICAgIGRhdGE6IGRhdGFcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFNvY2tldElvUHJpdmF0ZUNoYW5uZWw7XG59KFNvY2tldElvQ2hhbm5lbCk7XG5cbi8qKlxyXG4gKiBUaGlzIGNsYXNzIHJlcHJlc2VudHMgYSBTb2NrZXQuaW8gcHJlc2VuY2UgY2hhbm5lbC5cclxuICovXG5cbnZhciBTb2NrZXRJb1ByZXNlbmNlQ2hhbm5lbCA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX1NvY2tldElvUHJpdmF0ZUNoYW5uKSB7XG4gIF9pbmhlcml0cyhTb2NrZXRJb1ByZXNlbmNlQ2hhbm5lbCwgX1NvY2tldElvUHJpdmF0ZUNoYW5uKTtcblxuICB2YXIgX3N1cGVyID0gX2NyZWF0ZVN1cGVyKFNvY2tldElvUHJlc2VuY2VDaGFubmVsKTtcblxuICBmdW5jdGlvbiBTb2NrZXRJb1ByZXNlbmNlQ2hhbm5lbCgpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU29ja2V0SW9QcmVzZW5jZUNoYW5uZWwpO1xuXG4gICAgcmV0dXJuIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFNvY2tldElvUHJlc2VuY2VDaGFubmVsLCBbe1xuICAgIGtleTogXCJoZXJlXCIsXG4gICAgdmFsdWU6XG4gICAgLyoqXHJcbiAgICAgKiBSZWdpc3RlciBhIGNhbGxiYWNrIHRvIGJlIGNhbGxlZCBhbnl0aW1lIHRoZSBtZW1iZXIgbGlzdCBjaGFuZ2VzLlxyXG4gICAgICovXG4gICAgZnVuY3Rpb24gaGVyZShjYWxsYmFjaykge1xuICAgICAgdGhpcy5vbigncHJlc2VuY2U6c3Vic2NyaWJlZCcsIGZ1bmN0aW9uIChtZW1iZXJzKSB7XG4gICAgICAgIGNhbGxiYWNrKG1lbWJlcnMubWFwKGZ1bmN0aW9uIChtKSB7XG4gICAgICAgICAgcmV0dXJuIG0udXNlcl9pbmZvO1xuICAgICAgICB9KSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcclxuICAgICAqIExpc3RlbiBmb3Igc29tZW9uZSBqb2luaW5nIHRoZSBjaGFubmVsLlxyXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJqb2luaW5nXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGpvaW5pbmcoY2FsbGJhY2spIHtcbiAgICAgIHRoaXMub24oJ3ByZXNlbmNlOmpvaW5pbmcnLCBmdW5jdGlvbiAobWVtYmVyKSB7XG4gICAgICAgIHJldHVybiBjYWxsYmFjayhtZW1iZXIudXNlcl9pbmZvKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxyXG4gICAgICogU2VuZCBhIHdoaXNwZXIgZXZlbnQgdG8gb3RoZXIgY2xpZW50cyBpbiB0aGUgY2hhbm5lbC5cclxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwid2hpc3BlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB3aGlzcGVyKGV2ZW50TmFtZSwgZGF0YSkge1xuICAgICAgdGhpcy5zb2NrZXQuZW1pdCgnY2xpZW50IGV2ZW50Jywge1xuICAgICAgICBjaGFubmVsOiB0aGlzLm5hbWUsXG4gICAgICAgIGV2ZW50OiBcImNsaWVudC1cIi5jb25jYXQoZXZlbnROYW1lKSxcbiAgICAgICAgZGF0YTogZGF0YVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXHJcbiAgICAgKiBMaXN0ZW4gZm9yIHNvbWVvbmUgbGVhdmluZyB0aGUgY2hhbm5lbC5cclxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwibGVhdmluZ1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBsZWF2aW5nKGNhbGxiYWNrKSB7XG4gICAgICB0aGlzLm9uKCdwcmVzZW5jZTpsZWF2aW5nJywgZnVuY3Rpb24gKG1lbWJlcikge1xuICAgICAgICByZXR1cm4gY2FsbGJhY2sobWVtYmVyLnVzZXJfaW5mbyk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBTb2NrZXRJb1ByZXNlbmNlQ2hhbm5lbDtcbn0oU29ja2V0SW9Qcml2YXRlQ2hhbm5lbCk7XG5cbi8qKlxyXG4gKiBUaGlzIGNsYXNzIHJlcHJlc2VudHMgYSBudWxsIGNoYW5uZWwuXHJcbiAqL1xuXG52YXIgTnVsbENoYW5uZWwgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9DaGFubmVsKSB7XG4gIF9pbmhlcml0cyhOdWxsQ2hhbm5lbCwgX0NoYW5uZWwpO1xuXG4gIHZhciBfc3VwZXIgPSBfY3JlYXRlU3VwZXIoTnVsbENoYW5uZWwpO1xuXG4gIGZ1bmN0aW9uIE51bGxDaGFubmVsKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBOdWxsQ2hhbm5lbCk7XG5cbiAgICByZXR1cm4gX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoTnVsbENoYW5uZWwsIFt7XG4gICAga2V5OiBcInN1YnNjcmliZVwiLFxuICAgIHZhbHVlOlxuICAgIC8qKlxyXG4gICAgICogU3Vic2NyaWJlIHRvIGEgY2hhbm5lbC5cclxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN1YnNjcmliZSgpIHsvL1xuICAgIH1cbiAgICAvKipcclxuICAgICAqIFVuc3Vic2NyaWJlIGZyb20gYSBjaGFubmVsLlxyXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJ1bnN1YnNjcmliZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB1bnN1YnNjcmliZSgpIHsvL1xuICAgIH1cbiAgICAvKipcclxuICAgICAqIExpc3RlbiBmb3IgYW4gZXZlbnQgb24gdGhlIGNoYW5uZWwgaW5zdGFuY2UuXHJcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImxpc3RlblwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBsaXN0ZW4oZXZlbnQsIGNhbGxiYWNrKSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXHJcbiAgICAgKiBMaXN0ZW4gZm9yIGFsbCBldmVudHMgb24gdGhlIGNoYW5uZWwgaW5zdGFuY2UuXHJcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImxpc3RlblRvQWxsXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGxpc3RlblRvQWxsKGNhbGxiYWNrKSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXHJcbiAgICAgKiBTdG9wIGxpc3RlbmluZyBmb3IgYW4gZXZlbnQgb24gdGhlIGNoYW5uZWwgaW5zdGFuY2UuXHJcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcInN0b3BMaXN0ZW5pbmdcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc3RvcExpc3RlbmluZyhldmVudCwgY2FsbGJhY2spIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcclxuICAgICAqIFJlZ2lzdGVyIGEgY2FsbGJhY2sgdG8gYmUgY2FsbGVkIGFueXRpbWUgYSBzdWJzY3JpcHRpb24gc3VjY2VlZHMuXHJcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcInN1YnNjcmliZWRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc3Vic2NyaWJlZChjYWxsYmFjaykge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxyXG4gICAgICogUmVnaXN0ZXIgYSBjYWxsYmFjayB0byBiZSBjYWxsZWQgYW55dGltZSBhbiBlcnJvciBvY2N1cnMuXHJcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImVycm9yXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGVycm9yKGNhbGxiYWNrKSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXHJcbiAgICAgKiBCaW5kIGEgY2hhbm5lbCB0byBhbiBldmVudC5cclxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwib25cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gb24oZXZlbnQsIGNhbGxiYWNrKSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gTnVsbENoYW5uZWw7XG59KENoYW5uZWwpO1xuXG4vKipcclxuICogVGhpcyBjbGFzcyByZXByZXNlbnRzIGEgbnVsbCBwcml2YXRlIGNoYW5uZWwuXHJcbiAqL1xuXG52YXIgTnVsbFByaXZhdGVDaGFubmVsID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfTnVsbENoYW5uZWwpIHtcbiAgX2luaGVyaXRzKE51bGxQcml2YXRlQ2hhbm5lbCwgX051bGxDaGFubmVsKTtcblxuICB2YXIgX3N1cGVyID0gX2NyZWF0ZVN1cGVyKE51bGxQcml2YXRlQ2hhbm5lbCk7XG5cbiAgZnVuY3Rpb24gTnVsbFByaXZhdGVDaGFubmVsKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBOdWxsUHJpdmF0ZUNoYW5uZWwpO1xuXG4gICAgcmV0dXJuIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKE51bGxQcml2YXRlQ2hhbm5lbCwgW3tcbiAgICBrZXk6IFwid2hpc3BlclwiLFxuICAgIHZhbHVlOlxuICAgIC8qKlxyXG4gICAgICogU2VuZCBhIHdoaXNwZXIgZXZlbnQgdG8gb3RoZXIgY2xpZW50cyBpbiB0aGUgY2hhbm5lbC5cclxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHdoaXNwZXIoZXZlbnROYW1lLCBkYXRhKSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gTnVsbFByaXZhdGVDaGFubmVsO1xufShOdWxsQ2hhbm5lbCk7XG5cbi8qKlxyXG4gKiBUaGlzIGNsYXNzIHJlcHJlc2VudHMgYSBudWxsIHByZXNlbmNlIGNoYW5uZWwuXHJcbiAqL1xuXG52YXIgTnVsbFByZXNlbmNlQ2hhbm5lbCA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX051bGxDaGFubmVsKSB7XG4gIF9pbmhlcml0cyhOdWxsUHJlc2VuY2VDaGFubmVsLCBfTnVsbENoYW5uZWwpO1xuXG4gIHZhciBfc3VwZXIgPSBfY3JlYXRlU3VwZXIoTnVsbFByZXNlbmNlQ2hhbm5lbCk7XG5cbiAgZnVuY3Rpb24gTnVsbFByZXNlbmNlQ2hhbm5lbCgpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTnVsbFByZXNlbmNlQ2hhbm5lbCk7XG5cbiAgICByZXR1cm4gX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoTnVsbFByZXNlbmNlQ2hhbm5lbCwgW3tcbiAgICBrZXk6IFwiaGVyZVwiLFxuICAgIHZhbHVlOlxuICAgIC8qKlxyXG4gICAgICogUmVnaXN0ZXIgYSBjYWxsYmFjayB0byBiZSBjYWxsZWQgYW55dGltZSB0aGUgbWVtYmVyIGxpc3QgY2hhbmdlcy5cclxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGhlcmUoY2FsbGJhY2spIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcclxuICAgICAqIExpc3RlbiBmb3Igc29tZW9uZSBqb2luaW5nIHRoZSBjaGFubmVsLlxyXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJqb2luaW5nXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGpvaW5pbmcoY2FsbGJhY2spIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcclxuICAgICAqIFNlbmQgYSB3aGlzcGVyIGV2ZW50IHRvIG90aGVyIGNsaWVudHMgaW4gdGhlIGNoYW5uZWwuXHJcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcIndoaXNwZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gd2hpc3BlcihldmVudE5hbWUsIGRhdGEpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcclxuICAgICAqIExpc3RlbiBmb3Igc29tZW9uZSBsZWF2aW5nIHRoZSBjaGFubmVsLlxyXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJsZWF2aW5nXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGxlYXZpbmcoY2FsbGJhY2spIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBOdWxsUHJlc2VuY2VDaGFubmVsO1xufShOdWxsQ2hhbm5lbCk7XG5cbnZhciBDb25uZWN0b3IgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICAvKipcclxuICAgKiBDcmVhdGUgYSBuZXcgY2xhc3MgaW5zdGFuY2UuXHJcbiAgICovXG4gIGZ1bmN0aW9uIENvbm5lY3RvcihvcHRpb25zKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIENvbm5lY3Rvcik7XG5cbiAgICAvKipcclxuICAgICAqIERlZmF1bHQgY29ubmVjdG9yIG9wdGlvbnMuXHJcbiAgICAgKi9cbiAgICB0aGlzLl9kZWZhdWx0T3B0aW9ucyA9IHtcbiAgICAgIGF1dGg6IHtcbiAgICAgICAgaGVhZGVyczoge31cbiAgICAgIH0sXG4gICAgICBhdXRoRW5kcG9pbnQ6ICcvYnJvYWRjYXN0aW5nL2F1dGgnLFxuICAgICAgdXNlckF1dGhlbnRpY2F0aW9uOiB7XG4gICAgICAgIGVuZHBvaW50OiAnL2Jyb2FkY2FzdGluZy91c2VyLWF1dGgnLFxuICAgICAgICBoZWFkZXJzOiB7fVxuICAgICAgfSxcbiAgICAgIGJyb2FkY2FzdGVyOiAncHVzaGVyJyxcbiAgICAgIGNzcmZUb2tlbjogbnVsbCxcbiAgICAgIGJlYXJlclRva2VuOiBudWxsLFxuICAgICAgaG9zdDogbnVsbCxcbiAgICAgIGtleTogbnVsbCxcbiAgICAgIG5hbWVzcGFjZTogJ0FwcC5FdmVudHMnXG4gICAgfTtcbiAgICB0aGlzLnNldE9wdGlvbnMob3B0aW9ucyk7XG4gICAgdGhpcy5jb25uZWN0KCk7XG4gIH1cbiAgLyoqXHJcbiAgICogTWVyZ2UgdGhlIGN1c3RvbSBvcHRpb25zIHdpdGggdGhlIGRlZmF1bHRzLlxyXG4gICAqL1xuXG5cbiAgX2NyZWF0ZUNsYXNzKENvbm5lY3RvciwgW3tcbiAgICBrZXk6IFwic2V0T3B0aW9uc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRPcHRpb25zKG9wdGlvbnMpIHtcbiAgICAgIHRoaXMub3B0aW9ucyA9IF9leHRlbmRzKHRoaXMuX2RlZmF1bHRPcHRpb25zLCBvcHRpb25zKTtcbiAgICAgIHZhciB0b2tlbiA9IHRoaXMuY3NyZlRva2VuKCk7XG5cbiAgICAgIGlmICh0b2tlbikge1xuICAgICAgICB0aGlzLm9wdGlvbnMuYXV0aC5oZWFkZXJzWydYLUNTUkYtVE9LRU4nXSA9IHRva2VuO1xuICAgICAgICB0aGlzLm9wdGlvbnMudXNlckF1dGhlbnRpY2F0aW9uLmhlYWRlcnNbJ1gtQ1NSRi1UT0tFTiddID0gdG9rZW47XG4gICAgICB9XG5cbiAgICAgIHRva2VuID0gdGhpcy5vcHRpb25zLmJlYXJlclRva2VuO1xuXG4gICAgICBpZiAodG9rZW4pIHtcbiAgICAgICAgdGhpcy5vcHRpb25zLmF1dGguaGVhZGVyc1snQXV0aG9yaXphdGlvbiddID0gJ0JlYXJlciAnICsgdG9rZW47XG4gICAgICAgIHRoaXMub3B0aW9ucy51c2VyQXV0aGVudGljYXRpb24uaGVhZGVyc1snQXV0aG9yaXphdGlvbiddID0gJ0JlYXJlciAnICsgdG9rZW47XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBvcHRpb25zO1xuICAgIH1cbiAgICAvKipcclxuICAgICAqIEV4dHJhY3QgdGhlIENTUkYgdG9rZW4gZnJvbSB0aGUgcGFnZS5cclxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiY3NyZlRva2VuXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNzcmZUb2tlbigpIHtcbiAgICAgIHZhciBzZWxlY3RvcjtcblxuICAgICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvd1snTGFyYXZlbCddICYmIHdpbmRvd1snTGFyYXZlbCddLmNzcmZUb2tlbikge1xuICAgICAgICByZXR1cm4gd2luZG93WydMYXJhdmVsJ10uY3NyZlRva2VuO1xuICAgICAgfSBlbHNlIGlmICh0aGlzLm9wdGlvbnMuY3NyZlRva2VuKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm9wdGlvbnMuY3NyZlRva2VuO1xuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yID09PSAnZnVuY3Rpb24nICYmIChzZWxlY3RvciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ21ldGFbbmFtZT1cImNzcmYtdG9rZW5cIl0nKSkpIHtcbiAgICAgICAgcmV0dXJuIHNlbGVjdG9yLmdldEF0dHJpYnV0ZSgnY29udGVudCcpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gQ29ubmVjdG9yO1xufSgpO1xuXG4vKipcclxuICogVGhpcyBjbGFzcyBjcmVhdGVzIGEgY29ubmVjdG9yIHRvIFB1c2hlci5cclxuICovXG5cbnZhciBQdXNoZXJDb25uZWN0b3IgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9Db25uZWN0b3IpIHtcbiAgX2luaGVyaXRzKFB1c2hlckNvbm5lY3RvciwgX0Nvbm5lY3Rvcik7XG5cbiAgdmFyIF9zdXBlciA9IF9jcmVhdGVTdXBlcihQdXNoZXJDb25uZWN0b3IpO1xuXG4gIGZ1bmN0aW9uIFB1c2hlckNvbm5lY3RvcigpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUHVzaGVyQ29ubmVjdG9yKTtcblxuICAgIF90aGlzID0gX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgLyoqXHJcbiAgICAgKiBBbGwgb2YgdGhlIHN1YnNjcmliZWQgY2hhbm5lbCBuYW1lcy5cclxuICAgICAqL1xuXG4gICAgX3RoaXMuY2hhbm5lbHMgPSB7fTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cbiAgLyoqXHJcbiAgICogQ3JlYXRlIGEgZnJlc2ggUHVzaGVyIGNvbm5lY3Rpb24uXHJcbiAgICovXG5cblxuICBfY3JlYXRlQ2xhc3MoUHVzaGVyQ29ubmVjdG9yLCBbe1xuICAgIGtleTogXCJjb25uZWN0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbm5lY3QoKSB7XG4gICAgICBpZiAodHlwZW9mIHRoaXMub3B0aW9ucy5jbGllbnQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHRoaXMucHVzaGVyID0gdGhpcy5vcHRpb25zLmNsaWVudDtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5vcHRpb25zLlB1c2hlcikge1xuICAgICAgICB0aGlzLnB1c2hlciA9IG5ldyB0aGlzLm9wdGlvbnMuUHVzaGVyKHRoaXMub3B0aW9ucy5rZXksIHRoaXMub3B0aW9ucyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnB1c2hlciA9IG5ldyBQdXNoZXIodGhpcy5vcHRpb25zLmtleSwgdGhpcy5vcHRpb25zKTtcbiAgICAgIH1cbiAgICB9XG4gICAgLyoqXHJcbiAgICAgKiBTaWduIGluIHRoZSB1c2VyIHZpYSBQdXNoZXIgdXNlciBhdXRoZW50aWNhdGlvbiAoaHR0cHM6Ly9wdXNoZXIuY29tL2RvY3MvY2hhbm5lbHMvdXNpbmdfY2hhbm5lbHMvdXNlci1hdXRoZW50aWNhdGlvbi8pLlxyXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJzaWduaW5cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2lnbmluKCkge1xuICAgICAgdGhpcy5wdXNoZXIuc2lnbmluKCk7XG4gICAgfVxuICAgIC8qKlxyXG4gICAgICogTGlzdGVuIGZvciBhbiBldmVudCBvbiBhIGNoYW5uZWwgaW5zdGFuY2UuXHJcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImxpc3RlblwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBsaXN0ZW4obmFtZSwgZXZlbnQsIGNhbGxiYWNrKSB7XG4gICAgICByZXR1cm4gdGhpcy5jaGFubmVsKG5hbWUpLmxpc3RlbihldmVudCwgY2FsbGJhY2spO1xuICAgIH1cbiAgICAvKipcclxuICAgICAqIEdldCBhIGNoYW5uZWwgaW5zdGFuY2UgYnkgbmFtZS5cclxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiY2hhbm5lbFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjaGFubmVsKG5hbWUpIHtcbiAgICAgIGlmICghdGhpcy5jaGFubmVsc1tuYW1lXSkge1xuICAgICAgICB0aGlzLmNoYW5uZWxzW25hbWVdID0gbmV3IFB1c2hlckNoYW5uZWwodGhpcy5wdXNoZXIsIG5hbWUsIHRoaXMub3B0aW9ucyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLmNoYW5uZWxzW25hbWVdO1xuICAgIH1cbiAgICAvKipcclxuICAgICAqIEdldCBhIHByaXZhdGUgY2hhbm5lbCBpbnN0YW5jZSBieSBuYW1lLlxyXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJwcml2YXRlQ2hhbm5lbFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBwcml2YXRlQ2hhbm5lbChuYW1lKSB7XG4gICAgICBpZiAoIXRoaXMuY2hhbm5lbHNbJ3ByaXZhdGUtJyArIG5hbWVdKSB7XG4gICAgICAgIHRoaXMuY2hhbm5lbHNbJ3ByaXZhdGUtJyArIG5hbWVdID0gbmV3IFB1c2hlclByaXZhdGVDaGFubmVsKHRoaXMucHVzaGVyLCAncHJpdmF0ZS0nICsgbmFtZSwgdGhpcy5vcHRpb25zKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMuY2hhbm5lbHNbJ3ByaXZhdGUtJyArIG5hbWVdO1xuICAgIH1cbiAgICAvKipcclxuICAgICAqIEdldCBhIHByaXZhdGUgZW5jcnlwdGVkIGNoYW5uZWwgaW5zdGFuY2UgYnkgbmFtZS5cclxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiZW5jcnlwdGVkUHJpdmF0ZUNoYW5uZWxcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZW5jcnlwdGVkUHJpdmF0ZUNoYW5uZWwobmFtZSkge1xuICAgICAgaWYgKCF0aGlzLmNoYW5uZWxzWydwcml2YXRlLWVuY3J5cHRlZC0nICsgbmFtZV0pIHtcbiAgICAgICAgdGhpcy5jaGFubmVsc1sncHJpdmF0ZS1lbmNyeXB0ZWQtJyArIG5hbWVdID0gbmV3IFB1c2hlckVuY3J5cHRlZFByaXZhdGVDaGFubmVsKHRoaXMucHVzaGVyLCAncHJpdmF0ZS1lbmNyeXB0ZWQtJyArIG5hbWUsIHRoaXMub3B0aW9ucyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLmNoYW5uZWxzWydwcml2YXRlLWVuY3J5cHRlZC0nICsgbmFtZV07XG4gICAgfVxuICAgIC8qKlxyXG4gICAgICogR2V0IGEgcHJlc2VuY2UgY2hhbm5lbCBpbnN0YW5jZSBieSBuYW1lLlxyXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJwcmVzZW5jZUNoYW5uZWxcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcHJlc2VuY2VDaGFubmVsKG5hbWUpIHtcbiAgICAgIGlmICghdGhpcy5jaGFubmVsc1sncHJlc2VuY2UtJyArIG5hbWVdKSB7XG4gICAgICAgIHRoaXMuY2hhbm5lbHNbJ3ByZXNlbmNlLScgKyBuYW1lXSA9IG5ldyBQdXNoZXJQcmVzZW5jZUNoYW5uZWwodGhpcy5wdXNoZXIsICdwcmVzZW5jZS0nICsgbmFtZSwgdGhpcy5vcHRpb25zKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMuY2hhbm5lbHNbJ3ByZXNlbmNlLScgKyBuYW1lXTtcbiAgICB9XG4gICAgLyoqXHJcbiAgICAgKiBMZWF2ZSB0aGUgZ2l2ZW4gY2hhbm5lbCwgYXMgd2VsbCBhcyBpdHMgcHJpdmF0ZSBhbmQgcHJlc2VuY2UgdmFyaWFudHMuXHJcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImxlYXZlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGxlYXZlKG5hbWUpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICB2YXIgY2hhbm5lbHMgPSBbbmFtZSwgJ3ByaXZhdGUtJyArIG5hbWUsICdwcml2YXRlLWVuY3J5cHRlZC0nICsgbmFtZSwgJ3ByZXNlbmNlLScgKyBuYW1lXTtcbiAgICAgIGNoYW5uZWxzLmZvckVhY2goZnVuY3Rpb24gKG5hbWUsIGluZGV4KSB7XG4gICAgICAgIF90aGlzMi5sZWF2ZUNoYW5uZWwobmFtZSk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgLyoqXHJcbiAgICAgKiBMZWF2ZSB0aGUgZ2l2ZW4gY2hhbm5lbC5cclxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwibGVhdmVDaGFubmVsXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGxlYXZlQ2hhbm5lbChuYW1lKSB7XG4gICAgICBpZiAodGhpcy5jaGFubmVsc1tuYW1lXSkge1xuICAgICAgICB0aGlzLmNoYW5uZWxzW25hbWVdLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgIGRlbGV0ZSB0aGlzLmNoYW5uZWxzW25hbWVdO1xuICAgICAgfVxuICAgIH1cbiAgICAvKipcclxuICAgICAqIEdldCB0aGUgc29ja2V0IElEIGZvciB0aGUgY29ubmVjdGlvbi5cclxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwic29ja2V0SWRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc29ja2V0SWQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5wdXNoZXIuY29ubmVjdGlvbi5zb2NrZXRfaWQ7XG4gICAgfVxuICAgIC8qKlxyXG4gICAgICogRGlzY29ubmVjdCBQdXNoZXIgY29ubmVjdGlvbi5cclxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiZGlzY29ubmVjdFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBkaXNjb25uZWN0KCkge1xuICAgICAgdGhpcy5wdXNoZXIuZGlzY29ubmVjdCgpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBQdXNoZXJDb25uZWN0b3I7XG59KENvbm5lY3Rvcik7XG5cbi8qKlxyXG4gKiBUaGlzIGNsYXNzIGNyZWF0ZXMgYSBjb25ubmVjdG9yIHRvIGEgU29ja2V0LmlvIHNlcnZlci5cclxuICovXG5cbnZhciBTb2NrZXRJb0Nvbm5lY3RvciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0Nvbm5lY3Rvcikge1xuICBfaW5oZXJpdHMoU29ja2V0SW9Db25uZWN0b3IsIF9Db25uZWN0b3IpO1xuXG4gIHZhciBfc3VwZXIgPSBfY3JlYXRlU3VwZXIoU29ja2V0SW9Db25uZWN0b3IpO1xuXG4gIGZ1bmN0aW9uIFNvY2tldElvQ29ubmVjdG9yKCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTb2NrZXRJb0Nvbm5lY3Rvcik7XG5cbiAgICBfdGhpcyA9IF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIC8qKlxyXG4gICAgICogQWxsIG9mIHRoZSBzdWJzY3JpYmVkIGNoYW5uZWwgbmFtZXMuXHJcbiAgICAgKi9cblxuICAgIF90aGlzLmNoYW5uZWxzID0ge307XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG4gIC8qKlxyXG4gICAqIENyZWF0ZSBhIGZyZXNoIFNvY2tldC5pbyBjb25uZWN0aW9uLlxyXG4gICAqL1xuXG5cbiAgX2NyZWF0ZUNsYXNzKFNvY2tldElvQ29ubmVjdG9yLCBbe1xuICAgIGtleTogXCJjb25uZWN0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbm5lY3QoKSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgdmFyIGlvID0gdGhpcy5nZXRTb2NrZXRJTygpO1xuICAgICAgdGhpcy5zb2NrZXQgPSBpbyh0aGlzLm9wdGlvbnMuaG9zdCwgdGhpcy5vcHRpb25zKTtcbiAgICAgIHRoaXMuc29ja2V0Lm9uKCdyZWNvbm5lY3QnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIE9iamVjdC52YWx1ZXMoX3RoaXMyLmNoYW5uZWxzKS5mb3JFYWNoKGZ1bmN0aW9uIChjaGFubmVsKSB7XG4gICAgICAgICAgY2hhbm5lbC5zdWJzY3JpYmUoKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiB0aGlzLnNvY2tldDtcbiAgICB9XG4gICAgLyoqXHJcbiAgICAgKiBHZXQgc29ja2V0LmlvIG1vZHVsZSBmcm9tIGdsb2JhbCBzY29wZSBvciBvcHRpb25zLlxyXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJnZXRTb2NrZXRJT1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRTb2NrZXRJTygpIHtcbiAgICAgIGlmICh0eXBlb2YgdGhpcy5vcHRpb25zLmNsaWVudCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy5jbGllbnQ7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgaW8gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHJldHVybiBpbztcbiAgICAgIH1cblxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdTb2NrZXQuaW8gY2xpZW50IG5vdCBmb3VuZC4gU2hvdWxkIGJlIGdsb2JhbGx5IGF2YWlsYWJsZSBvciBwYXNzZWQgdmlhIG9wdGlvbnMuY2xpZW50Jyk7XG4gICAgfVxuICAgIC8qKlxyXG4gICAgICogTGlzdGVuIGZvciBhbiBldmVudCBvbiBhIGNoYW5uZWwgaW5zdGFuY2UuXHJcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImxpc3RlblwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBsaXN0ZW4obmFtZSwgZXZlbnQsIGNhbGxiYWNrKSB7XG4gICAgICByZXR1cm4gdGhpcy5jaGFubmVsKG5hbWUpLmxpc3RlbihldmVudCwgY2FsbGJhY2spO1xuICAgIH1cbiAgICAvKipcclxuICAgICAqIEdldCBhIGNoYW5uZWwgaW5zdGFuY2UgYnkgbmFtZS5cclxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiY2hhbm5lbFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjaGFubmVsKG5hbWUpIHtcbiAgICAgIGlmICghdGhpcy5jaGFubmVsc1tuYW1lXSkge1xuICAgICAgICB0aGlzLmNoYW5uZWxzW25hbWVdID0gbmV3IFNvY2tldElvQ2hhbm5lbCh0aGlzLnNvY2tldCwgbmFtZSwgdGhpcy5vcHRpb25zKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMuY2hhbm5lbHNbbmFtZV07XG4gICAgfVxuICAgIC8qKlxyXG4gICAgICogR2V0IGEgcHJpdmF0ZSBjaGFubmVsIGluc3RhbmNlIGJ5IG5hbWUuXHJcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcInByaXZhdGVDaGFubmVsXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHByaXZhdGVDaGFubmVsKG5hbWUpIHtcbiAgICAgIGlmICghdGhpcy5jaGFubmVsc1sncHJpdmF0ZS0nICsgbmFtZV0pIHtcbiAgICAgICAgdGhpcy5jaGFubmVsc1sncHJpdmF0ZS0nICsgbmFtZV0gPSBuZXcgU29ja2V0SW9Qcml2YXRlQ2hhbm5lbCh0aGlzLnNvY2tldCwgJ3ByaXZhdGUtJyArIG5hbWUsIHRoaXMub3B0aW9ucyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLmNoYW5uZWxzWydwcml2YXRlLScgKyBuYW1lXTtcbiAgICB9XG4gICAgLyoqXHJcbiAgICAgKiBHZXQgYSBwcmVzZW5jZSBjaGFubmVsIGluc3RhbmNlIGJ5IG5hbWUuXHJcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcInByZXNlbmNlQ2hhbm5lbFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBwcmVzZW5jZUNoYW5uZWwobmFtZSkge1xuICAgICAgaWYgKCF0aGlzLmNoYW5uZWxzWydwcmVzZW5jZS0nICsgbmFtZV0pIHtcbiAgICAgICAgdGhpcy5jaGFubmVsc1sncHJlc2VuY2UtJyArIG5hbWVdID0gbmV3IFNvY2tldElvUHJlc2VuY2VDaGFubmVsKHRoaXMuc29ja2V0LCAncHJlc2VuY2UtJyArIG5hbWUsIHRoaXMub3B0aW9ucyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLmNoYW5uZWxzWydwcmVzZW5jZS0nICsgbmFtZV07XG4gICAgfVxuICAgIC8qKlxyXG4gICAgICogTGVhdmUgdGhlIGdpdmVuIGNoYW5uZWwsIGFzIHdlbGwgYXMgaXRzIHByaXZhdGUgYW5kIHByZXNlbmNlIHZhcmlhbnRzLlxyXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJsZWF2ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBsZWF2ZShuYW1lKSB7XG4gICAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgICAgdmFyIGNoYW5uZWxzID0gW25hbWUsICdwcml2YXRlLScgKyBuYW1lLCAncHJlc2VuY2UtJyArIG5hbWVdO1xuICAgICAgY2hhbm5lbHMuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICBfdGhpczMubGVhdmVDaGFubmVsKG5hbWUpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxyXG4gICAgICogTGVhdmUgdGhlIGdpdmVuIGNoYW5uZWwuXHJcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImxlYXZlQ2hhbm5lbFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBsZWF2ZUNoYW5uZWwobmFtZSkge1xuICAgICAgaWYgKHRoaXMuY2hhbm5lbHNbbmFtZV0pIHtcbiAgICAgICAgdGhpcy5jaGFubmVsc1tuYW1lXS51bnN1YnNjcmliZSgpO1xuICAgICAgICBkZWxldGUgdGhpcy5jaGFubmVsc1tuYW1lXTtcbiAgICAgIH1cbiAgICB9XG4gICAgLyoqXHJcbiAgICAgKiBHZXQgdGhlIHNvY2tldCBJRCBmb3IgdGhlIGNvbm5lY3Rpb24uXHJcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcInNvY2tldElkXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNvY2tldElkKCkge1xuICAgICAgcmV0dXJuIHRoaXMuc29ja2V0LmlkO1xuICAgIH1cbiAgICAvKipcclxuICAgICAqIERpc2Nvbm5lY3QgU29ja2V0aW8gY29ubmVjdGlvbi5cclxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiZGlzY29ubmVjdFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBkaXNjb25uZWN0KCkge1xuICAgICAgdGhpcy5zb2NrZXQuZGlzY29ubmVjdCgpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBTb2NrZXRJb0Nvbm5lY3Rvcjtcbn0oQ29ubmVjdG9yKTtcblxuLyoqXHJcbiAqIFRoaXMgY2xhc3MgY3JlYXRlcyBhIG51bGwgY29ubmVjdG9yLlxyXG4gKi9cblxudmFyIE51bGxDb25uZWN0b3IgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9Db25uZWN0b3IpIHtcbiAgX2luaGVyaXRzKE51bGxDb25uZWN0b3IsIF9Db25uZWN0b3IpO1xuXG4gIHZhciBfc3VwZXIgPSBfY3JlYXRlU3VwZXIoTnVsbENvbm5lY3Rvcik7XG5cbiAgZnVuY3Rpb24gTnVsbENvbm5lY3RvcigpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTnVsbENvbm5lY3Rvcik7XG5cbiAgICBfdGhpcyA9IF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIC8qKlxyXG4gICAgICogQWxsIG9mIHRoZSBzdWJzY3JpYmVkIGNoYW5uZWwgbmFtZXMuXHJcbiAgICAgKi9cblxuICAgIF90aGlzLmNoYW5uZWxzID0ge307XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG4gIC8qKlxyXG4gICAqIENyZWF0ZSBhIGZyZXNoIGNvbm5lY3Rpb24uXHJcbiAgICovXG5cblxuICBfY3JlYXRlQ2xhc3MoTnVsbENvbm5lY3RvciwgW3tcbiAgICBrZXk6IFwiY29ubmVjdFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb25uZWN0KCkgey8vXG4gICAgfVxuICAgIC8qKlxyXG4gICAgICogTGlzdGVuIGZvciBhbiBldmVudCBvbiBhIGNoYW5uZWwgaW5zdGFuY2UuXHJcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImxpc3RlblwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBsaXN0ZW4obmFtZSwgZXZlbnQsIGNhbGxiYWNrKSB7XG4gICAgICByZXR1cm4gbmV3IE51bGxDaGFubmVsKCk7XG4gICAgfVxuICAgIC8qKlxyXG4gICAgICogR2V0IGEgY2hhbm5lbCBpbnN0YW5jZSBieSBuYW1lLlxyXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJjaGFubmVsXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNoYW5uZWwobmFtZSkge1xuICAgICAgcmV0dXJuIG5ldyBOdWxsQ2hhbm5lbCgpO1xuICAgIH1cbiAgICAvKipcclxuICAgICAqIEdldCBhIHByaXZhdGUgY2hhbm5lbCBpbnN0YW5jZSBieSBuYW1lLlxyXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJwcml2YXRlQ2hhbm5lbFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBwcml2YXRlQ2hhbm5lbChuYW1lKSB7XG4gICAgICByZXR1cm4gbmV3IE51bGxQcml2YXRlQ2hhbm5lbCgpO1xuICAgIH1cbiAgICAvKipcclxuICAgICAqIEdldCBhIHByaXZhdGUgZW5jcnlwdGVkIGNoYW5uZWwgaW5zdGFuY2UgYnkgbmFtZS5cclxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiZW5jcnlwdGVkUHJpdmF0ZUNoYW5uZWxcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZW5jcnlwdGVkUHJpdmF0ZUNoYW5uZWwobmFtZSkge1xuICAgICAgcmV0dXJuIG5ldyBOdWxsUHJpdmF0ZUNoYW5uZWwoKTtcbiAgICB9XG4gICAgLyoqXHJcbiAgICAgKiBHZXQgYSBwcmVzZW5jZSBjaGFubmVsIGluc3RhbmNlIGJ5IG5hbWUuXHJcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcInByZXNlbmNlQ2hhbm5lbFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBwcmVzZW5jZUNoYW5uZWwobmFtZSkge1xuICAgICAgcmV0dXJuIG5ldyBOdWxsUHJlc2VuY2VDaGFubmVsKCk7XG4gICAgfVxuICAgIC8qKlxyXG4gICAgICogTGVhdmUgdGhlIGdpdmVuIGNoYW5uZWwsIGFzIHdlbGwgYXMgaXRzIHByaXZhdGUgYW5kIHByZXNlbmNlIHZhcmlhbnRzLlxyXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJsZWF2ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBsZWF2ZShuYW1lKSB7Ly9cbiAgICB9XG4gICAgLyoqXHJcbiAgICAgKiBMZWF2ZSB0aGUgZ2l2ZW4gY2hhbm5lbC5cclxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwibGVhdmVDaGFubmVsXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGxlYXZlQ2hhbm5lbChuYW1lKSB7Ly9cbiAgICB9XG4gICAgLyoqXHJcbiAgICAgKiBHZXQgdGhlIHNvY2tldCBJRCBmb3IgdGhlIGNvbm5lY3Rpb24uXHJcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcInNvY2tldElkXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNvY2tldElkKCkge1xuICAgICAgcmV0dXJuICdmYWtlLXNvY2tldC1pZCc7XG4gICAgfVxuICAgIC8qKlxyXG4gICAgICogRGlzY29ubmVjdCB0aGUgY29ubmVjdGlvbi5cclxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiZGlzY29ubmVjdFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBkaXNjb25uZWN0KCkgey8vXG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIE51bGxDb25uZWN0b3I7XG59KENvbm5lY3Rvcik7XG5cbi8qKlxyXG4gKiBUaGlzIGNsYXNzIGlzIHRoZSBwcmltYXJ5IEFQSSBmb3IgaW50ZXJhY3Rpbmcgd2l0aCBicm9hZGNhc3RpbmcuXHJcbiAqL1xuXG52YXIgRWNobyA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIC8qKlxyXG4gICAqIENyZWF0ZSBhIG5ldyBjbGFzcyBpbnN0YW5jZS5cclxuICAgKi9cbiAgZnVuY3Rpb24gRWNobyhvcHRpb25zKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEVjaG8pO1xuXG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICB0aGlzLmNvbm5lY3QoKTtcblxuICAgIGlmICghdGhpcy5vcHRpb25zLndpdGhvdXRJbnRlcmNlcHRvcnMpIHtcbiAgICAgIHRoaXMucmVnaXN0ZXJJbnRlcmNlcHRvcnMoKTtcbiAgICB9XG4gIH1cbiAgLyoqXHJcbiAgICogR2V0IGEgY2hhbm5lbCBpbnN0YW5jZSBieSBuYW1lLlxyXG4gICAqL1xuXG5cbiAgX2NyZWF0ZUNsYXNzKEVjaG8sIFt7XG4gICAga2V5OiBcImNoYW5uZWxcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY2hhbm5lbChfY2hhbm5lbCkge1xuICAgICAgcmV0dXJuIHRoaXMuY29ubmVjdG9yLmNoYW5uZWwoX2NoYW5uZWwpO1xuICAgIH1cbiAgICAvKipcclxuICAgICAqIENyZWF0ZSBhIG5ldyBjb25uZWN0aW9uLlxyXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJjb25uZWN0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbm5lY3QoKSB7XG4gICAgICBpZiAodGhpcy5vcHRpb25zLmJyb2FkY2FzdGVyID09ICdwdXNoZXInKSB7XG4gICAgICAgIHRoaXMuY29ubmVjdG9yID0gbmV3IFB1c2hlckNvbm5lY3Rvcih0aGlzLm9wdGlvbnMpO1xuICAgICAgfSBlbHNlIGlmICh0aGlzLm9wdGlvbnMuYnJvYWRjYXN0ZXIgPT0gJ3NvY2tldC5pbycpIHtcbiAgICAgICAgdGhpcy5jb25uZWN0b3IgPSBuZXcgU29ja2V0SW9Db25uZWN0b3IodGhpcy5vcHRpb25zKTtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5vcHRpb25zLmJyb2FkY2FzdGVyID09ICdudWxsJykge1xuICAgICAgICB0aGlzLmNvbm5lY3RvciA9IG5ldyBOdWxsQ29ubmVjdG9yKHRoaXMub3B0aW9ucyk7XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiB0aGlzLm9wdGlvbnMuYnJvYWRjYXN0ZXIgPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aGlzLmNvbm5lY3RvciA9IG5ldyB0aGlzLm9wdGlvbnMuYnJvYWRjYXN0ZXIodGhpcy5vcHRpb25zKTtcbiAgICAgIH1cbiAgICB9XG4gICAgLyoqXHJcbiAgICAgKiBEaXNjb25uZWN0IGZyb20gdGhlIEVjaG8gc2VydmVyLlxyXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJkaXNjb25uZWN0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRpc2Nvbm5lY3QoKSB7XG4gICAgICB0aGlzLmNvbm5lY3Rvci5kaXNjb25uZWN0KCk7XG4gICAgfVxuICAgIC8qKlxyXG4gICAgICogR2V0IGEgcHJlc2VuY2UgY2hhbm5lbCBpbnN0YW5jZSBieSBuYW1lLlxyXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJqb2luXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGpvaW4oY2hhbm5lbCkge1xuICAgICAgcmV0dXJuIHRoaXMuY29ubmVjdG9yLnByZXNlbmNlQ2hhbm5lbChjaGFubmVsKTtcbiAgICB9XG4gICAgLyoqXHJcbiAgICAgKiBMZWF2ZSB0aGUgZ2l2ZW4gY2hhbm5lbCwgYXMgd2VsbCBhcyBpdHMgcHJpdmF0ZSBhbmQgcHJlc2VuY2UgdmFyaWFudHMuXHJcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImxlYXZlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGxlYXZlKGNoYW5uZWwpIHtcbiAgICAgIHRoaXMuY29ubmVjdG9yLmxlYXZlKGNoYW5uZWwpO1xuICAgIH1cbiAgICAvKipcclxuICAgICAqIExlYXZlIHRoZSBnaXZlbiBjaGFubmVsLlxyXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJsZWF2ZUNoYW5uZWxcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gbGVhdmVDaGFubmVsKGNoYW5uZWwpIHtcbiAgICAgIHRoaXMuY29ubmVjdG9yLmxlYXZlQ2hhbm5lbChjaGFubmVsKTtcbiAgICB9XG4gICAgLyoqXHJcbiAgICAgKiBMZWF2ZSBhbGwgY2hhbm5lbHMuXHJcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImxlYXZlQWxsQ2hhbm5lbHNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gbGVhdmVBbGxDaGFubmVscygpIHtcbiAgICAgIGZvciAodmFyIGNoYW5uZWwgaW4gdGhpcy5jb25uZWN0b3IuY2hhbm5lbHMpIHtcbiAgICAgICAgdGhpcy5sZWF2ZUNoYW5uZWwoY2hhbm5lbCk7XG4gICAgICB9XG4gICAgfVxuICAgIC8qKlxyXG4gICAgICogTGlzdGVuIGZvciBhbiBldmVudCBvbiBhIGNoYW5uZWwgaW5zdGFuY2UuXHJcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImxpc3RlblwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBsaXN0ZW4oY2hhbm5lbCwgZXZlbnQsIGNhbGxiYWNrKSB7XG4gICAgICByZXR1cm4gdGhpcy5jb25uZWN0b3IubGlzdGVuKGNoYW5uZWwsIGV2ZW50LCBjYWxsYmFjayk7XG4gICAgfVxuICAgIC8qKlxyXG4gICAgICogR2V0IGEgcHJpdmF0ZSBjaGFubmVsIGluc3RhbmNlIGJ5IG5hbWUuXHJcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcInByaXZhdGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gX3ByaXZhdGUoY2hhbm5lbCkge1xuICAgICAgcmV0dXJuIHRoaXMuY29ubmVjdG9yLnByaXZhdGVDaGFubmVsKGNoYW5uZWwpO1xuICAgIH1cbiAgICAvKipcclxuICAgICAqIEdldCBhIHByaXZhdGUgZW5jcnlwdGVkIGNoYW5uZWwgaW5zdGFuY2UgYnkgbmFtZS5cclxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiZW5jcnlwdGVkUHJpdmF0ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBlbmNyeXB0ZWRQcml2YXRlKGNoYW5uZWwpIHtcbiAgICAgIHJldHVybiB0aGlzLmNvbm5lY3Rvci5lbmNyeXB0ZWRQcml2YXRlQ2hhbm5lbChjaGFubmVsKTtcbiAgICB9XG4gICAgLyoqXHJcbiAgICAgKiBHZXQgdGhlIFNvY2tldCBJRCBmb3IgdGhlIGNvbm5lY3Rpb24uXHJcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcInNvY2tldElkXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNvY2tldElkKCkge1xuICAgICAgcmV0dXJuIHRoaXMuY29ubmVjdG9yLnNvY2tldElkKCk7XG4gICAgfVxuICAgIC8qKlxyXG4gICAgICogUmVnaXN0ZXIgM3JkIHBhcnR5IHJlcXVlc3QgaW50ZXJjZXB0aW9ycy4gVGhlc2UgYXJlIHVzZWQgdG8gYXV0b21hdGljYWxseVxyXG4gICAgICogc2VuZCBhIGNvbm5lY3Rpb25zIHNvY2tldCBpZCB0byBhIExhcmF2ZWwgYXBwIHdpdGggYSBYLVNvY2tldC1JZCBoZWFkZXIuXHJcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcInJlZ2lzdGVySW50ZXJjZXB0b3JzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlZ2lzdGVySW50ZXJjZXB0b3JzKCkge1xuICAgICAgaWYgKHR5cGVvZiBWdWUgPT09ICdmdW5jdGlvbicgJiYgVnVlLmh0dHApIHtcbiAgICAgICAgdGhpcy5yZWdpc3RlclZ1ZVJlcXVlc3RJbnRlcmNlcHRvcigpO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGF4aW9zID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRoaXMucmVnaXN0ZXJBeGlvc1JlcXVlc3RJbnRlcmNlcHRvcigpO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGpRdWVyeSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aGlzLnJlZ2lzdGVyalF1ZXJ5QWpheFNldHVwKCk7XG4gICAgICB9XG5cbiAgICAgIGlmICgodHlwZW9mIFR1cmJvID09PSBcInVuZGVmaW5lZFwiID8gXCJ1bmRlZmluZWRcIiA6IF90eXBlb2YoVHVyYm8pKSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgdGhpcy5yZWdpc3RlclR1cmJvUmVxdWVzdEludGVyY2VwdG9yKCk7XG4gICAgICB9XG4gICAgfVxuICAgIC8qKlxyXG4gICAgICogUmVnaXN0ZXIgYSBWdWUgSFRUUCBpbnRlcmNlcHRvciB0byBhZGQgdGhlIFgtU29ja2V0LUlEIGhlYWRlci5cclxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwicmVnaXN0ZXJWdWVSZXF1ZXN0SW50ZXJjZXB0b3JcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVnaXN0ZXJWdWVSZXF1ZXN0SW50ZXJjZXB0b3IoKSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICBWdWUuaHR0cC5pbnRlcmNlcHRvcnMucHVzaChmdW5jdGlvbiAocmVxdWVzdCwgbmV4dCkge1xuICAgICAgICBpZiAoX3RoaXMuc29ja2V0SWQoKSkge1xuICAgICAgICAgIHJlcXVlc3QuaGVhZGVycy5zZXQoJ1gtU29ja2V0LUlEJywgX3RoaXMuc29ja2V0SWQoKSk7XG4gICAgICAgIH1cblxuICAgICAgICBuZXh0KCk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgLyoqXHJcbiAgICAgKiBSZWdpc3RlciBhbiBBeGlvcyBIVFRQIGludGVyY2VwdG9yIHRvIGFkZCB0aGUgWC1Tb2NrZXQtSUQgaGVhZGVyLlxyXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJyZWdpc3RlckF4aW9zUmVxdWVzdEludGVyY2VwdG9yXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlZ2lzdGVyQXhpb3NSZXF1ZXN0SW50ZXJjZXB0b3IoKSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgYXhpb3MuaW50ZXJjZXB0b3JzLnJlcXVlc3QudXNlKGZ1bmN0aW9uIChjb25maWcpIHtcbiAgICAgICAgaWYgKF90aGlzMi5zb2NrZXRJZCgpKSB7XG4gICAgICAgICAgY29uZmlnLmhlYWRlcnNbJ1gtU29ja2V0LUlkJ10gPSBfdGhpczIuc29ja2V0SWQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBjb25maWc7XG4gICAgICB9KTtcbiAgICB9XG4gICAgLyoqXHJcbiAgICAgKiBSZWdpc3RlciBqUXVlcnkgQWpheFByZWZpbHRlciB0byBhZGQgdGhlIFgtU29ja2V0LUlEIGhlYWRlci5cclxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwicmVnaXN0ZXJqUXVlcnlBamF4U2V0dXBcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVnaXN0ZXJqUXVlcnlBamF4U2V0dXAoKSB7XG4gICAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgICAgaWYgKHR5cGVvZiBqUXVlcnkuYWpheCAhPSAndW5kZWZpbmVkJykge1xuICAgICAgICBqUXVlcnkuYWpheFByZWZpbHRlcihmdW5jdGlvbiAob3B0aW9ucywgb3JpZ2luYWxPcHRpb25zLCB4aHIpIHtcbiAgICAgICAgICBpZiAoX3RoaXMzLnNvY2tldElkKCkpIHtcbiAgICAgICAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKCdYLVNvY2tldC1JZCcsIF90aGlzMy5zb2NrZXRJZCgpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgICAvKipcclxuICAgICAqIFJlZ2lzdGVyIHRoZSBUdXJibyBSZXF1ZXN0IGludGVyY2VwdG9yIHRvIGFkZCB0aGUgWC1Tb2NrZXQtSUQgaGVhZGVyLlxyXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJyZWdpc3RlclR1cmJvUmVxdWVzdEludGVyY2VwdG9yXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlZ2lzdGVyVHVyYm9SZXF1ZXN0SW50ZXJjZXB0b3IoKSB7XG4gICAgICB2YXIgX3RoaXM0ID0gdGhpcztcblxuICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigndHVyYm86YmVmb3JlLWZldGNoLXJlcXVlc3QnLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgZXZlbnQuZGV0YWlsLmZldGNoT3B0aW9ucy5oZWFkZXJzWydYLVNvY2tldC1JZCddID0gX3RoaXM0LnNvY2tldElkKCk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gRWNobztcbn0oKTtcblxuZXhwb3J0IHsgQ2hhbm5lbCwgQ29ubmVjdG9yLCBFdmVudEZvcm1hdHRlciwgRWNobyBhcyBkZWZhdWx0IH07XG4iLCJpbXBvcnQgRWNobyBmcm9tIFwibGFyYXZlbC1lY2hvXCJcblxud2luZG93LlB1c2hlciA9IHJlcXVpcmUoJ3B1c2hlci1qcycpO1xud2luZG93LkVjaG8gPSBuZXcgRWNobyh7XG4gICAgYnJvYWRjYXN0ZXI6ICdwdXNoZXInLFxuICAgIGxvZ1RvQ29uc29sZTp0cnVlLFxuICAgIGtleTogcHJvY2Vzcy5lbnYuVlVFX0FQUF9QVVNIRVJfQVBQX0tFWSxcbiAgICBodHRwSG9zdDogd2luZG93LmxvY2F0aW9uLmhvc3RuYW1lLFxuICAgIGh0dHBzSG9zdDogd2luZG93LmxvY2F0aW9uLmhvc3RuYW1lLFxuICAgIHdzSG9zdDogd2luZG93LmxvY2F0aW9uLmhvc3RuYW1lLFxuICAgIHdzc0hvc3Q6IHdpbmRvdy5sb2NhdGlvbi5ob3N0bmFtZSxcbiAgICBlbmNyeXB0ZWQ6dHJ1ZSxcbiAgICB3c1BvcnQ6IHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicgPyA0NDMgOiA4MCxcbiAgICB3c3NQb3J0OiA0NDMsXG4gICAgZm9yY2VUTFM6IHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicsXG4gICAgZGlzYWJsZVN0YXRzOiBmYWxzZSxcbiAgICBjbHVzdGVyOiBwcm9jZXNzLmVudi5WVUVfQVBQX1BVU0hFUl9BUFBfQ0xVU1RFUixcbiAgICBlbmFibGVkVHJhbnNwb3J0czogWyd3cycsICd3c3MnXSxcbiAgICBhdXRoRW5kcG9pbnQ6ICdhcGkvYnJvYWRjYXN0aW5nL2F1dGgnLFxuICAgIGF1dGg6IHtcbiAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgJ3gtYXBwLWlkJzogcHJvY2Vzcy5lbnYuVlVFX0FQUF9QVVNIRVJfQVBQX0lEXG4gICAgICAgIH1cbiAgICB9XG59KVxuXG5cbmFkZEV2ZW50TGlzdGVuZXIoJ3BhZ2U6bG9hZGVkJywgZnVuY3Rpb24gKCkge1xuICAgIHRyeSB7XG4gICAgICAgIGlmKHdpbmRvdyAmJiB3aW5kb3cuUHVzaGVyKXtcbiAgICAgICAgICAgIHdpbmRvdy5QdXNoZXIubG9nVG9Db25zb2xlID0gdHJ1ZVxuICAgICAgICB9XG4gICAgICAgIGlmICh3aW5kb3cgJiYgd2luZG93LkVjaG8gJiYgIXdpbmRvdy5wcm9maWxlQ2hhbm5lbCkge1xuICAgICAgICAgICAgY29uc3QgdXNlciA9IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3VzZXInKSlcbiAgICAgICAgICAgIGNvbnN0IHJlcGxhY2VyID0gKGRhdGEpID0+IHtcbiAgICAgICAgICAgICAgICBPYmplY3Qua2V5cyhkYXRhKS5mb3JFYWNoKChpZCkgPT4ge1xuXG4gICAgICAgICAgICAgICAgICAgIGxldCBlbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlkKVxuICAgICAgICAgICAgICAgICAgICBpZiAoZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsLmlubmVySFRNTCA9IGRhdGFbaWRdXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHVzZXIgJiYgdXNlci5wcm9maWxlKSB7XG4gICAgICAgICAgICAgICAgd2luZG93LnByb2ZpbGVDaGFubmVsID0gd2luZG93LkVjaG8ucHJpdmF0ZSgncHJvZmlsZS4nICsgdXNlci5wcm9maWxlLmlkKVxuICAgICAgICAgICAgICAgICAgICAubGlzdGVuKCcubm90aWZpY2F0aW9ucycsIHJlcGxhY2VyKVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKGUpXG4gICAgfVxufSlcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uICgpIHtcblxufSJdLCJuYW1lcyI6WyJmYWN0b3J5Iiwid2luZG93IiwibW9kdWxlcyIsImluc3RhbGxlZE1vZHVsZXMiLCJtb2R1bGVJZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJpIiwibCIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJleHRlbmRTdGF0aWNzIiwiX19leHRlbmRzIiwidGhpcyIsImIiLCJzZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsIkFycmF5IiwiX18iLCJjb25zdHJ1Y3RvciIsIklOVkFMSURfQllURSIsIkNvZGVyIiwiX3BhZGRpbmdDaGFyYWN0ZXIiLCJlbmNvZGVkTGVuZ3RoIiwibGVuZ3RoIiwiZW5jb2RlIiwiZGF0YSIsIm91dCIsIl9lbmNvZGVCeXRlIiwibGVmdCIsIm1heERlY29kZWRMZW5ndGgiLCJkZWNvZGVkTGVuZ3RoIiwiX2dldFBhZGRpbmdMZW5ndGgiLCJkZWNvZGUiLCJVaW50OEFycmF5IiwicGFkZGluZ0xlbmd0aCIsIm9wIiwiaGF2ZUJhZCIsInYwIiwidjEiLCJ2MiIsInYzIiwiX2RlY29kZUNoYXIiLCJjaGFyQ29kZUF0IiwiRXJyb3IiLCJyZXN1bHQiLCJTdHJpbmciLCJmcm9tQ2hhckNvZGUiLCJzdGRDb2RlciIsIlVSTFNhZmVDb2RlciIsIl9zdXBlciIsImFwcGx5IiwiYXJndW1lbnRzIiwidXJsU2FmZUNvZGVyIiwiZW5jb2RlVVJMU2FmZSIsImRlY29kZVVSTFNhZmUiLCJJTlZBTElEX1VURjE2IiwiSU5WQUxJRF9VVEY4IiwiYXJyIiwicG9zIiwiY2hhcnMiLCJtaW4iLCJuMSIsIm4yIiwibjMiLCJwdXNoIiwiam9pbiIsImRlZmF1bHQiLCJBdXRoUmVxdWVzdFR5cGUiLCJTY3JpcHRSZWNlaXZlckZhY3RvcnkiLCJwcmVmaXgiLCJsYXN0SWQiLCJjYWxsYmFjayIsIm51bWJlciIsImlkIiwiY2FsbGVkIiwiY2FsbGJhY2tXcmFwcGVyIiwicmVtb3ZlIiwicmVjZWl2ZXIiLCJTY3JpcHRSZWNlaXZlcnMiLCJkZWZhdWx0cyIsIlZFUlNJT04iLCJQUk9UT0NPTCIsIndzUG9ydCIsIndzc1BvcnQiLCJ3c1BhdGgiLCJodHRwSG9zdCIsImh0dHBQb3J0IiwiaHR0cHNQb3J0IiwiaHR0cFBhdGgiLCJzdGF0c19ob3N0IiwiYXV0aEVuZHBvaW50IiwiYXV0aFRyYW5zcG9ydCIsImFjdGl2aXR5VGltZW91dCIsInBvbmdUaW1lb3V0IiwidW5hdmFpbGFibGVUaW1lb3V0IiwiY2x1c3RlciIsInVzZXJBdXRoZW50aWNhdGlvbiIsImVuZHBvaW50IiwidHJhbnNwb3J0IiwiY2hhbm5lbEF1dGhvcml6YXRpb24iLCJjZG5faHR0cCIsImNkbl9odHRwcyIsImRlcGVuZGVuY3lfc3VmZml4IiwiZGVwZW5kZW5jeV9sb2FkZXIiLCJEZXBlbmRlbmN5TG9hZGVyIiwib3B0aW9ucyIsInJlY2VpdmVycyIsImxvYWRpbmciLCJsb2FkIiwic2VsZiIsInJlcXVlc3QiLCJydW50aW1lIiwiY3JlYXRlU2NyaXB0UmVxdWVzdCIsImdldFBhdGgiLCJlcnJvciIsImNhbGxiYWNrcyIsInN1Y2Nlc3NDYWxsYmFjayIsIndhc1N1Y2Nlc3NmdWwiLCJjbGVhbnVwIiwic2VuZCIsImdldFJvb3QiLCJwcm90b2NvbCIsImdldERvY3VtZW50IiwibG9jYXRpb24iLCJ1c2VUTFMiLCJyZXBsYWNlIiwidmVyc2lvbiIsInN1ZmZpeCIsIkRlcGVuZGVuY2llc1JlY2VpdmVycyIsIkRlcGVuZGVuY2llcyIsInVybFN0b3JlIiwiYmFzZVVybCIsInVybHMiLCJhdXRoZW50aWNhdGlvbkVuZHBvaW50IiwicGF0aCIsImF1dGhvcml6YXRpb25FbmRwb2ludCIsImphdmFzY3JpcHRRdWlja1N0YXJ0IiwidHJpZ2dlcmluZ0NsaWVudEV2ZW50cyIsImVuY3J5cHRlZENoYW5uZWxTdXBwb3J0IiwiZnVsbFVybCIsInVybF9zdG9yZSIsInVybCIsInVybE9iaiIsInVybFByZWZpeCIsIkJhZEV2ZW50TmFtZSIsIm1zZyIsIl9uZXdUYXJnZXQiLCJfdGhpcyIsIkJhZENoYW5uZWxOYW1lIiwiUmVxdWVzdFRpbWVkT3V0IiwiVHJhbnNwb3J0UHJpb3JpdHlUb29Mb3ciLCJUcmFuc3BvcnRDbG9zZWQiLCJVbnN1cHBvcnRlZEZlYXR1cmUiLCJVbnN1cHBvcnRlZFRyYW5zcG9ydCIsIlVuc3VwcG9ydGVkU3RyYXRlZ3kiLCJIVFRQQXV0aEVycm9yIiwic3RhdHVzIiwieGhyX2F1dGgiLCJjb250ZXh0IiwicXVlcnkiLCJhdXRoT3B0aW9ucyIsImF1dGhSZXF1ZXN0VHlwZSIsInhociIsImNyZWF0ZVhIUiIsImhlYWRlck5hbWUiLCJvcGVuIiwic2V0UmVxdWVzdEhlYWRlciIsImhlYWRlcnMiLCJoZWFkZXJzUHJvdmlkZXIiLCJkeW5hbWljSGVhZGVycyIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsInJlYWR5U3RhdGUiLCJwYXJzZWQiLCJKU09OIiwicGFyc2UiLCJyZXNwb25zZVRleHQiLCJlIiwidG9TdHJpbmciLCJVc2VyQXV0aGVudGljYXRpb24iLCJDaGFubmVsQXV0aG9yaXphdGlvbiIsImI2NGNoYXJzIiwiYjY0dGFiIiwiYmFzZTY0X2kiLCJjaGFyQXQiLCJjYl91dG9iIiwiY2MiLCJ1dG9iIiwidSIsImNiX2VuY29kZSIsImNjYyIsInBhZGxlbiIsIm9yZCIsImJ0b2EiLCJhYnN0cmFjdF90aW1lciIsIlRpbWVyIiwic2V0IiwiY2xlYXIiLCJkZWxheSIsInRpbWVyIiwiaXNSdW5uaW5nIiwiZW5zdXJlQWJvcnRlZCIsInRpbWVyc19leHRlbmRzIiwidGltZXJzX2NsZWFyVGltZW91dCIsImNsZWFyVGltZW91dCIsInRpbWVyc19jbGVhckludGVydmFsIiwiY2xlYXJJbnRlcnZhbCIsIk9uZU9mZlRpbWVyIiwic2V0VGltZW91dCIsIlBlcmlvZGljVGltZXIiLCJzZXRJbnRlcnZhbCIsIlV0aWwiLCJub3ciLCJEYXRlIiwidmFsdWVPZiIsImRlZmVyIiwibWV0aG9kIiwiYXJncyIsIl9pIiwiYm91bmRBcmd1bWVudHMiLCJzbGljZSIsImNvbmNhdCIsInV0aWwiLCJleHRlbmQiLCJ0YXJnZXQiLCJzb3VyY2VzIiwiZXh0ZW5zaW9ucyIsInN0cmluZ2lmeSIsInNhZmVKU09OU3RyaW5naWZ5IiwiYXJyYXlJbmRleE9mIiwiYXJyYXkiLCJpdGVtIiwibmF0aXZlSW5kZXhPZiIsImluZGV4T2YiLCJvYmplY3RBcHBseSIsImYiLCJrZXlzIiwiXyIsIm1hcCIsImZpbHRlciIsInRlc3QiLCJmaWx0ZXJPYmplY3QiLCJCb29sZWFuIiwiYW55IiwiZW5jb2RlUGFyYW1zT2JqZWN0IiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiYnVpbGRRdWVyeVN0cmluZyIsInBhcmFtcyIsInVuZGVmaW5lZCIsInNvdXJjZSIsIm9iamVjdHMiLCJwYXRocyIsImRlcmV6IiwibnUiLCIkcmVmIiwibG9nZ2VyX0xvZ2dlciIsIkxvZ2dlciIsImdsb2JhbExvZyIsIm1lc3NhZ2UiLCJjb25zb2xlIiwibG9nIiwiZGVidWciLCJ3YXJuIiwiZ2xvYmFsTG9nV2FybiIsImdsb2JhbExvZ0Vycm9yIiwiZGVmYXVsdExvZ2dpbmdGdW5jdGlvbiIsImNvcmVfcHVzaGVyIiwibG9nVG9Db25zb2xlIiwibG9nZ2VyIiwianNvbnBfYXV0aCIsImNhbGxiYWNrTmFtZSIsIm5leHRBdXRoQ2FsbGJhY2tJRCIsImRvY3VtZW50Iiwic2NyaXB0IiwiY3JlYXRlRWxlbWVudCIsImF1dGhfY2FsbGJhY2tzIiwiY2FsbGJhY2tfbmFtZSIsInNyYyIsImhlYWQiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImRvY3VtZW50RWxlbWVudCIsImluc2VydEJlZm9yZSIsImZpcnN0Q2hpbGQiLCJzY3JpcHRfcmVxdWVzdCIsIlNjcmlwdFJlcXVlc3QiLCJlcnJvclN0cmluZyIsInR5cGUiLCJjaGFyc2V0IiwiYWRkRXZlbnRMaXN0ZW5lciIsIm9uZXJyb3IiLCJvbmxvYWQiLCJhc3luYyIsImF0dGFjaEV2ZW50IiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwiZXJyb3JTY3JpcHQiLCJ0ZXh0IiwibmV4dFNpYmxpbmciLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJqc29ucF9yZXF1ZXN0IiwiSlNPTlBSZXF1ZXN0IiwianNvbnBfdGltZWxpbmUiLCJnZXRBZ2VudCIsInNlbmRlciIsImhvc3QiLCJjcmVhdGVKU09OUFJlcXVlc3QiLCJnZXRHZW5lcmljVVJMIiwiYmFzZVNjaGVtZSIsImhvc3RUTFMiLCJob3N0Tm9uVExTIiwiZ2V0R2VuZXJpY1BhdGgiLCJxdWVyeVN0cmluZyIsIndzIiwiZ2V0SW5pdGlhbCIsImh0dHAiLCJzb2NranMiLCJjYWxsYmFja19yZWdpc3RyeSIsIkNhbGxiYWNrUmVnaXN0cnkiLCJfY2FsbGJhY2tzIiwiYWRkIiwicHJlZml4ZWRFdmVudE5hbWUiLCJmbiIsIm5hbWVzIiwicmVtb3ZlQ2FsbGJhY2siLCJyZW1vdmVBbGxDYWxsYmFja3MiLCJiaW5kaW5nIiwiZGlzcGF0Y2hlciIsIkRpc3BhdGNoZXIiLCJmYWlsVGhyb3VnaCIsImdsb2JhbF9jYWxsYmFja3MiLCJldmVudE5hbWUiLCJiaW5kX2dsb2JhbCIsInVuYmluZCIsInVuYmluZF9nbG9iYWwiLCJ1bmJpbmRfYWxsIiwiZW1pdCIsIm1ldGFkYXRhIiwidHJhbnNwb3J0X2Nvbm5lY3Rpb25fZXh0ZW5kcyIsInRyYW5zcG9ydF9jb25uZWN0aW9uX1RyYW5zcG9ydENvbm5lY3Rpb24iLCJUcmFuc3BvcnRDb25uZWN0aW9uIiwiaG9va3MiLCJwcmlvcml0eSIsImluaXRpYWxpemUiLCJ0cmFuc3BvcnRDb25uZWN0aW9uSW5pdGlhbGl6ZXIiLCJzdGF0ZSIsInRpbWVsaW5lIiwiZ2VuZXJhdGVVbmlxdWVJRCIsImhhbmRsZXNBY3Rpdml0eUNoZWNrcyIsInN1cHBvcnRzUGluZyIsImNvbm5lY3QiLCJzb2NrZXQiLCJnZXRTb2NrZXQiLCJvbkVycm9yIiwiY2hhbmdlU3RhdGUiLCJiaW5kTGlzdGVuZXJzIiwiY2xvc2UiLCJwaW5nIiwib25PcGVuIiwiYmVmb3JlT3BlbiIsIm9ub3BlbiIsImJ1aWxkVGltZWxpbmVNZXNzYWdlIiwib25DbG9zZSIsImNsb3NlRXZlbnQiLCJjb2RlIiwicmVhc29uIiwid2FzQ2xlYW4iLCJ1bmJpbmRMaXN0ZW5lcnMiLCJvbk1lc3NhZ2UiLCJvbkFjdGl2aXR5Iiwib25jbG9zZSIsIm9ubWVzc2FnZSIsIm9uYWN0aXZpdHkiLCJpbmZvIiwiY2lkIiwidHJhbnNwb3J0X2Nvbm5lY3Rpb24iLCJ0cmFuc3BvcnRzX3RyYW5zcG9ydCIsIlRyYW5zcG9ydCIsImlzU3VwcG9ydGVkIiwiZW52aXJvbm1lbnQiLCJjcmVhdGVDb25uZWN0aW9uIiwiV1NUcmFuc3BvcnQiLCJpc0luaXRpYWxpemVkIiwiZ2V0V2ViU29ja2V0QVBJIiwiY3JlYXRlV2ViU29ja2V0IiwiaHR0cENvbmZpZ3VyYXRpb24iLCJzdHJlYW1pbmdDb25maWd1cmF0aW9uIiwiSFRUUEZhY3RvcnkiLCJjcmVhdGVTdHJlYW1pbmdTb2NrZXQiLCJwb2xsaW5nQ29uZmlndXJhdGlvbiIsImNyZWF0ZVBvbGxpbmdTb2NrZXQiLCJ4aHJDb25maWd1cmF0aW9uIiwiaXNYSFJTdXBwb3J0ZWQiLCJ0cmFuc3BvcnRzIiwieGhyX3N0cmVhbWluZyIsInhocl9wb2xsaW5nIiwiU29ja0pTVHJhbnNwb3J0IiwiZmlsZSIsIlNvY2tKUyIsImpzX3BhdGgiLCJpZ25vcmVfbnVsbF9vcmlnaW4iLCJpZ25vcmVOdWxsT3JpZ2luIiwieGRyQ29uZmlndXJhdGlvbiIsImlzWERSU3VwcG9ydGVkIiwiWERSU3RyZWFtaW5nVHJhbnNwb3J0IiwiWERSUG9sbGluZ1RyYW5zcG9ydCIsInhkcl9zdHJlYW1pbmciLCJ4ZHJfcG9sbGluZyIsInRyYW5zcG9ydHNfdHJhbnNwb3J0cyIsIm5ldF9pbmZvX2V4dGVuZHMiLCJuZXRfaW5mb19OZXR3b3JrIiwiTmV0SW5mbyIsImlzT25saW5lIiwib25MaW5lIiwiYXNzaXN0YW50X3RvX3RoZV90cmFuc3BvcnRfbWFuYWdlciIsIkFzc2lzdGFudFRvVGhlVHJhbnNwb3J0TWFuYWdlciIsIm1hbmFnZXIiLCJtaW5QaW5nRGVsYXkiLCJtYXhQaW5nRGVsYXkiLCJwaW5nRGVsYXkiLCJjb25uZWN0aW9uIiwib3BlblRpbWVzdGFtcCIsIm9uQ2xvc2VkIiwicmVwb3J0RGVhdGgiLCJsaWZlc3BhbiIsIk1hdGgiLCJtYXgiLCJpc0FsaXZlIiwiUHJvdG9jb2wiLCJkZWNvZGVNZXNzYWdlIiwibWVzc2FnZUV2ZW50IiwibWVzc2FnZURhdGEiLCJwdXNoZXJFdmVudERhdGEiLCJwdXNoZXJFdmVudCIsImV2ZW50IiwiY2hhbm5lbCIsInVzZXJfaWQiLCJlbmNvZGVNZXNzYWdlIiwicHJvY2Vzc0hhbmRzaGFrZSIsImFjdGl2aXR5X3RpbWVvdXQiLCJhY3Rpb24iLCJzb2NrZXRfaWQiLCJnZXRDbG9zZUFjdGlvbiIsImdldENsb3NlRXJyb3IiLCJwcm90b2NvbF9wcm90b2NvbCIsImNvbm5lY3Rpb25fZXh0ZW5kcyIsImNvbm5lY3Rpb25fY29ubmVjdGlvbiIsIkNvbm5lY3Rpb24iLCJzZW5kX2V2ZW50IiwibGlzdGVuZXJzIiwiYWN0aXZpdHkiLCJjbG9zZWQiLCJoYW5kbGVDbG9zZUV2ZW50IiwibGlzdGVuZXIiLCJjb25uZWN0aW9uX2hhbmRzaGFrZSIsIkhhbmRzaGFrZSIsImZpbmlzaCIsInRpbWVsaW5lX3NlbmRlciIsIlRpbWVsaW5lU2VuZGVyIiwiaXNFbXB0eSIsIlRpbWVsaW5lVHJhbnNwb3J0IiwiY2hhbm5lbF9leHRlbmRzIiwiY2hhbm5lbHNfY2hhbm5lbCIsIkNoYW5uZWwiLCJwdXNoZXIiLCJzdWJzY3JpYmVkIiwic3Vic2NyaXB0aW9uUGVuZGluZyIsInN1YnNjcmlwdGlvbkNhbmNlbGxlZCIsImF1dGhvcml6ZSIsInNvY2tldElkIiwiYXV0aCIsInRyaWdnZXIiLCJkaXNjb25uZWN0IiwiaGFuZGxlRXZlbnQiLCJoYW5kbGVTdWJzY3JpcHRpb25TdWNjZWVkZWRFdmVudCIsImhhbmRsZVN1YnNjcmlwdGlvbkNvdW50RXZlbnQiLCJ1bnN1YnNjcmliZSIsInN1YnNjcmlwdGlvbl9jb3VudCIsInN1YnNjcmlwdGlvbkNvdW50Iiwic3Vic2NyaWJlIiwiYXNzaWduIiwiY2hhbm5lbF9kYXRhIiwiY2FuY2VsU3Vic2NyaXB0aW9uIiwicmVpbnN0YXRlU3Vic2NyaXB0aW9uIiwicHJpdmF0ZV9jaGFubmVsX2V4dGVuZHMiLCJQcml2YXRlQ2hhbm5lbCIsImNvbmZpZyIsImNoYW5uZWxBdXRob3JpemVyIiwiY2hhbm5lbE5hbWUiLCJwcml2YXRlX2NoYW5uZWwiLCJtZW1iZXJzIiwiTWVtYmVycyIsInJlc2V0IiwiZWFjaCIsIm1lbWJlciIsInNldE15SUQiLCJteUlEIiwib25TdWJzY3JpcHRpb24iLCJzdWJzY3JpcHRpb25EYXRhIiwicHJlc2VuY2UiLCJoYXNoIiwiY291bnQiLCJtZSIsImFkZE1lbWJlciIsIm1lbWJlckRhdGEiLCJ1c2VyX2luZm8iLCJyZW1vdmVNZW1iZXIiLCJwcmVzZW5jZV9jaGFubmVsX2V4dGVuZHMiLCJfX2F3YWl0ZXIiLCJ0aGlzQXJnIiwiX2FyZ3VtZW50cyIsIlAiLCJnZW5lcmF0b3IiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsImZ1bGZpbGxlZCIsInN0ZXAiLCJuZXh0IiwicmVqZWN0ZWQiLCJkb25lIiwidGhlbiIsIl9fZ2VuZXJhdG9yIiwiYm9keSIsInkiLCJnIiwibGFiZWwiLCJzZW50IiwidHJ5cyIsIm9wcyIsInZlcmIiLCJpdGVyYXRvciIsInYiLCJUeXBlRXJyb3IiLCJwb3AiLCJwcmVzZW5jZV9jaGFubmVsIiwiUHJlc2VuY2VDaGFubmVsIiwiYXV0aERhdGEiLCJjaGFubmVsRGF0YSIsIl9hIiwidXNlciIsInNpZ25pbkRvbmVQcm9taXNlIiwidXNlcl9kYXRhIiwiaGFuZGxlSW50ZXJuYWxFdmVudCIsImFkZGVkTWVtYmVyIiwicmVtb3ZlZE1lbWJlciIsInV0ZjgiLCJiYXNlNjQiLCJlbmNyeXB0ZWRfY2hhbm5lbF9leHRlbmRzIiwiZW5jcnlwdGVkX2NoYW5uZWwiLCJFbmNyeXB0ZWRDaGFubmVsIiwibmFjbCIsInNoYXJlZFNlY3JldCIsImhhbmRsZUVuY3J5cHRlZEV2ZW50IiwiY2lwaGVydGV4dCIsIm5vbmNlIiwiY2lwaGVyVGV4dCIsInNlY3JldGJveCIsIm92ZXJoZWFkTGVuZ3RoIiwibm9uY2VMZW5ndGgiLCJieXRlcyIsImdldERhdGFUb0VtaXQiLCJyYXciLCJjb25uZWN0aW9uX21hbmFnZXJfZXh0ZW5kcyIsImNvbm5lY3Rpb25fbWFuYWdlciIsIkNvbm5lY3Rpb25NYW5hZ2VyIiwidXNpbmdUTFMiLCJlcnJvckNhbGxiYWNrcyIsImJ1aWxkRXJyb3JDYWxsYmFja3MiLCJjb25uZWN0aW9uQ2FsbGJhY2tzIiwiYnVpbGRDb25uZWN0aW9uQ2FsbGJhY2tzIiwiaGFuZHNoYWtlQ2FsbGJhY2tzIiwiYnVpbGRIYW5kc2hha2VDYWxsYmFja3MiLCJOZXR3b3JrIiwiZ2V0TmV0d29yayIsIm5ldGluZm8iLCJyZXRyeUluIiwic2VuZEFjdGl2aXR5Q2hlY2siLCJ1cGRhdGVTdHJhdGVneSIsInJ1bm5lciIsInN0cmF0ZWd5IiwidXBkYXRlU3RhdGUiLCJzdGFydENvbm5lY3RpbmciLCJzZXRVbmF2YWlsYWJsZVRpbWVyIiwiZGlzY29ubmVjdEludGVybmFsbHkiLCJpc1VzaW5nVExTIiwiaGFuZHNoYWtlIiwiaGFuZHNoYWtlRXJyb3IiLCJhYm9ydENvbm5lY3RpbmciLCJhYm9ydCIsImNsZWFyUmV0cnlUaW1lciIsImNsZWFyVW5hdmFpbGFibGVUaW1lciIsImFiYW5kb25Db25uZWN0aW9uIiwiZ2V0U3RyYXRlZ3kiLCJyb3VuZCIsInJldHJ5VGltZXIiLCJ1bmF2YWlsYWJsZVRpbWVyIiwic3RvcEFjdGl2aXR5Q2hlY2siLCJhY3Rpdml0eVRpbWVyIiwicG9uZ190aW1lZF9vdXQiLCJyZXNldEFjdGl2aXR5Q2hlY2siLCJzaG91bGRSZXRyeSIsImNvbm5lY3RlZCIsIkluZmluaXR5Iiwic2V0Q29ubmVjdGlvbiIsIndpdGhFcnJvckVtaXR0ZWQiLCJ0bHNfb25seSIsInJlZnVzZWQiLCJiYWNrb2ZmIiwicmV0cnkiLCJuZXdTdGF0ZSIsInByZXZpb3VzU3RhdGUiLCJuZXdTdGF0ZURlc2NyaXB0aW9uIiwicHJldmlvdXMiLCJjdXJyZW50IiwiY2hhbm5lbHNfQ2hhbm5lbHMiLCJDaGFubmVscyIsImNoYW5uZWxzIiwiY3JlYXRlRW5jcnlwdGVkQ2hhbm5lbCIsImVyck1zZyIsImNyZWF0ZVByaXZhdGVDaGFubmVsIiwiY3JlYXRlUHJlc2VuY2VDaGFubmVsIiwiY3JlYXRlQ2hhbm5lbCIsImFsbCIsInZhbHVlcyIsImZpbmQiLCJjcmVhdGVDaGFubmVscyIsImNyZWF0ZUNvbm5lY3Rpb25NYW5hZ2VyIiwiY3JlYXRlVGltZWxpbmVTZW5kZXIiLCJjcmVhdGVIYW5kc2hha2UiLCJjcmVhdGVBc3Npc3RhbnRUb1RoZVRyYW5zcG9ydE1hbmFnZXIiLCJ0cmFuc3BvcnRfbWFuYWdlciIsIlRyYW5zcG9ydE1hbmFnZXIiLCJsaXZlc0xlZnQiLCJsaXZlcyIsImdldEFzc2lzdGFudCIsInNlcXVlbnRpYWxfc3RyYXRlZ3kiLCJTZXF1ZW50aWFsU3RyYXRlZ3kiLCJzdHJhdGVnaWVzIiwibG9vcCIsImZhaWxGYXN0IiwidGltZW91dCIsInRpbWVvdXRMaW1pdCIsIm1pblByaW9yaXR5IiwidHJ5TmV4dFN0cmF0ZWd5IiwidHJ5U3RyYXRlZ3kiLCJmb3JjZU1pblByaW9yaXR5IiwiYmVzdF9jb25uZWN0ZWRfZXZlcl9zdHJhdGVneSIsIkJlc3RDb25uZWN0ZWRFdmVyU3RyYXRlZ3kiLCJjYWxsYmFja0J1aWxkZXIiLCJydW5uZXJzIiwicnMiLCJhYm9ydFJ1bm5lciIsImNvbGxlY3Rpb25zX2FsbCIsImFsbFJ1bm5lcnNGYWlsZWQiLCJhYm9ydGVkIiwiY2FjaGVkX3N0cmF0ZWd5X0NhY2hlZFN0cmF0ZWd5IiwiQ2FjaGVkU3RyYXRlZ3kiLCJ0dGwiLCJzdG9yYWdlIiwiZ2V0TG9jYWxTdG9yYWdlIiwic2VyaWFsaXplZENhY2hlIiwiZ2V0VHJhbnNwb3J0Q2FjaGVLZXkiLCJmbHVzaFRyYW5zcG9ydENhY2hlIiwiZmV0Y2hUcmFuc3BvcnRDYWNoZSIsInRpbWVzdGFtcCIsImNhY2hlZCIsImxhdGVuY3kiLCJzdGFydFRpbWVzdGFtcCIsImNiIiwic3RvcmVUcmFuc3BvcnRDYWNoZSIsImNhY2hlZF9zdHJhdGVneSIsImRlbGF5ZWRfc3RyYXRlZ3kiLCJEZWxheWVkU3RyYXRlZ3kiLCJpZl9zdHJhdGVneSIsIklmU3RyYXRlZ3kiLCJ0cnVlQnJhbmNoIiwiZmFsc2VCcmFuY2giLCJmaXJzdF9jb25uZWN0ZWRfc3RyYXRlZ3kiLCJGaXJzdENvbm5lY3RlZFN0cmF0ZWd5IiwidGVzdFN1cHBvcnRzU3RyYXRlZ3kiLCJTdGF0ZSIsImRlZmF1bHRfc3RyYXRlZ3kiLCJiYXNlT3B0aW9ucyIsImRlZmluZVRyYW5zcG9ydCIsImRlZmluZWRUcmFuc3BvcnRzIiwiZGVmaW5lVHJhbnNwb3J0U3RyYXRlZ3kiLCJ3c1N0cmF0ZWd5Iiwid3Nfb3B0aW9ucyIsIndzSG9zdCIsIndzc19vcHRpb25zIiwic29ja2pzX29wdGlvbnMiLCJ0aW1lb3V0cyIsIndzX21hbmFnZXIiLCJzdHJlYW1pbmdfbWFuYWdlciIsIndzX3RyYW5zcG9ydCIsIndzc190cmFuc3BvcnQiLCJzb2NranNfdHJhbnNwb3J0IiwieGhyX3N0cmVhbWluZ190cmFuc3BvcnQiLCJ4ZHJfc3RyZWFtaW5nX3RyYW5zcG9ydCIsInhocl9wb2xsaW5nX3RyYW5zcG9ydCIsInhkcl9wb2xsaW5nX3RyYW5zcG9ydCIsIndzX2xvb3AiLCJ3c3NfbG9vcCIsInNvY2tqc19sb29wIiwic3RyZWFtaW5nX2xvb3AiLCJwb2xsaW5nX2xvb3AiLCJodHRwX2xvb3AiLCJodHRwX2ZhbGxiYWNrX2xvb3AiLCJodHRwX3hkb21haW5fcmVxdWVzdCIsImdldFJlcXVlc3QiLCJ4ZHIiLCJYRG9tYWluUmVxdWVzdCIsIm9udGltZW91dCIsIm9ucHJvZ3Jlc3MiLCJvbkNodW5rIiwiYWJvcnRSZXF1ZXN0IiwiaHR0cF9yZXF1ZXN0X2V4dGVuZHMiLCJodHRwX3JlcXVlc3QiLCJIVFRQUmVxdWVzdCIsInN0YXJ0IiwicGF5bG9hZCIsInBvc2l0aW9uIiwidW5sb2FkZXIiLCJhZGRVbmxvYWRMaXN0ZW5lciIsInJlbW92ZVVubG9hZExpc3RlbmVyIiwiY2h1bmsiLCJhZHZhbmNlQnVmZmVyIiwiaXNCdWZmZXJUb29Mb25nIiwiYnVmZmVyIiwidW5yZWFkRGF0YSIsImVuZE9mTGluZVBvc2l0aW9uIiwiYXV0b0luY3JlbWVudCIsImdldFVuaXF1ZVVSTCIsInNlcGFyYXRvciIsInJhbmRvbU51bWJlciIsInJhbmRvbUludCIsIlRpbWVsaW5lTGV2ZWwiLCJodHRwX3NvY2tldCIsIkhUVFBTb2NrZXQiLCJzZXNzaW9uIiwicmFuZG9tU3RyaW5nIiwicGFydHMiLCJleGVjIiwiYmFzZSIsImdldExvY2F0aW9uIiwiQ09OTkVDVElORyIsIm9wZW5TdHJlYW0iLCJzZW5kUmF3Iiwic2VuZEhlYXJ0YmVhdCIsIk9QRU4iLCJjcmVhdGVTb2NrZXRSZXF1ZXN0IiwicmVjb25uZWN0IiwiY2xvc2VTdHJlYW0iLCJDTE9TRUQiLCJvbkV2ZW50Iiwib25IZWFydGJlYXQiLCJob3N0bmFtZSIsInVybFBhcnRzIiwic3RyZWFtIiwiZ2V0UmVjZWl2ZVVSTCIsIm9uRmluaXNoZWQiLCJodHRwX3N0cmVhbWluZ19zb2NrZXQiLCJodHRwX3BvbGxpbmdfc29ja2V0IiwiaHR0cF94aHJfcmVxdWVzdCIsImdldFhIUkFQSSIsImh0dHBfaHR0cCIsImNyZWF0ZVNvY2tldCIsImNyZWF0ZVJlcXVlc3QiLCJnZXREZWZhdWx0U3RyYXRlZ3kiLCJUcmFuc3BvcnRzIiwiWE1MSHR0cFJlcXVlc3QiLCJXZWJTb2NrZXQiLCJNb3pXZWJTb2NrZXQiLCJzZXR1cCIsIlB1c2hlckNsYXNzIiwiUHVzaGVyIiwiaW5pdGlhbGl6ZU9uRG9jdW1lbnRCb2R5Iiwib25Eb2N1bWVudEJvZHkiLCJyZWFkeSIsImdldFByb3RvY29sIiwiZ2V0QXV0aG9yaXplcnMiLCJhamF4IiwianNvbnAiLCJsb2NhbFN0b3JhZ2UiLCJjcmVhdGVYTUxIdHRwUmVxdWVzdCIsImNyZWF0ZU1pY3Jvc29mdFhIUiIsIkFjdGl2ZVhPYmplY3QiLCJjcmVhdGVYRFIiLCJDb25zdHJ1Y3RvciIsIndpdGhDcmVkZW50aWFscyIsImRvY3VtZW50UHJvdG9jb2wiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiZGV0YWNoRXZlbnQiLCJmbG9vciIsImNyeXB0byIsImdldFJhbmRvbVZhbHVlcyIsIlVpbnQzMkFycmF5IiwicG93IiwidGltZWxpbmVfbGV2ZWwiLCJ0aW1lbGluZV90aW1lbGluZSIsIlRpbWVsaW5lIiwiZXZlbnRzIiwidW5pcXVlSUQiLCJsZXZlbCIsImxpbWl0Iiwic2hpZnQiLCJFUlJPUiIsIklORk8iLCJERUJVRyIsInNlbmRmbiIsImJ1bmRsZSIsImxpYiIsImZlYXR1cmVzIiwidHJhbnNwb3J0X3N0cmF0ZWd5IiwiVHJhbnNwb3J0U3RyYXRlZ3kiLCJmYWlsQXR0ZW1wdCIsIm9uSW5pdGlhbGl6ZWQiLCJzZXJpYWxpemVkVHJhbnNwb3J0Iiwic3RyYXRlZ3lfYnVpbGRlcl9UcmFuc3BvcnRzIiwic3RyYXRlZ3lfYnVpbGRlcl9kZWZpbmVUcmFuc3BvcnQiLCJ0cmFuc3BvcnRDbGFzcyIsImVuYWJsZWRUcmFuc3BvcnRzIiwiZGlzYWJsZWRUcmFuc3BvcnRzIiwic3RyYXRlZ3lfYnVpbGRlcl9VbnN1cHBvcnRlZFN0cmF0ZWd5IiwiZGVmZXJyZWQiLCJ1c2VyX2F1dGhlbnRpY2F0b3IiLCJwYXJhbXNQcm92aWRlciIsImR5bmFtaWNQYXJhbXMiLCJjb21wb3NlQ2hhbm5lbFF1ZXJ5IiwiY2hhbm5lbF9hdXRob3JpemVyIiwiY2hhbm5lbF9hdXRob3JpemVyX2NvbXBvc2VDaGFubmVsUXVlcnkiLCJDaGFubmVsQXV0aG9yaXplclByb3h5IiwiY2hhbm5lbEF1dGhvcml6ZXJHZW5lcmF0b3IiLCJkZXByZWNhdGVkQXV0aG9yaXplck9wdGlvbnMiLCJfX2Fzc2lnbiIsImdldEh0dHBIb3N0Iiwib3B0cyIsImdldFdlYnNvY2tldEhvc3QiLCJnZXRXZWJzb2NrZXRIb3N0RnJvbUNsdXN0ZXIiLCJzaG91bGRVc2VUTFMiLCJmb3JjZVRMUyIsImdldEVuYWJsZVN0YXRzQ29uZmlnIiwiZW5hYmxlU3RhdHMiLCJkaXNhYmxlU3RhdHMiLCJidWlsZFVzZXJBdXRoZW50aWNhdG9yIiwiYnVpbGRDaGFubmVsQXV0aG9yaXplciIsImN1c3RvbUhhbmRsZXIiLCJhdXRob3JpemVyIiwiYnVpbGRDaGFubmVsQXV0aCIsIndhdGNobGlzdF9leHRlbmRzIiwid2F0Y2hsaXN0IiwiV2F0Y2hsaXN0RmFjYWRlIiwiYmluZFdhdGNobGlzdEludGVybmFsRXZlbnQiLCJmb3JFYWNoIiwid2F0Y2hsaXN0RXZlbnQiLCJmbGF0X3Byb21pc2UiLCJwcm9taXNlIiwicmVzIiwicmVqIiwidXNlcl9leHRlbmRzIiwiVXNlckZhY2FkZSIsInNpZ25pbl9yZXF1ZXN0ZWQiLCJzZXJ2ZXJUb1VzZXJDaGFubmVsIiwiX3NpZ25pbkRvbmVSZXNvbHZlIiwiX29uQXV0aG9yaXplIiwiZXJyIiwiX2NsZWFudXAiLCJfc2lnbmluIiwiX25ld1NpZ25pblByb21pc2VJZk5lZWRlZCIsIl9vblNpZ25pblN1Y2Nlc3MiLCJzaWduaW4iLCJ1c2VyQXV0aGVudGljYXRvciIsIl9zdWJzY3JpYmVDaGFubmVscyIsInNldERvbmUiLCJwdXNoZXJfUHVzaGVyIiwiYXBwX2tleSIsImNoZWNrQXBwS2V5Iiwic3RhdHNIb3N0IiwidGltZWxpbmVQYXJhbXMiLCJnbG9iYWxfZW1pdHRlciIsInNlc3Npb25JRCIsImdldENsaWVudEZlYXR1cmVzIiwidGltZWxpbmVTZW5kZXIiLCJzdWJzY3JpYmVBbGwiLCJpbnRlcm5hbCIsImluc3RhbmNlcyIsImlzUmVhZHkiLCJhbGxDaGFubmVscyIsInRpbWVsaW5lU2VuZGVyVGltZXIiLCJldmVudF9uYW1lIiwiY2hhbm5lbF9uYW1lIiwiUnVudGltZSIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsImNhY2hlZE1vZHVsZSIsIl9fd2VicGFja19tb2R1bGVzX18iLCJfdHlwZW9mIiwib2JqIiwiX2NsYXNzQ2FsbENoZWNrIiwiaW5zdGFuY2UiLCJfZGVmaW5lUHJvcGVydGllcyIsInByb3BzIiwiZGVzY3JpcHRvciIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiX2NyZWF0ZUNsYXNzIiwicHJvdG9Qcm9wcyIsInN0YXRpY1Byb3BzIiwiX2V4dGVuZHMiLCJfaW5oZXJpdHMiLCJzdWJDbGFzcyIsInN1cGVyQ2xhc3MiLCJfc2V0UHJvdG90eXBlT2YiLCJfZ2V0UHJvdG90eXBlT2YiLCJnZXRQcm90b3R5cGVPZiIsIl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwiUmVmZXJlbmNlRXJyb3IiLCJfYXNzZXJ0VGhpc0luaXRpYWxpemVkIiwiX2NyZWF0ZVN1cGVyIiwiRGVyaXZlZCIsImhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QiLCJSZWZsZWN0IiwiY29uc3RydWN0Iiwic2hhbSIsIlByb3h5IiwiX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCIsIlN1cGVyIiwiTmV3VGFyZ2V0IiwibGlzdGVuIiwic3RvcExpc3RlbmluZyIsIkV2ZW50Rm9ybWF0dGVyIiwibmFtZXNwYWNlIiwic3Vic3RyIiwiUHVzaGVyQ2hhbm5lbCIsIl9DaGFubmVsIiwiZXZlbnRGb3JtYXR0ZXIiLCJzdWJzY3JpcHRpb24iLCJvbiIsImZvcm1hdCIsIl90aGlzMiIsInN0YXJ0c1dpdGgiLCJmb3JtYXR0ZWRFdmVudCIsInN1YnN0cmluZyIsIlB1c2hlclByaXZhdGVDaGFubmVsIiwiX1B1c2hlckNoYW5uZWwiLCJQdXNoZXJFbmNyeXB0ZWRQcml2YXRlQ2hhbm5lbCIsIlB1c2hlclByZXNlbmNlQ2hhbm5lbCIsImsiLCJTb2NrZXRJb0NoYW5uZWwiLCJ1bmJpbmRFdmVudCIsIl90aGlzMyIsInJlbW92ZUxpc3RlbmVyIiwiU29ja2V0SW9Qcml2YXRlQ2hhbm5lbCIsIl9Tb2NrZXRJb0NoYW5uZWwiLCJTb2NrZXRJb1ByZXNlbmNlQ2hhbm5lbCIsIl9Tb2NrZXRJb1ByaXZhdGVDaGFubiIsIk51bGxDaGFubmVsIiwiTnVsbFByaXZhdGVDaGFubmVsIiwiX051bGxDaGFubmVsIiwiTnVsbFByZXNlbmNlQ2hhbm5lbCIsIkNvbm5lY3RvciIsIl9kZWZhdWx0T3B0aW9ucyIsImJyb2FkY2FzdGVyIiwiY3NyZlRva2VuIiwiYmVhcmVyVG9rZW4iLCJzZXRPcHRpb25zIiwidG9rZW4iLCJzZWxlY3RvciIsInF1ZXJ5U2VsZWN0b3IiLCJnZXRBdHRyaWJ1dGUiLCJQdXNoZXJDb25uZWN0b3IiLCJfQ29ubmVjdG9yIiwiY2xpZW50IiwiaW5kZXgiLCJsZWF2ZUNoYW5uZWwiLCJTb2NrZXRJb0Nvbm5lY3RvciIsImlvIiwiZ2V0U29ja2V0SU8iLCJOdWxsQ29ubmVjdG9yIiwiRWNobyIsIndpdGhvdXRJbnRlcmNlcHRvcnMiLCJyZWdpc3RlckludGVyY2VwdG9ycyIsIl9jaGFubmVsIiwiY29ubmVjdG9yIiwicHJlc2VuY2VDaGFubmVsIiwibGVhdmUiLCJwcml2YXRlQ2hhbm5lbCIsImVuY3J5cHRlZFByaXZhdGVDaGFubmVsIiwiVnVlIiwicmVnaXN0ZXJWdWVSZXF1ZXN0SW50ZXJjZXB0b3IiLCJheGlvcyIsInJlZ2lzdGVyQXhpb3NSZXF1ZXN0SW50ZXJjZXB0b3IiLCJqUXVlcnkiLCJyZWdpc3RlcmpRdWVyeUFqYXhTZXR1cCIsIlR1cmJvIiwicmVnaXN0ZXJUdXJib1JlcXVlc3RJbnRlcmNlcHRvciIsImludGVyY2VwdG9ycyIsInVzZSIsImFqYXhQcmVmaWx0ZXIiLCJvcmlnaW5hbE9wdGlvbnMiLCJfdGhpczQiLCJkZXRhaWwiLCJmZXRjaE9wdGlvbnMiLCJyZXF1aXJlIiwicHJvY2VzcyIsImh0dHBzSG9zdCIsIndzc0hvc3QiLCJlbmNyeXB0ZWQiLCJwcm9maWxlQ2hhbm5lbCIsImdldEl0ZW0iLCJwcm9maWxlIiwiZWwiLCJnZXRFbGVtZW50QnlJZCIsImlubmVySFRNTCJdLCJzb3VyY2VSb290IjoiIn0=